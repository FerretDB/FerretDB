// Code generated by "genwrap -debug -schemas=documentdb_api,documentdb_api_catalog,documentdb_api_internal,documentdb_core"; DO NOT EDIT.

package documentdb_api_catalog

import (
	"context"
	"log/slog"
	"time"

	"github.com/FerretDB/wire/wirebson"
	"github.com/jackc/pgx/v5"
	"go.opentelemetry.io/otel"
	oteltrace "go.opentelemetry.io/otel/trace"

	"github.com/FerretDB/FerretDB/v2/internal/mongoerrors"
)

// BsonAggregationCount is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_aggregation_count_18886.
func BsonAggregationCount(ctx context.Context, conn *pgx.Conn, l *slog.Logger, databasename string, countSpec wirebson.RawDocument, document wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_aggregation_count", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_aggregation_count([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_aggregation_count", l)
	}
	return
}

// BsonAggregationDistinct is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_aggregation_distinct_18887.
func BsonAggregationDistinct(ctx context.Context, conn *pgx.Conn, l *slog.Logger, databasename string, distinctSpec wirebson.RawDocument, document wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_aggregation_distinct", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_aggregation_distinct([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_aggregation_distinct", l)
	}
	return
}

// BsonAggregationFind is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_aggregation_find_18885.
func BsonAggregationFind(ctx context.Context, conn *pgx.Conn, l *slog.Logger, databasename string, findSpec wirebson.RawDocument, document wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_aggregation_find", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_aggregation_find([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_aggregation_find", l)
	}
	return
}

// BsonAggregationPipeline is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_aggregation_pipeline_18884.
func BsonAggregationPipeline(ctx context.Context, conn *pgx.Conn, l *slog.Logger, databasename string, aggregationpipeline wirebson.RawDocument, document wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_aggregation_pipeline", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_aggregation_pipeline([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_aggregation_pipeline", l)
	}
	return
}

// BsonArrayAgg is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_array_agg_18985.
func BsonArrayAgg(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_array_agg", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_array_agg([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_array_agg", l)
	}
	return
}

// BsonArrayAgg18988 is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_array_agg_18988.
func BsonArrayAgg18988(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ string, _ bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_array_agg", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_array_agg([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_array_agg", l)
	}
	return
}

// BsonArrayAggFinal is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_array_agg_final_18932.
func BsonArrayAggFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_array_agg_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_array_agg_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_array_agg_final", l)
	}
	return
}

// BsonArrayAggTransition is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_array_agg_transition_18930.
func BsonArrayAggTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_array_agg_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_array_agg_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_array_agg_transition", l)
	}
	return
}

// BsonArrayAggTransition18931 is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_array_agg_transition_18931.
func BsonArrayAggTransition18931(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ string, _ bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_array_agg_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_array_agg_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_array_agg_transition", l)
	}
	return
}

// BsonAvgFinal is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_avg_final_18916.
func BsonAvgFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_avg_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_avg_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_avg_final", l)
	}
	return
}

// BsonBuildDistinctResponse is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_build_distinct_response_19009.
func BsonBuildDistinctResponse(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_build_distinct_response", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_build_distinct_response([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_build_distinct_response", l)
	}
	return
}

// BsonDistinctAgg is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_distinct_agg_19018.
func BsonDistinctAgg(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_distinct_agg", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_distinct_agg([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_distinct_agg", l)
	}
	return
}

// BsonDistinctUnwind is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_distinct_unwind_19008.
func BsonDistinctUnwind(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_distinct_unwind", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_distinct_unwind([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_distinct_unwind", l)
	}
	return
}

// BsonDollarAddFields is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_add_fields_18592.
func BsonDollarAddFields(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, pathSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_add_fields", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_add_fields([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_add_fields", l)
	}
	return
}

// BsonDollarAll is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_all_18570.
func BsonDollarAll(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_all", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_all([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_all", l)
	}
	return
}

// BsonDollarBitsAllClear is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_bits_all_clear_18573.
func BsonDollarBitsAllClear(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_bits_all_clear", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_bits_all_clear([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_bits_all_clear", l)
	}
	return
}

// BsonDollarBitsAllSet is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_bits_all_set_18575.
func BsonDollarBitsAllSet(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_bits_all_set", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_bits_all_set([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_bits_all_set", l)
	}
	return
}

// BsonDollarBitsAnyClear is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_bits_any_clear_18574.
func BsonDollarBitsAnyClear(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_bits_any_clear", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_bits_any_clear([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_bits_any_clear", l)
	}
	return
}

// BsonDollarBitsAnySet is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_bits_any_set_18576.
func BsonDollarBitsAnySet(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_bits_any_set", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_bits_any_set([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_bits_any_set", l)
	}
	return
}

// BsonDollarElemmatch is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_elemmatch_18569.
func BsonDollarElemmatch(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_elemmatch", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_elemmatch([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_elemmatch", l)
	}
	return
}

// BsonDollarEq is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_eq_18554.
func BsonDollarEq(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_eq", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_eq([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_eq", l)
	}
	return
}

// BsonDollarEq18563 is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_eq_18563.
func BsonDollarEq18563(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_eq", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_eq([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_eq", l)
	}
	return
}

// BsonDollarExists is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_exists_18571.
func BsonDollarExists(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_exists", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_exists([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_exists", l)
	}
	return
}

// BsonDollarExpr is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_expr_18578.
func BsonDollarExpr(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_expr", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_expr([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_expr", l)
	}
	return
}

// BsonDollarFacetProject is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_facet_project_18598.
func BsonDollarFacetProject(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_facet_project", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_facet_project([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_facet_project", l)
	}
	return
}

// BsonDollarGeointersects is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_geointersects_18670.
func BsonDollarGeointersects(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_geointersects", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_geointersects([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_geointersects", l)
	}
	return
}

// BsonDollarGeowithin is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_geowithin_18669.
func BsonDollarGeowithin(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_geowithin", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_geowithin([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_geowithin", l)
	}
	return
}

// BsonDollarGt is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_gt_18557.
func BsonDollarGt(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_gt", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_gt([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_gt", l)
	}
	return
}

// BsonDollarGt18566 is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_gt_18566.
func BsonDollarGt18566(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_gt", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_gt([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_gt", l)
	}
	return
}

// BsonDollarGte is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_gte_18558.
func BsonDollarGte(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_gte", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_gte([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_gte", l)
	}
	return
}

// BsonDollarGte18567 is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_gte_18567.
func BsonDollarGte18567(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_gte", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_gte([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_gte", l)
	}
	return
}

// BsonDollarIn is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_in_18559.
func BsonDollarIn(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_in", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_in([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_in", l)
	}
	return
}

// BsonDollarJsonSchema is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_json_schema_18580.
func BsonDollarJsonSchema(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_json_schema", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_json_schema([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_json_schema", l)
	}
	return
}

// BsonDollarLt is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_lt_18555.
func BsonDollarLt(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_lt", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_lt([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_lt", l)
	}
	return
}

// BsonDollarLt18564 is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_lt_18564.
func BsonDollarLt18564(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_lt", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_lt([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_lt", l)
	}
	return
}

// BsonDollarLte is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_lte_18556.
func BsonDollarLte(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_lte", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_lte([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_lte", l)
	}
	return
}

// BsonDollarLte18565 is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_lte_18565.
func BsonDollarLte18565(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_lte", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_lte([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_lte", l)
	}
	return
}

// BsonDollarMod is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_mod_18581.
func BsonDollarMod(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_mod", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_mod([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_mod", l)
	}
	return
}

// BsonDollarNe is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_ne_18560.
func BsonDollarNe(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_ne", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_ne([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_ne", l)
	}
	return
}

// BsonDollarNin is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_nin_18561.
func BsonDollarNin(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_nin", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_nin([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_nin", l)
	}
	return
}

// BsonDollarProject is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_project_18588.
func BsonDollarProject(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, pathSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_project", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_project([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_project", l)
	}
	return
}

// BsonDollarProjectFind is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_project_find_18590.
func BsonDollarProjectFind(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, pathSpec wirebson.RawDocument, querySpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_project_find", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_project_find([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_project_find", l)
	}
	return
}

// BsonDollarProjectGeonear is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_project_geonear_18666.
func BsonDollarProjectGeonear(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_project_geonear", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_project_geonear([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_project_geonear", l)
	}
	return
}

// BsonDollarRegex is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_regex_18577.
func BsonDollarRegex(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_regex", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_regex([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_regex", l)
	}
	return
}

// BsonDollarReplaceRoot is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_replace_root_18596.
func BsonDollarReplaceRoot(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, pathSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_replace_root", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_replace_root([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_replace_root", l)
	}
	return
}

// BsonDollarSet is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_set_18594.
func BsonDollarSet(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, pathSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_set", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_set([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_set", l)
	}
	return
}

// BsonDollarSize is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_size_18568.
func BsonDollarSize(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_size", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_size([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_size", l)
	}
	return
}

// BsonDollarType is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_type_18572.
func BsonDollarType(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_type", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_type([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_type", l)
	}
	return
}

// BsonDollarUnset is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_unset_18595.
func BsonDollarUnset(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, pathSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_unset", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_unset([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_unset", l)
	}
	return
}

// BsonDollarUnwind is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_unwind_19006.
func BsonDollarUnwind(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_unwind", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_unwind([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_unwind", l)
	}
	return
}

// BsonDollarUnwind19007 is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_dollar_unwind_19007.
func BsonDollarUnwind19007(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_dollar_unwind", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_dollar_unwind([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_dollar_unwind", l)
	}
	return
}

// BsonExpressionGet is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_expression_get_18602.
func BsonExpressionGet(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, expressionSpec wirebson.RawDocument, isnullonempty bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_expression_get", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_expression_get([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_expression_get", l)
	}
	return
}

// BsonExpressionMap is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_expression_map_18604.
func BsonExpressionMap(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, sourcearrayname string, expressionSpec wirebson.RawDocument, isnullonempty bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_expression_map", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_expression_map([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_expression_map", l)
	}
	return
}

// BsonFirstCombine is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_first_combine_18927.
func BsonFirstCombine(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_first_combine", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_first_combine([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_first_combine", l)
	}
	return
}

// BsonFirstLastFinal is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_first_last_final_18929.
func BsonFirstLastFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_first_last_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_first_last_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_first_last_final", l)
	}
	return
}

// BsonFirstLastFinalOnSorted is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_first_last_final_on_sorted_18926.
func BsonFirstLastFinalOnSorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_first_last_final_on_sorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_first_last_final_on_sorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_first_last_final_on_sorted", l)
	}
	return
}

// BsonFirstTransition is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_first_transition_18922.
func BsonFirstTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_first_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_first_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_first_transition", l)
	}
	return
}

// BsonFirstTransitionOnSorted is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_first_transition_on_sorted_18924.
func BsonFirstTransitionOnSorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_first_transition_on_sorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_first_transition_on_sorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_first_transition_on_sorted", l)
	}
	return
}

// BsonFirstnCombine is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_firstn_combine_18939.
func BsonFirstnCombine(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_firstn_combine", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_firstn_combine([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_firstn_combine", l)
	}
	return
}

// BsonFirstnLastnFinal is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_firstn_lastn_final_18941.
func BsonFirstnLastnFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_firstn_lastn_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_firstn_lastn_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_firstn_lastn_final", l)
	}
	return
}

// BsonFirstnLastnFinalOnSorted is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_firstn_lastn_final_on_sorted_18944.
func BsonFirstnLastnFinalOnSorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_firstn_lastn_final_on_sorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_firstn_lastn_final_on_sorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_firstn_lastn_final_on_sorted", l)
	}
	return
}

// BsonFirstnTransition is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_firstn_transition_18937.
func BsonFirstnTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ int64, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_firstn_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_firstn_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_firstn_transition", l)
	}
	return
}

// BsonFirstnTransitionOnSorted is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_firstn_transition_on_sorted_18942.
func BsonFirstnTransitionOnSorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ int64) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_firstn_transition_on_sorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_firstn_transition_on_sorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_firstn_transition_on_sorted", l)
	}
	return
}

// BsonGeonearDistance is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_geonear_distance_18667.
func BsonGeonearDistance(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_geonear_distance", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_geonear_distance([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_geonear_distance", l)
	}
	return
}

// BsonGistGeographyCompress is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_gist_geography_compress_18680.
func BsonGistGeographyCompress(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_gist_geography_compress", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_gist_geography_compress([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_gist_geography_compress", l)
	}
	return
}

// BsonGistGeographyConsistent is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_gist_geography_consistent_18682.
func BsonGistGeographyConsistent(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_gist_geography_consistent", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_gist_geography_consistent([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_gist_geography_consistent", l)
	}
	return
}

// BsonGistGeographyDistance is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_gist_geography_distance_18681.
func BsonGistGeographyDistance(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_gist_geography_distance", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_gist_geography_distance([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_gist_geography_distance", l)
	}
	return
}

// BsonGistGeographyOptions is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_gist_geography_options_18679.
func BsonGistGeographyOptions(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_gist_geography_options", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_gist_geography_options([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_gist_geography_options", l)
	}
	return
}

// BsonGistGeometry2dCompress is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_gist_geometry_2d_compress_18676.
func BsonGistGeometry2dCompress(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_gist_geometry_2d_compress", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_gist_geometry_2d_compress([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_gist_geometry_2d_compress", l)
	}
	return
}

// BsonGistGeometry2dOptions is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_gist_geometry_2d_options_18675.
func BsonGistGeometry2dOptions(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_gist_geometry_2d_options", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_gist_geometry_2d_options([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_gist_geometry_2d_options", l)
	}
	return
}

// BsonGistGeometryConsistent2d is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_gist_geometry_consistent_2d_18678.
func BsonGistGeometryConsistent2d(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_gist_geometry_consistent_2d", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_gist_geometry_consistent_2d([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_gist_geometry_consistent_2d", l)
	}
	return
}

// BsonGistGeometryDistance2d is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_gist_geometry_distance_2d_18677.
func BsonGistGeometryDistance2d(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_gist_geometry_distance_2d", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_gist_geometry_distance_2d([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_gist_geometry_distance_2d", l)
	}
	return
}

// BsonLastCombine is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_last_combine_18928.
func BsonLastCombine(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_last_combine", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_last_combine([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_last_combine", l)
	}
	return
}

// BsonLastTransition is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_last_transition_18923.
func BsonLastTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_last_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_last_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_last_transition", l)
	}
	return
}

// BsonLastTransitionOnSorted is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_last_transition_on_sorted_18925.
func BsonLastTransitionOnSorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_last_transition_on_sorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_last_transition_on_sorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_last_transition_on_sorted", l)
	}
	return
}

// BsonLastnCombine is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_lastn_combine_18940.
func BsonLastnCombine(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_lastn_combine", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_lastn_combine([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_lastn_combine", l)
	}
	return
}

// BsonLastnTransition is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_lastn_transition_18938.
func BsonLastnTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ int64, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_lastn_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_lastn_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_lastn_transition", l)
	}
	return
}

// BsonLastnTransitionOnSorted is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_lastn_transition_on_sorted_18943.
func BsonLastnTransitionOnSorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ int64) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_lastn_transition_on_sorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_lastn_transition_on_sorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_lastn_transition_on_sorted", l)
	}
	return
}

// BsonLookupUnwind is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_lookup_unwind_19011.
func BsonLookupUnwind(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_lookup_unwind", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_lookup_unwind([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_lookup_unwind", l)
	}
	return
}

// BsonMaxCombine is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_max_combine_18921.
func BsonMaxCombine(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_max_combine", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_max_combine([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_max_combine", l)
	}
	return
}

// BsonMaxTransition is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_max_transition_18918.
func BsonMaxTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_max_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_max_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_max_transition", l)
	}
	return
}

// BsonMinCombine is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_min_combine_18920.
func BsonMinCombine(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_min_combine", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_min_combine([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_min_combine", l)
	}
	return
}

// BsonMinMaxFinal is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_min_max_final_18917.
func BsonMinMaxFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_min_max_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_min_max_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_min_max_final", l)
	}
	return
}

// BsonMinTransition is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_min_transition_18919.
func BsonMinTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_min_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_min_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_min_transition", l)
	}
	return
}

// BsonObjectAgg is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_object_agg_18986.
func BsonObjectAgg(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_object_agg", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_object_agg([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_object_agg", l)
	}
	return
}

// BsonObjectAggFinal is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_object_agg_final_18934.
func BsonObjectAggFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_object_agg_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_object_agg_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_object_agg_final", l)
	}
	return
}

// BsonObjectAggTransition is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_object_agg_transition_18933.
func BsonObjectAggTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_object_agg_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_object_agg_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_object_agg_transition", l)
	}
	return
}

// BsonOrderby is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_orderby_18582.
func BsonOrderby(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_orderby", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_orderby([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_orderby", l)
	}
	return
}

// BsonOut is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_out_18987.
func BsonOut(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ string, _ string, _ string, _ string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_out", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_out([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_out", l)
	}
	return
}

// BsonOutFinal is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_out_final_18936.
func BsonOutFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_out_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_out_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_out_final", l)
	}
	return
}

// BsonOutTransition is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_out_transition_18935.
func BsonOutTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ string, _ string, _ string, _ string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_out_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_out_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_out_transition", l)
	}
	return
}

// BsonQueryMatch is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_query_match_18551.
func BsonQueryMatch(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_query_match", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_query_match([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_query_match", l)
	}
	return
}

// BsonSumAvgCombine is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_sum_avg_combine_18914.
func BsonSumAvgCombine(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_sum_avg_combine", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_sum_avg_combine([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_sum_avg_combine", l)
	}
	return
}

// BsonSumAvgTransition is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_sum_avg_transition_18913.
func BsonSumAvgTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_sum_avg_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_sum_avg_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_sum_avg_transition", l)
	}
	return
}

// BsonSumFinal is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_sum_final_18915.
func BsonSumFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_sum_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_sum_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_sum_final", l)
	}
	return
}

// BsonTrueMatch is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_true_match_18552.
func BsonTrueMatch(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_true_match", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_true_match([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_true_match", l)
	}
	return
}

// BsonValidateGeography is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_validate_geography_18683.
func BsonValidateGeography(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, keypath string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_validate_geography", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_validate_geography([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_validate_geography", l)
	}
	return
}

// BsonValidateGeometry is a wrapper for
//
//	[Comment] documentdb_api_catalog.bson_validate_geometry_18684.
func BsonValidateGeometry(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, keypath string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bson_validate_geometry", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bson_validate_geometry([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bson_validate_geometry", l)
	}
	return
}

// Bsonaverage is a wrapper for
//
//	[Comment] documentdb_api_catalog.bsonaverage_18974.
func Bsonaverage(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bsonaverage", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bsonaverage([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bsonaverage", l)
	}
	return
}

// Bsonfirst is a wrapper for
//
//	[Comment] documentdb_api_catalog.bsonfirst_18977.
func Bsonfirst(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bsonfirst", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bsonfirst([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bsonfirst", l)
	}
	return
}

// Bsonfirstn is a wrapper for
//
//	[Comment] documentdb_api_catalog.bsonfirstn_18981.
func Bsonfirstn(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ int64, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bsonfirstn", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bsonfirstn([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bsonfirstn", l)
	}
	return
}

// Bsonfirstnonsorted is a wrapper for
//
//	[Comment] documentdb_api_catalog.bsonfirstnonsorted_18983.
func Bsonfirstnonsorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ int64) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bsonfirstnonsorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bsonfirstnonsorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bsonfirstnonsorted", l)
	}
	return
}

// Bsonfirstonsorted is a wrapper for
//
//	[Comment] documentdb_api_catalog.bsonfirstonsorted_18979.
func Bsonfirstonsorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bsonfirstonsorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bsonfirstonsorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bsonfirstonsorted", l)
	}
	return
}

// Bsonlast is a wrapper for
//
//	[Comment] documentdb_api_catalog.bsonlast_18978.
func Bsonlast(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bsonlast", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bsonlast([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bsonlast", l)
	}
	return
}

// Bsonlastn is a wrapper for
//
//	[Comment] documentdb_api_catalog.bsonlastn_18982.
func Bsonlastn(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ int64, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bsonlastn", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bsonlastn([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bsonlastn", l)
	}
	return
}

// Bsonlastnonsorted is a wrapper for
//
//	[Comment] documentdb_api_catalog.bsonlastnonsorted_18984.
func Bsonlastnonsorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ int64) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bsonlastnonsorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bsonlastnonsorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bsonlastnonsorted", l)
	}
	return
}

// Bsonlastonsorted is a wrapper for
//
//	[Comment] documentdb_api_catalog.bsonlastonsorted_18980.
func Bsonlastonsorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bsonlastonsorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bsonlastonsorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bsonlastonsorted", l)
	}
	return
}

// Bsonmax is a wrapper for
//
//	[Comment] documentdb_api_catalog.bsonmax_18975.
func Bsonmax(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bsonmax", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bsonmax([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bsonmax", l)
	}
	return
}

// Bsonmin is a wrapper for
//
//	[Comment] documentdb_api_catalog.bsonmin_18976.
func Bsonmin(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bsonmin", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bsonmin([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bsonmin", l)
	}
	return
}

// Bsonsum is a wrapper for
//
//	[Comment] documentdb_api_catalog.bsonsum_18973.
func Bsonsum(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.bsonsum", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.bsonsum([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.bsonsum", l)
	}
	return
}

// Documentdbrumhandler is a wrapper for
//
//	[Comment] documentdb_api_catalog.documentdbrumhandler_18762.
func Documentdbrumhandler(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.documentdbrumhandler", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.documentdbrumhandler([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.documentdbrumhandler", l)
	}
	return
}

// DollarSupport is a wrapper for
//
//	[Comment] documentdb_api_catalog.dollar_support_18553.
func DollarSupport(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.dollar_support", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.dollar_support([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.dollar_support", l)
	}
	return
}

// GinBsonCanPreConsistent is a wrapper for
//
//	[Comment] documentdb_api_catalog.gin_bson_can_pre_consistent_18721.
func GinBsonCanPreConsistent(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.gin_bson_can_pre_consistent", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.gin_bson_can_pre_consistent([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.gin_bson_can_pre_consistent", l)
	}
	return
}

// GinBsonCompare is a wrapper for
//
//	[Comment] documentdb_api_catalog.gin_bson_compare_18797.
func GinBsonCompare(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.gin_bson_compare", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.gin_bson_compare([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.gin_bson_compare", l)
	}
	return
}

// GinBsonComparePartial is a wrapper for
//
//	[Comment] documentdb_api_catalog.gin_bson_compare_partial_18799.
func GinBsonComparePartial(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.gin_bson_compare_partial", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.gin_bson_compare_partial([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.gin_bson_compare_partial", l)
	}
	return
}

// GinBsonConsistent is a wrapper for
//
//	[Comment] documentdb_api_catalog.gin_bson_consistent_18800.
func GinBsonConsistent(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.gin_bson_consistent", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.gin_bson_consistent([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.gin_bson_consistent", l)
	}
	return
}

// GinBsonExclusionPreConsistent is a wrapper for
//
//	[Comment] documentdb_api_catalog.gin_bson_exclusion_pre_consistent_18720.
func GinBsonExclusionPreConsistent(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.gin_bson_exclusion_pre_consistent", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.gin_bson_exclusion_pre_consistent([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.gin_bson_exclusion_pre_consistent", l)
	}
	return
}

// GinBsonExtractQuery is a wrapper for
//
//	[Comment] documentdb_api_catalog.gin_bson_extract_query_18798.
func GinBsonExtractQuery(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.gin_bson_extract_query", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.gin_bson_extract_query([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.gin_bson_extract_query", l)
	}
	return
}

// GinBsonPreConsistent is a wrapper for
//
//	[Comment] documentdb_api_catalog.gin_bson_pre_consistent_18719.
func GinBsonPreConsistent(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}, _ wirebson.RawDocument, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.gin_bson_pre_consistent", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.gin_bson_pre_consistent([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.gin_bson_pre_consistent", l)
	}
	return
}

// GinBsonSinglePathExtractValue is a wrapper for
//
//	[Comment] documentdb_api_catalog.gin_bson_single_path_extract_value_18801.
func GinBsonSinglePathExtractValue(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.gin_bson_single_path_extract_value", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.gin_bson_single_path_extract_value([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.gin_bson_single_path_extract_value", l)
	}
	return
}

// GinBsonSinglePathOptions is a wrapper for
//
//	[Comment] documentdb_api_catalog.gin_bson_single_path_options_18802.
func GinBsonSinglePathOptions(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.gin_bson_single_path_options", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.gin_bson_single_path_options([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.gin_bson_single_path_options", l)
	}
	return
}

// GinBsonWildcardProjectExtractValue is a wrapper for
//
//	[Comment] documentdb_api_catalog.gin_bson_wildcard_project_extract_value_18831.
func GinBsonWildcardProjectExtractValue(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.gin_bson_wildcard_project_extract_value", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.gin_bson_wildcard_project_extract_value([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.gin_bson_wildcard_project_extract_value", l)
	}
	return
}

// GinBsonWildcardProjectOptions is a wrapper for
//
//	[Comment] documentdb_api_catalog.gin_bson_wildcard_project_options_18832.
func GinBsonWildcardProjectOptions(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.gin_bson_wildcard_project_options", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.gin_bson_wildcard_project_options([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.gin_bson_wildcard_project_options", l)
	}
	return
}

// QueryMatchSupport is a wrapper for
//
//	[Comment] documentdb_api_catalog.query_match_support_18550.
func QueryMatchSupport(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_catalog.query_match_support", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_catalog.query_match_support([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_catalog.query_match_support", l)
	}
	return
}
