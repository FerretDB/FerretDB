---
name: Go
on:
  pull_request:
    types:
      - unlabeled # if GitHub Actions stuck, add and remove "not ready" label to force rebuild
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - main
      - main-*
      - releases/*
  schedule:
    - cron: "12 0 * * *"

env:
  GOPATH: /home/runner/go
  GOCACHE: /home/runner/go/cache
  GOLANGCI_LINT_CACHE: /home/runner/go/cache/lint
  GOMODCACHE: /home/runner/go/mod
  GOPROXY: https://proxy.golang.org
  GOTOOLCHAIN: local

jobs:
  short-test:
    name: Short test
    runs-on: ubuntu-24.04
    timeout-minutes: 15

    # Do not run this job in parallel for any PR change or branch push.
    concurrency:
      group: ${{ github.workflow }}-short-test-${{ github.head_ref || github.ref_name }}
      cancel-in-progress: true

    if: github.event_name != 'pull_request' || !contains(github.event.pull_request.labels.*.name, 'not ready')

    steps:
      # TODO https://github.com/FerretDB/github-actions/issues/211
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # for `git describe` to work
          lfs: false # LFS is used only by website

      - name: Setup Go
        uses: FerretDB/github-actions/setup-go@main
        with:
          cache-key: short-test

      - name: Install Task
        run: go generate -x
        working-directory: tools

      - name: Run init
        run: bin/task init

      - name: Run short unit tests
        run: bin/task test-unit-short TEST_TIMEOUT=10m
        env:
          GOFLAGS: ${{ runner.debug == '1' && '-v' || '' }}
          GITHUB_TOKEN: invalid # to test that -short is handled correctly

      # we don't want them on CI
      - name: Clean test and fuzz caches
        if: always()
        run: go clean -testcache -fuzzcache

      - name: Check dirty
        if: always()
        run: |
          git status --untracked-files --ignored
          git status
          git diff --exit-code

  test:
    name: Test
    runs-on: ubuntu-24.04
    timeout-minutes: 15

    # Do not run this job in parallel for any PR change or branch push.
    concurrency:
      group: ${{ github.workflow }}-test-${{ github.head_ref || github.ref_name }}
      cancel-in-progress: true

    if: github.event_name != 'pull_request' || !contains(github.event.pull_request.labels.*.name, 'not ready')

    steps:
      # TODO https://github.com/FerretDB/github-actions/issues/211
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # for `git describe` to work
          lfs: false # LFS is used only by website

      - name: Setup Go
        uses: FerretDB/github-actions/setup-go@main
        with:
          cache-key: test

      - name: Install Task
        run: go generate -x
        working-directory: tools

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start environment
        run: bin/task env-up-detach

      - name: Run init
        run: bin/task init

      - name: Wait for and setup environment
        run: bin/task env-setup

      - name: Regenerate and reformat
        run: bin/task gen
        env:
          DOCUMENTDB_GEN_URL: postgres://username:password@127.0.0.1:5432/postgres

      - name: Build bin/ferretdb
        run: bin/task build-host

      - name: Run unit tests
        run: bin/task test-unit TEST_TIMEOUT=10m
        env:
          GOFLAGS: ${{ runner.debug == '1' && '-v' || '' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # for tools

      # we don't want them on CI
      - name: Clean test and fuzz caches
        if: always()
        run: go clean -testcache -fuzzcache

      - name: Check dirty
        if: always()
        run: |
          git status --untracked-files --ignored
          git status
          git diff --exit-code

  integration:
    # job name must be unique; make it unique and nice
    name: ${{ matrix.task }} ${{ matrix.shard_index }}/${{ matrix.shard_total }}

    # Do not run this job in parallel for any PR change or branch push
    # to save some resources.
    concurrency:
      group: ${{ github.workflow }}-integration-${{ matrix.task }}-${{ matrix.shard_index }}-${{ github.head_ref || github.ref_name }}
      cancel-in-progress: true

    if: github.event_name != 'pull_request' || !contains(github.event.pull_request.labels.*.name, 'not ready')

    strategy:
      fail-fast: false
      matrix:
        task: [postgresql]
        shard_index: [1, 2, 3, 4, 5]
        shard_total: [5]
        include:
          - { task: "mongodb", shard_index: 1, shard_total: 1 }

    uses: ./.github/workflows/_integration.yml
    with:
      task: ${{ matrix.task }}
      shard_index: ${{ matrix.shard_index }}
      shard_total: ${{ matrix.shard_total }}
      coveralls: true

  integration-no-xfail:
    name: postgresql no-xfail

    # Do not run this job in parallel for any PR change or branch push
    # to save some resources.
    concurrency:
      group: ${{ github.workflow }}-integration-no-xfail-${{ github.head_ref || github.ref_name }}
      cancel-in-progress: true

    # disable for now
    if: false
    # if: github.event_name != 'pull_request' || !contains(github.event.pull_request.labels.*.name, 'not ready')

    uses: ./.github/workflows/_integration.yml
    with:
      task: postgresql
      shard_index: 1
      shard_total: 1
      test_timeout: 5m
      no_xfail: true

  # https://github.com/lemurheavy/coveralls-public/issues/1636
  submit-coveralls:
    name: Submit final coveralls report
    runs-on: ubuntu-24.04
    needs: [test, integration]

    if: always() && (github.event_name != 'pull_request' || !contains(github.event.pull_request.labels.*.name, 'not ready'))

    steps:
      - name: Do nothing
        run: echo 'nothing'

  env-data:
    name: env-data
    runs-on: ubuntu-24.04
    timeout-minutes: 10

    # Do not run this job in parallel for any PR change or branch push.
    concurrency:
      group: ${{ github.workflow }}-env-data-${{ github.head_ref || github.ref_name }}
      cancel-in-progress: true

    if: github.event_name != 'pull_request' || !contains(github.event.pull_request.labels.*.name, 'not ready')

    steps:
      # TODO https://github.com/FerretDB/github-actions/issues/211
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # for `git describe` to work
          lfs: false # LFS is used only by website

      - name: Setup Go
        uses: FerretDB/github-actions/setup-go@main
        with:
          cache-key: env-data

      - name: Install Task
        run: go generate -x
        working-directory: tools

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start environment
        run: bin/task env-up-detach

      - name: Run init
        run: bin/task init

      - name: Build bin/ferretdb
        run: bin/task build-host

      - name: Wait for and setup environment
        run: bin/task env-setup

      - name: Start FerretDB in the background
        run: bin/task run &

      - name: Run env-data
        run: bin/task env-data
        env:
          GOFLAGS: ${{ runner.debug == '1' && '-v' || '' }}

  golangci-lint:
    name: golangci-lint
    runs-on: ubuntu-24.04
    timeout-minutes: 10

    # Do not run this job in parallel for any PR change or branch push.
    concurrency:
      group: ${{ github.workflow }}-golangci-lint-${{ github.head_ref || github.ref_name }}
      cancel-in-progress: true

    if: github.event_name != 'pull_request' || !contains(github.event.pull_request.labels.*.name, 'not ready')

    permissions:
      contents: read
      issues: read

    steps:
      # TODO https://github.com/FerretDB/github-actions/issues/211
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # for `golangci-lint run --new` to work
          lfs: false # LFS is used only by website

      - name: Setup Go
        uses: FerretDB/github-actions/setup-go@main
        with:
          cache-key: lint

      - name: Run linters
        uses: FerretDB/github-actions/linters@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
