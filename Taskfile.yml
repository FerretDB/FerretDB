version: 3

includes:
  build: ./Taskfile_{{OS}}.yml

vars:
  BENCHTIME: 5s
  FUZZTIME: 15s
  FUZZCORPUS: ../fuzz-corpus

tasks:
  gen-version:
    cmds:
      - go generate -x ./internal/util/version

  env-setup:
    deps:
      - gen-version
    cmds:
      - go run ./cmd/envtool/main.go

  env-up-detach:
    cmds:
      - docker-compose up --always-recreate-deps --force-recreate --remove-orphans --renew-anon-volumes --detach

  env-up:
    desc: "Start development environment"
    deps:
      - env-up-detach
      - env-setup
    cmds:
      - docker-compose logs --follow

  env-pull:
    cmds:
      - docker-compose pull --include-deps --quiet

  env-down:
    desc: "Stop development environment"
    cmds:
      - docker-compose down --remove-orphans --volumes

  fmt:
    cmds:
#      - ./bin/gofumpt{{.EXT}}
      - ./bin/gofumpt{{.EXT}} -w .

  test:
    cmds:
      - go test -race -shuffle=on -coverprofile=cover.txt -coverpkg=./... ./...
      - go test -race -shuffle=on -bench=. -benchtime=1x ./...


  # That's not quite correct: https://github.com/golang/go/issues/15513
  # But good enough for us.
  fuzz-init:
    deps:
      - gen-version
    cmds:
      - go test -count=0 ./...

  # Those commands should still run tests (i.e., should not have -run=XXX flags)
  # to fill seed corpus for fuzz tests that use WriteSeedCorpusFile (e.g., FuzzHandler).
  fuzz:
    desc: "Fuzz for about 2 minutes (with default FUZZTIME)"
    cmds:
      - go test -list='Fuzz.*' ./...
      # Running eight functions for $(FUZZTIME) each..."
      - go test -fuzz=FuzzArray -fuzztime=$(FUZZTIME) ./internal/bson/
      - go test -fuzz=FuzzDocument -fuzztime=$(FUZZTIME) ./internal/bson/
      - go test -fuzz=FuzzArray -fuzztime=$(FUZZTIME) ./internal/fjson/
      - go test -fuzz=FuzzDocument -fuzztime=$(FUZZTIME) ./internal/fjson/
      - go test -fuzz=FuzzMsg -fuzztime=$(FUZZTIME) ./internal/wire/
      - go test -fuzz=FuzzQuery -fuzztime=$(FUZZTIME) ./internal/wire/
      - go test -fuzz=FuzzReply -fuzztime=$(FUZZTIME) ./internal/wire/
      - go test -fuzz=FuzzHandler -fuzztime=$(FUZZTIME) ./internal/handlers/

  fuzz-corpus:
    desc: "Sync seed and generated fuzz corpora with FUZZCORPUS"
    cmds:
      - go run ./cmd/fuzztool/fuzztool.go -dst=$(FUZZCORPUS) -src=generated
      - go run ./cmd/fuzztool/fuzztool.go -dst=$(FUZZCORPUS) -src=seed
      - go run ./cmd/fuzztool/fuzztool.go -src=$(FUZZCORPUS) -dst=generated

  build-testcover:
    desc: "Build bin/ferretdb-testcover"
    cmds:
      - go test -c -o=bin/ferretdb-testcover -trimpath -tags=testcover -race -coverpkg=./... ./cmd/ferretdb

  run:
    desc: "Run FerretDB"
    deps:
      - build-testcover
    cmds:
      - bin/ferretdb-testcover -test.coverprofile=cover.txt -mode=diff-normal -listen-addr=:27017

  lint:
    desc: "Run linters"
    cmds:
      - bin/go-sumtype bin/golangci-lint ## Run linters
      - bin/go-sumtype ./...
      - bin/golangci-lint run --config=.golangci-required.yml
      - bin/golangci-lint run --config=.golangci.yml
      - bin/go-consistent -pedantic ./cmd/... ./internal/...




  psql:
    desc: "Run psql"
    cmds:
      - docker-compose exec postgres psql -U postgres -d ferretdb

  mongosh:
    desc: "Run mongo shell"
    cmds:
      - docker-compose exec mongodb mongosh mongodb://host.docker.internal:27017/monila?heartbeatFrequencyMS=300000 \
        --verbose --eval 'disableTelemetry()' --shell

  mongo:
    desc: "Run (legacy) mongo shell"
    cmds:
      - docker-compose exec mongodb mongo mongodb://host.docker.internal:27017/monila?heartbeatFrequencyMS=300000 \
        --verbose

  docker-init:
    cmds:
      - docker buildx create --driver=docker-container --name=ferretdb

  docker-build:
    deps:
      - build-testcover
    env:
      CGO_ENABLED: 0
      GOOS: linux
    cmds:
      - GOARCH=arm64 go test -c -o=bin/ferretdb-arm64 -trimpath -tags=testcover -coverpkg=./... ./cmd/ferretdb
      - GOARCH=amd64 go test -c -o=bin/ferretdb-amd64 -trimpath -tags=testcover -coverpkg=./... ./cmd/ferretdb
