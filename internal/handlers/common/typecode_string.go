// Code generated by "stringer -linecomment -type typeCode"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[typeCodeDouble-1]
	_ = x[typeCodeString-2]
	_ = x[typeCodeObject-3]
	_ = x[typeCodeArray-4]
	_ = x[typeCodeBinData-5]
	_ = x[typeCodeObjectID-7]
	_ = x[typeCodeBool-8]
	_ = x[typeCodeDate-9]
	_ = x[typeCodeNull-10]
	_ = x[typeCodeRegex-11]
	_ = x[typeCodeInt-16]
	_ = x[typeCodeTimestamp-17]
	_ = x[typeCodeLong-18]
	_ = x[typeCodeDecimal-19]
	_ = x[typeCodeMinKey - -1]
	_ = x[typeCodeMaxKey-127]
	_ = x[typeCodeNumber - -128]
}

const (
	_typeCode_name_0 = "number"
	_typeCode_name_1 = "minKey"
	_typeCode_name_2 = "doublestringobjectarraybinData"
	_typeCode_name_3 = "objectIdbooldatenullregex"
	_typeCode_name_4 = "inttimestamplongdecimal"
	_typeCode_name_5 = "maxKey"
)

var (
	_typeCode_index_2 = [...]uint8{0, 6, 12, 18, 23, 30}
	_typeCode_index_3 = [...]uint8{0, 8, 12, 16, 20, 25}
	_typeCode_index_4 = [...]uint8{0, 3, 12, 16, 23}
)

func (i typeCode) String() string {
	switch {
	case i == -128:
		return _typeCode_name_0
	case i == -1:
		return _typeCode_name_1
	case 1 <= i && i <= 5:
		i -= 1
		return _typeCode_name_2[_typeCode_index_2[i]:_typeCode_index_2[i+1]]
	case 7 <= i && i <= 11:
		i -= 7
		return _typeCode_name_3[_typeCode_index_3[i]:_typeCode_index_3[i+1]]
	case 16 <= i && i <= 19:
		i -= 16
		return _typeCode_name_4[_typeCode_index_4[i]:_typeCode_index_4[i+1]]
	case i == 127:
		return _typeCode_name_5
	default:
		return "typeCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
