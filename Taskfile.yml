---
version: 3

vars:
  BENCHTIME: 5s
  FUZZTIME: 15s
  FUZZCORPUS: ../fuzz-corpus

tasks:
  # invoked when `task` is run without arguments
  default:
    deps: [all]

  all:
    desc: "Generate, format, build, test and lint code and documentation"
    cmds:
      - task: gen
      - task: build-testcover
      - task: test
      - task: lint
      - task: docs

  gen-version:
    cmds:
      - go generate -x ./internal/util/version

  init-tools:
    dir: tools
    cmds:
      - go mod tidy
      - go mod verify
      - go generate -x

  init-integration:
    dir: integration
    cmds:
      - go mod tidy
      - go mod verify

  init:
    desc: "Install development tools"
    deps: [gen-version, init-tools, init-integration]
    cmds:
      - go mod tidy
      - go mod verify

  init-clean:
    desc: "Clean all caches and re-install development tools"
    cmds:
      - bin/golangci-lint cache clean
      - go clean -cache -testcache -modcache -fuzzcache
      - task: init

  env-setup:
    deps: [gen-version]
    cmds:
      - go run {{if ne OS "windows"}}-race{{end}} ./cmd/envtool/main.go

  env-up-detach:
    cmds:
      - >
        docker-compose up --always-recreate-deps --force-recreate --remove-orphans --renew-anon-volumes --detach
        postgres mongodb

  env-up:
    desc: "Start development environment"
    deps: [env-up-detach, env-setup]
    cmds:
      - docker-compose logs --follow

  env-pull:
    desc: "Pull development environment's Docker images"
    cmds:
      - docker-compose build --pull

  env-down:
    desc: "Stop development environment"
    cmds:
      - docker-compose down --remove-orphans --volumes

  gen:
    desc: "Generate (and format) code"
    cmds:
      - go generate -x ./...
      - task: fmt

  fmt:
    desc: "Format code"
    cmds:
      - bin/goimports{{exeExt}} -format-only -local=github.com/FerretDB/FerretDB -w .
      - bin/gofumpt{{exeExt}} -w .

  test:
    desc: "Run all unit and integration tests in parallel"
    deps: [test-unit, test-integration]

  test-unit-short:
    desc: "Run short unit tests"
    cmds:
      - go test -short -count=1 {{if ne OS "windows"}}-race{{end}} -shuffle=on -coverprofile=cover.txt ./...

  test-unit:
    desc: "Run all unit tests"
    cmds:
      - go test -count=1 {{if ne OS "windows"}}-race{{end}} -shuffle=on -coverprofile=cover.txt -coverpkg=./... ./...
      - go test -count=1 {{if ne OS "windows"}}-race{{end}} -shuffle=on -bench=. -benchtime=1x ./...

  test-integration:
    desc: "Run all integration tests in parallel"
    deps:
      - task: test-integration-db
        vars: {DB: "FerretDB"}
      - task: test-integration-db
        vars: {DB: "MongoDB"}

  test-integration-ferretdb:
    desc: "Run integration tests for FerretDB"
    cmds:
      - task: test-integration-db
        vars: {DB: "FerretDB"}

  test-integration-mongodb:
    desc: "Run integration tests for MongoDB"
    cmds:
      - task: test-integration-db
        vars: {DB: "MongoDB"}

  test-integration-db:
    dir: integration
    cmds:
      - go test -count=1 {{if ne OS "windows"}}-race{{end}} -shuffle=on -coverprofile=integration-{{.DB}}.txt -coverpkg=../... -port={{.DB}}

  bench-short:
    desc: "Benchmark for about 20 seconds (with default BENCHTIME)"
    cmds:
      - go test -list='Benchmark.*' ./...
      - echo 'Running four functions for {{.BENCHTIME}} each...'
      - go test -bench=BenchmarkArray    -benchtime={{.BENCHTIME}} ./internal/bson/  | tee -a new.txt
      - go test -bench=BenchmarkDocument -benchtime={{.BENCHTIME}} ./internal/bson/  | tee -a new.txt
      - go test -bench=BenchmarkArray    -benchtime={{.BENCHTIME}} ./internal/fjson/ | tee -a new.txt
      - go test -bench=BenchmarkDocument -benchtime={{.BENCHTIME}} ./internal/fjson/ | tee -a new.txt
      - bin/benchstat old.txt new.txt

  # That's not quite correct: https://github.com/golang/go/issues/15513
  # But good enough for us.
  fuzz-init:
    deps: [gen-version]
    cmds:
      - go test -count=0 ./...

  # Those commands should still run tests (i.e., should not have -run=XXX flags)
  # to fill seed corpus for fuzz tests that use WriteSeedCorpusFile (e.g., FuzzHandler).
  fuzz:
    desc: "Fuzz for about 2 minutes (with default FUZZTIME)"
    cmds:
      - go test -list='Fuzz.*' ./...
      - echo 'Running eight functions for {{.FUZZTIME}} each...'
      - go test -fuzz=FuzzArray -fuzztime={{.FUZZTIME}} ./internal/bson/
      - go test -fuzz=FuzzDocument -fuzztime={{.FUZZTIME}} ./internal/bson/
      - go test -fuzz=FuzzArray -fuzztime={{.FUZZTIME}} ./internal/fjson/
      - go test -fuzz=FuzzDocument -fuzztime={{.FUZZTIME}} ./internal/fjson/
      - go test -fuzz=FuzzMsg -fuzztime={{.FUZZTIME}} ./internal/wire/
      - go test -fuzz=FuzzQuery -fuzztime={{.FUZZTIME}} ./internal/wire/
      - go test -fuzz=FuzzReply -fuzztime={{.FUZZTIME}} ./internal/wire/
      - go test -fuzz=FuzzHandler -fuzztime={{.FUZZTIME}} ./internal/handlers/

  fuzz-corpus:
    desc: "Sync seed and generated fuzz corpora with FUZZCORPUS"
    cmds:
      - go run {{if ne OS "windows"}}-race{{end}} ./cmd/fuzztool/fuzztool.go -dst={{.FUZZCORPUS}} -src=generated
      - go run {{if ne OS "windows"}}-race{{end}} ./cmd/fuzztool/fuzztool.go -dst={{.FUZZCORPUS}} -src=seed
      - go run {{if ne OS "windows"}}-race{{end}} ./cmd/fuzztool/fuzztool.go -src={{.FUZZCORPUS}} -dst=generated

  build-testcover:
    desc: "Build bin/ferretdb-testcover"
    deps: [gen-version]
    cmds:
      - go test -c -o=bin/ferretdb-testcover -trimpath -tags=testcover,tigris {{if ne OS "windows"}}-race{{end}} -coverpkg=./... ./cmd/ferretdb

  run:
    desc: "Run FerretDB"
    deps: [build-testcover]
    cmds:
      - bin/ferretdb-testcover -test.coverprofile=cover.txt -mode=diff-normal -listen-addr=:27017

  run-proxy:
    desc: "Run FerretDB in diff-proxy mode"
    deps: [build-testcover]
    cmds:
      - bin/ferretdb-testcover -test.coverprofile=cover.txt -mode=diff-proxy -listen-addr=:27017

  lint:
    desc: "Run linters"
    deps:
      - lint-golangci-lint
      - lint-go-sumtype
      - lint-go-consistent
      - lint-go-consistent-integration
    cmds:
      - bin/golangci-lint run --config=.golangci-new.yml --new-from-rev=main

  lint-golangci-lint:
    cmds:
      - bin/golangci-lint run --config=.golangci.yml

  lint-go-sumtype:
    cmds:
      - bin/go-sumtype ./...

  lint-go-consistent:
    cmds:
      - bin/go-consistent -pedantic ./cmd/... ./internal/...

  lint-go-consistent-integration:
    dir: integration
    cmds:
      - ../bin/go-consistent -pedantic ./...

  docs:
    desc: "Format and lint documentation"
    cmds:
      - docker-compose run --rm markdownlint --fix --dot --ignore CHANGELOG.md '**/*.md'

  psql:
    desc: "Run psql"
    cmds:
      - docker-compose exec postgres psql -U postgres -d ferretdb

  mongosh:
    desc: "Run MongoDB shell (`mongosh`)"
    cmds:
      - >
        docker-compose exec mongodb mongosh mongodb://host.docker.internal:27017/test?heartbeatFrequencyMS=300000
        --verbose --eval 'disableTelemetry()' --shell

  mongo:
    desc: "Run legacy `mongo` shell"
    cmds:
      - >
        docker-compose exec mongodb mongo mongodb://host.docker.internal:27017/test?heartbeatFrequencyMS=300000
        --verbose

  docker-init:
    cmds:
      - docker buildx create --driver=docker-container --name=ferretdb

  docker-build:
    deps: [build-testcover]
    env:
      CGO_ENABLED: 0
      GOOS: linux
    cmds:
      - GOARCH=arm64 go test -c -o=bin/ferretdb-arm64 -trimpath -tags=testcover,tigris -coverpkg=./... ./cmd/ferretdb
      - GOARCH=amd64 go test -c -o=bin/ferretdb-amd64 -trimpath -tags=testcover,tigris -coverpkg=./... ./cmd/ferretdb

  docker-local:
    deps: [docker-build]
    cmds:
      - >
        docker buildx build --builder=ferretdb
        --build-arg VERSION={{.VERSION}}
        --build-arg COMMIT={{.COMMIT}}
        --tag=ferretdb-local
        --load .
    vars:
      VERSION:
        sh: cat internal/util/version/gen/version.txt
      COMMIT:
        sh: cat internal/util/version/gen/commit.txt

  docker-push:
    deps: [docker-build]
    cmds:
      - test {{.DOCKER_IMAGE}}
      - >
        docker buildx build --builder=ferretdb --platform=linux/arm64,linux/amd64
        --build-arg VERSION={{.VERSION}}
        --build-arg COMMIT={{.COMMIT}}
        --tag={{.DOCKER_IMAGE}}
        --push .
    vars:
      VERSION:
        sh: cat internal/util/version/gen/version.txt
      COMMIT:
        sh: cat internal/util/version/gen/commit.txt
