---
version: 3

vars:
  BENCHTIME: 5s
  FUZZTIME: 15s
  FUZZCORPUS: ../fuzz-corpus

tasks:
  gen-version:
    cmds:
      - go generate -x ./internal/util/version

  install-tools:
    dir: tools
    cmds:
      - go mod tidy
      - go mod verify
      - go generate -x

  init:
    desc: 'Install development tools'
    deps: [gen-version]
    cmds:
      - go mod tidy
      - task: install-tools

  env-setup:
    deps: [gen-version]
    cmds:
      - go run ./cmd/envtool/main.go

  env-up-detach:
    cmds:
      - docker-compose up --always-recreate-deps --force-recreate --remove-orphans --renew-anon-volumes --detach

  env-up:
    desc: 'Start development environment'
    deps: [env-up-detach, env-setup]
    cmds:
      - docker-compose logs --follow

  env-pull:
    cmds:
      - docker-compose pull --include-deps --quiet

  env-down:
    desc: 'Stop development environment'
    cmds:
      - docker-compose down --remove-orphans --volumes

  gen:
    desc: 'Generate code'
    cmds:
      - go generate -x ./...
      - task: fmt

  fmt:
    desc: 'Format code'
    cmds:
      - bin/gofumpt{{exeExt}} -w .

  test:
    desc: 'Run tests'
    cmds:
      - go test -race -shuffle=on -coverprofile=cover.txt -coverpkg=./... ./...
      - go test -race -shuffle=on -bench=. -benchtime=1x ./...

  bench-short:
    desc: 'Benchmark for about 20 seconds (with default BENCHTIME)'
    cmds:
      - go test -list='Benchmark.*' ./...
      - task: build:rm-bin
      - echo 'Running four functions for {{.BENCHTIME}} each...'
      - go test -bench=BenchmarkArray    -benchtime={{.BENCHTIME}} ./internal/bson/  | tee -a new.txt
      - go test -bench=BenchmarkDocument -benchtime={{.BENCHTIME}} ./internal/bson/  | tee -a new.txt
      - go test -bench=BenchmarkArray    -benchtime={{.BENCHTIME}} ./internal/fjson/ | tee -a new.txt
      - go test -bench=BenchmarkDocument -benchtime={{.BENCHTIME}} ./internal/fjson/ | tee -a new.txt
      - bin/benchstat old.txt new.txt

  # That's not quite correct: https://github.com/golang/go/issues/15513
  # But good enough for us.
  fuzz-init:
    deps: [gen-version]
    cmds:
      - go test -count=0 ./...

  # Those commands should still run tests (i.e., should not have -run=XXX flags)
  # to fill seed corpus for fuzz tests that use WriteSeedCorpusFile (e.g., FuzzHandler).
  fuzz:
    desc: 'Fuzz for about 2 minutes (with default FUZZTIME)'
    cmds:
      - go test -list='Fuzz.*' ./...
      - echo 'Running eight functions for {{.FUZZTIME}} each...'
      - go test -fuzz=FuzzArray -fuzztime={{.FUZZTIME}} ./internal/bson/
      - go test -fuzz=FuzzDocument -fuzztime={{.FUZZTIME}} ./internal/bson/
      - go test -fuzz=FuzzArray -fuzztime={{.FUZZTIME}} ./internal/fjson/
      - go test -fuzz=FuzzDocument -fuzztime={{.FUZZTIME}} ./internal/fjson/
      - go test -fuzz=FuzzMsg -fuzztime={{.FUZZTIME}} ./internal/wire/
      - go test -fuzz=FuzzQuery -fuzztime={{.FUZZTIME}} ./internal/wire/
      - go test -fuzz=FuzzReply -fuzztime={{.FUZZTIME}} ./internal/wire/
      - go test -fuzz=FuzzHandler -fuzztime={{.FUZZTIME}} ./internal/handlers/

  fuzz-corpus:
    desc: 'Sync seed and generated fuzz corpora with FUZZCORPUS'
    cmds:
      - go run ./cmd/fuzztool/fuzztool.go -dst={{.FUZZCORPUS}} -src=generated
      - go run ./cmd/fuzztool/fuzztool.go -dst={{.FUZZCORPUS}} -src=seed
      - go run ./cmd/fuzztool/fuzztool.go -src={{.FUZZCORPUS}} -dst=generated

  build-testcover:
    desc: 'Build bin/ferretdb-testcover'
    deps: [gen-version]
    cmds:
      - go test -c -o=bin/ferretdb-testcover -trimpath -tags=testcover -race -coverpkg=./... ./cmd/ferretdb

  run:
    desc: 'Run FerretDB'
    deps: [build-testcover]
    cmds:
      - bin/ferretdb-testcover -test.coverprofile=cover.txt -mode=diff-normal -listen-addr=:27017

  lint:
    desc: 'Run linters'
    cmds:
      - bin/go-sumtype ./...
      - bin/golangci-lint run --config=.golangci-required.yml
      - bin/golangci-lint run --config=.golangci.yml
      - bin/go-consistent -pedantic ./cmd/... ./internal/...
    preconditions:
      - sh: 'test -f bin/go-sumtype{{exeExt}} || test -f bin/golangci-lint{{exeExt}}'
        msg: 'Please run `task init` first'

  psql:
    desc: 'Run psql'
    cmds:
      - docker-compose exec postgres psql -U postgres -d ferretdb

  mongosh:
    desc: 'Run mongo shell'
    cmds:
      - >
        docker-compose exec mongodb mongosh mongodb://host.docker.internal:27017/monila?heartbeatFrequencyMS=300000
        --verbose --eval 'disableTelemetry()' --shell

  mongo:
    desc: 'Run (legacy) mongo shell'
    cmds:
      - >
        docker-compose exec mongodb mongo mongodb://host.docker.internal:27017/monila?heartbeatFrequencyMS=300000
        --verbose

  docker-init:
    cmds:
      - docker buildx create --driver=docker-container --name=ferretdb

  docker-build:
    deps: [build-testcover]
    env:
      CGO_ENABLED: 0
      GOOS: linux
    cmds:
      - GOARCH=arm64 go test -c -o=bin/ferretdb-arm64 -trimpath -tags=testcover -coverpkg=./... ./cmd/ferretdb
      - GOARCH=amd64 go test -c -o=bin/ferretdb-amd64 -trimpath -tags=testcover -coverpkg=./... ./cmd/ferretdb

  docker-local:
    deps: [docker-build]
    cmds:
      - >
        docker buildx build --builder=ferretdb
        --build-arg VERSION={{.VERSION}}
        --build-arg COMMIT={{.COMMIT}}
        --tag=ferretdb-local
        --load .
    vars:
      COMMIT:
        sh: cat internal/util/version/commit.txt
      VERSION:
        sh: cat internal/util/version/version.txt

  docker-push:
    deps: [docker-build]
    cmds:
      - test {{.DOCKER_IMAGE}}
      - >
        docker buildx build --builder=ferretdb --platform=linux/arm64,linux/amd64
        --build-arg VERSION={{.VERSION}}
        --build-arg COMMIT={{.COMMIT}}
        --tag={{.DOCKER_IMAGE}}
        --push .
    vars:
      COMMIT:
        sh: cat internal/util/version/commit.txt
      VERSION:
        sh: cat internal/util/version/version.txt
