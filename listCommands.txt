lawley@lawley-manjaro ~/Desktop/workspace -  $ make run
make: *** No rule to make target 'run'.  Stop.
lawley@lawley-manjaro ~/Desktop/workspace -  $ cd FerretDB/
lawley@lawley-manjaro ~/Desktop/workspace/FerretDB -  (155-List-Commands) $ make run
go generate -x ./internal/util/version
./version.sh
+ git describe --tags --dirty
go test -c -o=bin/ferretdb-testcover -trimpath -tags=testcover -race -coverpkg=./... ./cmd/ferretdb
bin/ferretdb-testcover -test.coverprofile=cover.txt -mode=diff-normal -listen-addr=:27017
2021-12-16T21:37:55.383Z	INFO	ferretdb/main.go:61	Starting FerretDB v0.0.4-34-g5f3044e
...	{"commit": "", "dirty": false}
2021-12-16T21:37:55.385Z	INFO	debug	debug/debug.go:36	Starting debug server on http://127.0.0.1:8088/
2021-12-16T21:37:55.386Z	INFO	pgconn.Pool	v4@v4.14.1/conn.go:355	Dialing PostgreSQL server	{"host": "127.0.0.1"}
2021-12-16T21:37:55.391Z	DEBUG	pgconn.Pool	pg/pool.go:122	PostgreSQL setting	{"name": "client_encoding", "setting": "UTF8"}
2021-12-16T21:37:55.393Z	DEBUG	pgconn.Pool	pg/pool.go:122	PostgreSQL setting	{"name": "lc_collate", "setting": "en_US.utf8"}
2021-12-16T21:37:55.393Z	DEBUG	pgconn.Pool	pg/pool.go:122	PostgreSQL setting	{"setting": "en_US.utf8", "name": "lc_ctype"}
2021-12-16T21:37:55.394Z	DEBUG	pgconn.Pool	pg/pool.go:122	PostgreSQL setting	{"name": "server_encoding", "setting": "UTF8"}
2021-12-16T21:37:55.395Z	INFO	pgconn.Pool	v4@v4.14.1/conn.go:355	Query	{"pid": 119, "sql": "SHOW ALL", "args": [], "time": "4.505311ms", "rowCount": 345}
2021-12-16T21:37:55.396Z	INFO	listener	clientconn/listener.go:66	Listening on :27017 ...
2021-12-16T21:38:29.657Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 clientconn/conn.go:162	Request header:
{
  "MessageLength": 384,
  "RequestID": 1,
  "ResponseTo": 0,
  "OpCode": "OP_QUERY"
}
2021-12-16T21:38:29.658Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 clientconn/conn.go:163	Request message:
{
  "Flags": [],
  "FullCollectionName": "admin.$cmd",
  "NumberToReturn": -1,
  "NumberToSkip": 0,
  "Query": {
    "$k": [
      "ismaster",
      "helloOk",
      "client",
      "compression",
      "loadBalanced"
    ],
    "ismaster": true,
    "helloOk": true,
    "client": {
      "$k": [
        "driver",
        "os",
        "platform",
        "application"
      ],
      "driver": {
        "$k": [
          "name",
          "version"
        ],
        "name": "nodejs",
        "version": "4.2.1"
      },
      "os": {
        "$k": [
          "type",
          "name",
          "architecture",
          "version"
        ],
        "type": "Linux",
        "name": "linux",
        "architecture": "x64",
        "version": "5.10.83-1-MANJARO"
      },
      "platform": "Node.js v14.18.0, LE (unified)|Node.js v14.18.0, LE (unified)",
      "application": {
        "$k": [
          "name"
        ],
        "name": "mongosh 1.1.6"
      }
    },
    "compression": [
      "none"
    ],
    "loadBalanced": false
  }
}



2021-12-16T21:38:29.659Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 clientconn/conn.go:175	Response header:
{
  "MessageLength": 205,
  "RequestID": 1,
  "ResponseTo": 1,
  "OpCode": "OP_REPLY"
}
2021-12-16T21:38:29.659Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 clientconn/conn.go:176	Response message:
{
  "CursorID": 0,
  "Documents": [
    {
      "$k": [
        "ismaster",
        "maxBsonObjectSize",
        "maxMessageSizeBytes",
        "maxWriteBatchSize",
        "localTime",
        "minWireVersion",
        "maxWireVersion",
        "readOnly",
        "ok"
      ],
      "ismaster": true,
      "maxBsonObjectSize": 16777216,
      "maxMessageSizeBytes": 48000000,
      "maxWriteBatchSize": 100000,
      "localTime": {
        "$d": 1639690709658
      },
      "minWireVersion": 13,
      "maxWireVersion": 13,
      "readOnly": false,
      "ok": {
        "$f": 1
      }
    }
  ],
  "NumberReturned": 1,
  "ResponseFlags": [],
  "StartingFrom": 0
}



2021-12-16T21:38:29.661Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 329,
  "RequestID": 154,
  "ResponseTo": 1,
  "OpCode": "OP_REPLY"
}
2021-12-16T21:38:29.663Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 clientconn/conn.go:197	Proxy message:
{
  "CursorID": 0,
  "Documents": [
    {
      "$k": [
        "helloOk",
        "ismaster",
        "topologyVersion",
        "maxBsonObjectSize",
        "maxMessageSizeBytes",
        "maxWriteBatchSize",
        "localTime",
        "logicalSessionTimeoutMinutes",
        "connectionId",
        "minWireVersion",
        "maxWireVersion",
        "readOnly",
        "ok"
      ],
      "helloOk": true,
      "ismaster": true,
      "topologyVersion": {
        "$k": [
          "processId",
          "counter"
        ],
        "processId": {
          "$o": "61bbb0c97437c3a34c46c94d"
        },
        "counter": {
          "$l": "0"
        }
      },
      "maxBsonObjectSize": 16777216,
      "maxMessageSizeBytes": 48000000,
      "maxWriteBatchSize": 100000,
      "localTime": {
        "$d": 1639690709660
      },
      "logicalSessionTimeoutMinutes": 30,
      "connectionId": 43,
      "minWireVersion": 0,
      "maxWireVersion": 13,
      "readOnly": false,
      "ok": {
        "$f": 1
      }
    }
  ],
  "NumberReturned": 1,
  "ResponseFlags": [
    "AwaitCapable"
  ],
  "StartingFrom": 0
}



2021-12-16T21:38:29.666Z	INFO	// 172.20.0.3:43484 -> 172.17.0.1:27017 clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 205,
-  "RequestID": 1,
+  "MessageLength": 329,
+  "RequestID": 154,
   "ResponseTo": 1,
@@ -11,3 +11,5 @@
       "$k": [
+        "helloOk",
         "ismaster",
+        "topologyVersion",
         "maxBsonObjectSize",
@@ -16,2 +18,4 @@
         "localTime",
+        "logicalSessionTimeoutMinutes",
+        "connectionId",
         "minWireVersion",
@@ -21,3 +25,16 @@
       ],
+      "helloOk": true,
       "ismaster": true,
+      "topologyVersion": {
+        "$k": [
+          "processId",
+          "counter"
+        ],
+        "processId": {
+          "$o": "61bbb0c97437c3a34c46c94d"
+        },
+        "counter": {
+          "$l": "0"
+        }
+      },
       "maxBsonObjectSize": 16777216,
@@ -26,5 +43,7 @@
       "localTime": {
-        "$d": 1639690709658
+        "$d": 1639690709660
       },
-      "minWireVersion": 13,
+      "logicalSessionTimeoutMinutes": 30,
+      "connectionId": 43,
+      "minWireVersion": 0,
       "maxWireVersion": 13,
@@ -37,3 +56,5 @@
   "NumberReturned": 1,
-  "ResponseFlags": [],
+  "ResponseFlags": [
+    "AwaitCapable"
+  ],
   "StartingFrom": 0




2021-12-16T21:38:29.677Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:162	Request header:
{
  "MessageLength": 384,
  "RequestID": 2,
  "ResponseTo": 0,
  "OpCode": "OP_QUERY"
}
2021-12-16T21:38:29.679Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:163	Request message:
{
  "Flags": [],
  "FullCollectionName": "admin.$cmd",
  "NumberToReturn": -1,
  "NumberToSkip": 0,
  "Query": {
    "$k": [
      "ismaster",
      "helloOk",
      "client",
      "compression",
      "loadBalanced"
    ],
    "ismaster": true,
    "helloOk": true,
    "client": {
      "$k": [
        "driver",
        "os",
        "platform",
        "application"
      ],
      "driver": {
        "$k": [
          "name",
          "version"
        ],
        "name": "nodejs",
        "version": "4.2.1"
      },
      "os": {
        "$k": [
          "type",
          "name",
          "architecture",
          "version"
        ],
        "type": "Linux",
        "name": "linux",
        "architecture": "x64",
        "version": "5.10.83-1-MANJARO"
      },
      "platform": "Node.js v14.18.0, LE (unified)|Node.js v14.18.0, LE (unified)",
      "application": {
        "$k": [
          "name"
        ],
        "name": "mongosh 1.1.6"
      }
    },
    "compression": [
      "none"
    ],
    "loadBalanced": false
  }
}



2021-12-16T21:38:29.680Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:175	Response header:
{
  "MessageLength": 205,
  "RequestID": 1,
  "ResponseTo": 2,
  "OpCode": "OP_REPLY"
}
2021-12-16T21:38:29.681Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:176	Response message:
{
  "CursorID": 0,
  "Documents": [
    {
      "$k": [
        "ismaster",
        "maxBsonObjectSize",
        "maxMessageSizeBytes",
        "maxWriteBatchSize",
        "localTime",
        "minWireVersion",
        "maxWireVersion",
        "readOnly",
        "ok"
      ],
      "ismaster": true,
      "maxBsonObjectSize": 16777216,
      "maxMessageSizeBytes": 48000000,
      "maxWriteBatchSize": 100000,
      "localTime": {
        "$d": 1639690709679
      },
      "minWireVersion": 13,
      "maxWireVersion": 13,
      "readOnly": false,
      "ok": {
        "$f": 1
      }
    }
  ],
  "NumberReturned": 1,
  "ResponseFlags": [],
  "StartingFrom": 0
}



2021-12-16T21:38:29.682Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 329,
  "RequestID": 155,
  "ResponseTo": 2,
  "OpCode": "OP_REPLY"
}
2021-12-16T21:38:29.684Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:197	Proxy message:
{
  "CursorID": 0,
  "Documents": [
    {
      "$k": [
        "helloOk",
        "ismaster",
        "topologyVersion",
        "maxBsonObjectSize",
        "maxMessageSizeBytes",
        "maxWriteBatchSize",
        "localTime",
        "logicalSessionTimeoutMinutes",
        "connectionId",
        "minWireVersion",
        "maxWireVersion",
        "readOnly",
        "ok"
      ],
      "helloOk": true,
      "ismaster": true,
      "topologyVersion": {
        "$k": [
          "processId",
          "counter"
        ],
        "processId": {
          "$o": "61bbb0c97437c3a34c46c94d"
        },
        "counter": {
          "$l": "0"
        }
      },
      "maxBsonObjectSize": 16777216,
      "maxMessageSizeBytes": 48000000,
      "maxWriteBatchSize": 100000,
      "localTime": {
        "$d": 1639690709682
      },
      "logicalSessionTimeoutMinutes": 30,
      "connectionId": 44,
      "minWireVersion": 0,
      "maxWireVersion": 13,
      "readOnly": false,
      "ok": {
        "$f": 1
      }
    }
  ],
  "NumberReturned": 1,
  "ResponseFlags": [
    "AwaitCapable"
  ],
  "StartingFrom": 0
}



2021-12-16T21:38:29.687Z	INFO	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 205,
-  "RequestID": 1,
+  "MessageLength": 329,
+  "RequestID": 155,
   "ResponseTo": 2,
@@ -11,3 +11,5 @@
       "$k": [
+        "helloOk",
         "ismaster",
+        "topologyVersion",
         "maxBsonObjectSize",
@@ -16,2 +18,4 @@
         "localTime",
+        "logicalSessionTimeoutMinutes",
+        "connectionId",
         "minWireVersion",
@@ -21,3 +25,16 @@
       ],
+      "helloOk": true,
       "ismaster": true,
+      "topologyVersion": {
+        "$k": [
+          "processId",
+          "counter"
+        ],
+        "processId": {
+          "$o": "61bbb0c97437c3a34c46c94d"
+        },
+        "counter": {
+          "$l": "0"
+        }
+      },
       "maxBsonObjectSize": 16777216,
@@ -26,5 +43,7 @@
       "localTime": {
-        "$d": 1639690709679
+        "$d": 1639690709682
       },
-      "minWireVersion": 13,
+      "logicalSessionTimeoutMinutes": 30,
+      "connectionId": 44,
+      "minWireVersion": 0,
       "maxWireVersion": 13,
@@ -37,3 +56,5 @@
   "NumberReturned": 1,
-  "ResponseFlags": [],
+  "ResponseFlags": [
+    "AwaitCapable"
+  ],
   "StartingFrom": 0




2021-12-16T21:38:29.689Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:162	Request header:
{
  "MessageLength": 56,
  "RequestID": 3,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.689Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "buildInfo",
          "$db"
        ],
        "buildInfo": 1,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.690Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:175	Response header:
{
  "MessageLength": 128,
  "RequestID": 2,
  "ResponseTo": 3,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.691Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "version",
          "versionArray",
          "maxBsonObjectSize",
          "ok"
        ],
        "version": "5.0.42",
        "versionArray": [
          5,
          0,
          42,
          0
        ],
        "maxBsonObjectSize": 16777216,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.692Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 1918,
  "RequestID": 156,
  "ResponseTo": 3,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.693Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "version",
          "gitVersion",
          "modules",
          "allocator",
          "javascriptEngine",
          "sysInfo",
          "versionArray",
          "openssl",
          "buildEnvironment",
          "bits",
          "debug",
          "maxBsonObjectSize",
          "storageEngines",
          "ok"
        ],
        "version": "5.0.5",
        "gitVersion": "d65fd89df3fc039b5c55933c0f71d647a54510ae",
        "modules": [],
        "allocator": "tcmalloc",
        "javascriptEngine": "mozjs",
        "sysInfo": "deprecated",
        "versionArray": [
          5,
          0,
          5,
          0
        ],
        "openssl": {
          "$k": [
            "running",
            "compiled"
          ],
          "running": "OpenSSL 1.1.1f  31 Mar 2020",
          "compiled": "OpenSSL 1.1.1f  31 Mar 2020"
        },
        "buildEnvironment": {
          "$k": [
            "distmod",
            "distarch",
            "cc",
            "ccflags",
            "cxx",
            "cxxflags",
            "linkflags",
            "target_arch",
            "target_os",
            "cppdefines"
          ],
          "distmod": "ubuntu2004",
          "distarch": "x86_64",
          "cc": "/opt/mongodbtoolchain/v3/bin/gcc: gcc (GCC) 8.5.0",
          "ccflags": "-Werror -include mongo/platform/basic.h -fasynchronous-unwind-tables -ggdb -Wall -Wsign-compare -Wno-unknown-pragmas -Winvalid-pch -fno-omit-frame-pointer -fno-strict-aliasing -O2 -march=sandybridge -mtune=generic -mprefer-vector-width=128 -Wno-unused-local-typedefs -Wno-unused-function -Wno-deprecated-declarations -Wno-unused-const-variable -Wno-unused-but-set-variable -Wno-missing-braces -fstack-protector-strong -Wa,--nocompress-debug-sections -fno-builtin-memcmp",
          "cxx": "/opt/mongodbtoolchain/v3/bin/g++: g++ (GCC) 8.5.0",
          "cxxflags": "-Woverloaded-virtual -Wno-maybe-uninitialized -fsized-deallocation -std=c++17",
          "linkflags": "-Wl,--fatal-warnings -pthread -Wl,-z,now -fuse-ld=gold -fstack-protector-strong -Wl,--no-threads -Wl,--build-id -Wl,--hash-style=gnu -Wl,-z,noexecstack -Wl,--warn-execstack -Wl,-z,relro -Wl,--compress-debug-sections=none -Wl,-z,origin -Wl,--enable-new-dtags",
          "target_arch": "x86_64",
          "target_os": "linux",
          "cppdefines": "SAFEINT_USE_INTRINSICS 0 PCRE_STATIC NDEBUG _XOPEN_SOURCE 700 _GNU_SOURCE _FORTIFY_SOURCE 2 BOOST_THREAD_VERSION 5 BOOST_THREAD_USES_DATETIME BOOST_SYSTEM_NO_DEPRECATED BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS BOOST_ENABLE_ASSERT_DEBUG_HANDLER BOOST_LOG_NO_SHORTHAND_NAMES BOOST_LOG_USE_NATIVE_SYSLOG BOOST_LOG_WITHOUT_THREAD_ATTR ABSL_FORCE_ALIGNED_ACCESS"
        },
        "bits": 64,
        "debug": false,
        "maxBsonObjectSize": 16777216,
        "storageEngines": [
          "devnull",
          "ephemeralForTest",
          "wiredTiger"
        ],
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.695Z	INFO	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 128,
-  "RequestID": 2,
+  "MessageLength": 1918,
+  "RequestID": 156,
   "ResponseTo": 3,
@@ -14,7 +14,22 @@
           "version",
+          "gitVersion",
+          "modules",
+          "allocator",
+          "javascriptEngine",
+          "sysInfo",
           "versionArray",
+          "openssl",
+          "buildEnvironment",
+          "bits",
+          "debug",
           "maxBsonObjectSize",
+          "storageEngines",
           "ok"
         ],
-        "version": "5.0.42",
+        "version": "5.0.5",
+        "gitVersion": "d65fd89df3fc039b5c55933c0f71d647a54510ae",
+        "modules": [],
+        "allocator": "tcmalloc",
+        "javascriptEngine": "mozjs",
+        "sysInfo": "deprecated",
         "versionArray": [
@@ -22,6 +37,45 @@
           0,
-          42,
+          5,
           0
         ],
+        "openssl": {
+          "$k": [
+            "running",
+            "compiled"
+          ],
+          "running": "OpenSSL 1.1.1f  31 Mar 2020",
+          "compiled": "OpenSSL 1.1.1f  31 Mar 2020"
+        },
+        "buildEnvironment": {
+          "$k": [
+            "distmod",
+            "distarch",
+            "cc",
+            "ccflags",
+            "cxx",
+            "cxxflags",
+            "linkflags",
+            "target_arch",
+            "target_os",
+            "cppdefines"
+          ],
+          "distmod": "ubuntu2004",
+          "distarch": "x86_64",
+          "cc": "/opt/mongodbtoolchain/v3/bin/gcc: gcc (GCC) 8.5.0",
+          "ccflags": "-Werror -include mongo/platform/basic.h -fasynchronous-unwind-tables -ggdb -Wall -Wsign-compare -Wno-unknown-pragmas -Winvalid-pch -fno-omit-frame-pointer -fno-strict-aliasing -O2 -march=sandybridge -mtune=generic -mprefer-vector-width=128 -Wno-unused-local-typedefs -Wno-unused-function -Wno-deprecated-declarations -Wno-unused-const-variable -Wno-unused-but-set-variable -Wno-missing-braces -fstack-protector-strong -Wa,--nocompress-debug-sections -fno-builtin-memcmp",
+          "cxx": "/opt/mongodbtoolchain/v3/bin/g++: g++ (GCC) 8.5.0",
+          "cxxflags": "-Woverloaded-virtual -Wno-maybe-uninitialized -fsized-deallocation -std=c++17",
+          "linkflags": "-Wl,--fatal-warnings -pthread -Wl,-z,now -fuse-ld=gold -fstack-protector-strong -Wl,--no-threads -Wl,--build-id -Wl,--hash-style=gnu -Wl,-z,noexecstack -Wl,--warn-execstack -Wl,-z,relro -Wl,--compress-debug-sections=none -Wl,-z,origin -Wl,--enable-new-dtags",
+          "target_arch": "x86_64",
+          "target_os": "linux",
+          "cppdefines": "SAFEINT_USE_INTRINSICS 0 PCRE_STATIC NDEBUG _XOPEN_SOURCE 700 _GNU_SOURCE _FORTIFY_SOURCE 2 BOOST_THREAD_VERSION 5 BOOST_THREAD_USES_DATETIME BOOST_SYSTEM_NO_DEPRECATED BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS BOOST_ENABLE_ASSERT_DEBUG_HANDLER BOOST_LOG_NO_SHORTHAND_NAMES BOOST_LOG_USE_NATIVE_SYSLOG BOOST_LOG_WITHOUT_THREAD_ATTR ABSL_FORCE_ALIGNED_ACCESS"
+        },
+        "bits": 64,
+        "debug": false,
         "maxBsonObjectSize": 16777216,
+        "storageEngines": [
+          "devnull",
+          "ephemeralForTest",
+          "wiredTiger"
+        ],
         "ok": {




2021-12-16T21:38:29.697Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:162	Request header:
{
  "MessageLength": 61,
  "RequestID": 4,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.698Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "getCmdLineOpts",
          "$db"
        ],
        "getCmdLineOpts": 1,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.698Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:175	Response header:
{
  "MessageLength": 78,
  "RequestID": 3,
  "ResponseTo": 4,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.698Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "argv",
          "parsed",
          "ok"
        ],
        "argv": [
          "ferretdb"
        ],
        "parsed": {
          "$k": []
        },
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.699Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 121,
  "RequestID": 157,
  "ResponseTo": 4,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.699Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "argv",
          "parsed",
          "ok"
        ],
        "argv": [
          "mongod",
          "--bind_ip_all"
        ],
        "parsed": {
          "$k": [
            "net"
          ],
          "net": {
            "$k": [
              "bindIp"
            ],
            "bindIp": "*"
          }
        },
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.700Z	INFO	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 78,
-  "RequestID": 3,
+  "MessageLength": 121,
+  "RequestID": 157,
   "ResponseTo": 4,
@@ -18,6 +18,15 @@
         "argv": [
-          "ferretdb"
+          "mongod",
+          "--bind_ip_all"
         ],
         "parsed": {
-          "$k": []
+          "$k": [
+            "net"
+          ],
+          "net": {
+            "$k": [
+              "bindIp"
+            ],
+            "bindIp": "*"
+          }
         },




2021-12-16T21:38:29.700Z	DEBUG	// 172.20.0.3:43496 -> 172.17.0.1:27017 clientconn/conn.go:162	Request header:
{
  "MessageLength": 384,
  "RequestID": 5,
  "ResponseTo": 0,
  "OpCode": "OP_QUERY"
}
2021-12-16T21:38:29.702Z	DEBUG	// 172.20.0.3:43496 -> 172.17.0.1:27017 clientconn/conn.go:163	Request message:
{
  "Flags": [],
  "FullCollectionName": "admin.$cmd",
  "NumberToReturn": -1,
  "NumberToSkip": 0,
  "Query": {
    "$k": [
      "ismaster",
      "helloOk",
      "client",
      "compression",
      "loadBalanced"
    ],
    "ismaster": true,
    "helloOk": true,
    "client": {
      "$k": [
        "driver",
        "os",
        "platform",
        "application"
      ],
      "driver": {
        "$k": [
          "name",
          "version"
        ],
        "name": "nodejs",
        "version": "4.2.1"
      },
      "os": {
        "$k": [
          "type",
          "name",
          "architecture",
          "version"
        ],
        "type": "Linux",
        "name": "linux",
        "architecture": "x64",
        "version": "5.10.83-1-MANJARO"
      },
      "platform": "Node.js v14.18.0, LE (unified)|Node.js v14.18.0, LE (unified)",
      "application": {
        "$k": [
          "name"
        ],
        "name": "mongosh 1.1.6"
      }
    },
    "compression": [
      "none"
    ],
    "loadBalanced": false
  }
}



2021-12-16T21:38:29.703Z	DEBUG	// 172.20.0.3:43496 -> 172.17.0.1:27017 clientconn/conn.go:175	Response header:
{
  "MessageLength": 205,
  "RequestID": 1,
  "ResponseTo": 5,
  "OpCode": "OP_REPLY"
}
2021-12-16T21:38:29.704Z	DEBUG	// 172.20.0.3:43496 -> 172.17.0.1:27017 clientconn/conn.go:176	Response message:
{
  "CursorID": 0,
  "Documents": [
    {
      "$k": [
        "ismaster",
        "maxBsonObjectSize",
        "maxMessageSizeBytes",
        "maxWriteBatchSize",
        "localTime",
        "minWireVersion",
        "maxWireVersion",
        "readOnly",
        "ok"
      ],
      "ismaster": true,
      "maxBsonObjectSize": 16777216,
      "maxMessageSizeBytes": 48000000,
      "maxWriteBatchSize": 100000,
      "localTime": {
        "$d": 1639690709702
      },
      "minWireVersion": 13,
      "maxWireVersion": 13,
      "readOnly": false,
      "ok": {
        "$f": 1
      }
    }
  ],
  "NumberReturned": 1,
  "ResponseFlags": [],
  "StartingFrom": 0
}



2021-12-16T21:38:29.705Z	DEBUG	// 172.20.0.3:43496 -> 172.17.0.1:27017 clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 329,
  "RequestID": 158,
  "ResponseTo": 5,
  "OpCode": "OP_REPLY"
}
2021-12-16T21:38:29.707Z	DEBUG	// 172.20.0.3:43496 -> 172.17.0.1:27017 clientconn/conn.go:197	Proxy message:
{
  "CursorID": 0,
  "Documents": [
    {
      "$k": [
        "helloOk",
        "ismaster",
        "topologyVersion",
        "maxBsonObjectSize",
        "maxMessageSizeBytes",
        "maxWriteBatchSize",
        "localTime",
        "logicalSessionTimeoutMinutes",
        "connectionId",
        "minWireVersion",
        "maxWireVersion",
        "readOnly",
        "ok"
      ],
      "helloOk": true,
      "ismaster": true,
      "topologyVersion": {
        "$k": [
          "processId",
          "counter"
        ],
        "processId": {
          "$o": "61bbb0c97437c3a34c46c94d"
        },
        "counter": {
          "$l": "0"
        }
      },
      "maxBsonObjectSize": 16777216,
      "maxMessageSizeBytes": 48000000,
      "maxWriteBatchSize": 100000,
      "localTime": {
        "$d": 1639690709705
      },
      "logicalSessionTimeoutMinutes": 30,
      "connectionId": 45,
      "minWireVersion": 0,
      "maxWireVersion": 13,
      "readOnly": false,
      "ok": {
        "$f": 1
      }
    }
  ],
  "NumberReturned": 1,
  "ResponseFlags": [
    "AwaitCapable"
  ],
  "StartingFrom": 0
}



2021-12-16T21:38:29.711Z	INFO	// 172.20.0.3:43496 -> 172.17.0.1:27017 clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 205,
-  "RequestID": 1,
+  "MessageLength": 329,
+  "RequestID": 158,
   "ResponseTo": 5,
@@ -11,3 +11,5 @@
       "$k": [
+        "helloOk",
         "ismaster",
+        "topologyVersion",
         "maxBsonObjectSize",
@@ -16,2 +18,4 @@
         "localTime",
+        "logicalSessionTimeoutMinutes",
+        "connectionId",
         "minWireVersion",
@@ -21,3 +25,16 @@
       ],
+      "helloOk": true,
       "ismaster": true,
+      "topologyVersion": {
+        "$k": [
+          "processId",
+          "counter"
+        ],
+        "processId": {
+          "$o": "61bbb0c97437c3a34c46c94d"
+        },
+        "counter": {
+          "$l": "0"
+        }
+      },
       "maxBsonObjectSize": 16777216,
@@ -26,5 +43,7 @@
       "localTime": {
-        "$d": 1639690709702
+        "$d": 1639690709705
       },
-      "minWireVersion": 13,
+      "logicalSessionTimeoutMinutes": 30,
+      "connectionId": 45,
+      "minWireVersion": 0,
       "maxWireVersion": 13,
@@ -37,3 +56,5 @@
   "NumberReturned": 1,
-  "ResponseFlags": [],
+  "ResponseFlags": [
+    "AwaitCapable"
+  ],
   "StartingFrom": 0




2021-12-16T21:38:29.713Z	DEBUG	// 172.20.0.3:43496 -> 172.17.0.1:27017 clientconn/conn.go:162	Request header:
{
  "MessageLength": 59,
  "RequestID": 6,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.713Z	DEBUG	// 172.20.0.3:43496 -> 172.17.0.1:27017 clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "atlasVersion",
          "$db"
        ],
        "atlasVersion": 1,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.713Z	DEBUG	// 172.20.0.3:43496 -> 172.17.0.1:27017 clientconn/conn.go:175	Response header:
{
  "MessageLength": 122,
  "RequestID": 2,
  "ResponseTo": 6,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.714Z	DEBUG	// 172.20.0.3:43496 -> 172.17.0.1:27017 clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ok",
          "errmsg",
          "code",
          "codeName"
        ],
        "ok": {
          "$f": 0
        },
        "errmsg": "no such command: 'atlasversion'",
        "code": 59,
        "codeName": "CommandNotFound"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.714Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:162	Request header:
{
  "MessageLength": 92,
  "RequestID": 7,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.716Z	DEBUG	// 172.20.0.3:43496 -> 172.17.0.1:27017 clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 122,
  "RequestID": 159,
  "ResponseTo": 6,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.717Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "getParameter",
          "featureCompatibilityVersion",
          "$db"
        ],
        "getParameter": 1,
        "featureCompatibilityVersion": 1,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.718Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:175	Response header:
{
  "MessageLength": 58,
  "RequestID": 4,
  "ResponseTo": 7,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.718Z	DEBUG	// 172.20.0.3:43496 -> 172.17.0.1:27017 clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ok",
          "errmsg",
          "code",
          "codeName"
        ],
        "ok": {
          "$f": 0
        },
        "errmsg": "no such command: 'atlasVersion'",
        "code": 59,
        "codeName": "CommandNotFound"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.718Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "version",
          "ok"
        ],
        "version": "5.0.42",
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.719Z	INFO	// 172.20.0.3:43496 -> 172.17.0.1:27017 clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -2,3 +2,3 @@
   "MessageLength": 122,
-  "RequestID": 2,
+  "RequestID": 159,
   "ResponseTo": 6,
@@ -21,3 +21,3 @@
         },
-        "errmsg": "no such command: 'atlasversion'",
+        "errmsg": "no such command: 'atlasVersion'",
         "code": 59,




2021-12-16T21:38:29.719Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 89,
  "RequestID": 160,
  "ResponseTo": 7,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.719Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "featureCompatibilityVersion",
          "ok"
        ],
        "featureCompatibilityVersion": {
          "$k": [
            "version"
          ],
          "version": "5.0"
        },
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.720Z	INFO	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 58,
-  "RequestID": 4,
+  "MessageLength": 89,
+  "RequestID": 160,
   "ResponseTo": 7,
@@ -13,6 +13,11 @@
         "$k": [
-          "version",
+          "featureCompatibilityVersion",
           "ok"
         ],
-        "version": "5.0.42",
+        "featureCompatibilityVersion": {
+          "$k": [
+            "version"
+          ],
+          "version": "5.0"
+        },
         "ok": {




2021-12-16T21:38:29.727Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:162	Request header:
{
  "MessageLength": 69,
  "RequestID": 8,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.728Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "getLog",
          "$db"
        ],
        "getLog": "startupWarnings",
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.729Z	INFO	pgconn.Pool	v4@v4.14.1/conn.go:355	Query	{"sql": "SHOW server_version", "args": [], "time": "791.585µs", "rowCount": 1, "pid": 119}
2021-12-16T21:38:29.729Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:175	Response header:
{
  "MessageLength": 481,
  "RequestID": 5,
  "ResponseTo": 8,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.730Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "totalLinesWritten",
          "log",
          "ok"
        ],
        "totalLinesWritten": 2,
        "log": [
          "{\"c\":\"STORAGE\",\"ctx\":\"initandlisten\",\"id\":42000,\"msg\":\"Powered by 🥭 FerretDB v0.0.4-34-g5f3044e\\n and PostgreSQL 14.1.\",\"s\":\"I\",\"t\":{\"$date\":\"2021-12-16T21:38:29.729Z\"},\"tags\":[\"startupWarnings\"]}",
          "{\"c\":\"STORAGE\",\"ctx\":\"initandlisten\",\"id\":42000,\"msg\":\"Please star us on GitHub: https://github.com/FerretDB/FerretDB\",\"s\":\"I\",\"t\":{\"$date\":\"2021-12-16T21:38:29.729Z\"},\"tags\":[\"startupWarnings\"]}"
        ],
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.731Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 628,
  "RequestID": 161,
  "ResponseTo": 8,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:29.732Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "totalLinesWritten",
          "log",
          "ok"
        ],
        "totalLinesWritten": 2,
        "log": [
          "{\"t\":{\"$date\":\"2021-12-17T03:19:01.763+05:45\"},\"s\":\"I\",  \"c\":\"STORAGE\",  \"id\":22297,   \"ctx\":\"initandlisten\",\"msg\":\"Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem\",\"tags\":[\"startupWarnings\"]}",
          "{\"t\":{\"$date\":\"2021-12-17T03:19:02.642+05:45\"},\"s\":\"W\",  \"c\":\"CONTROL\",  \"id\":22120,   \"ctx\":\"initandlisten\",\"msg\":\"Access control is not enabled for the database. Read and write access to data and configuration is unrestricted\",\"tags\":[\"startupWarnings\"]}"
        ],
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:29.733Z	INFO	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 481,
-  "RequestID": 5,
+  "MessageLength": 628,
+  "RequestID": 161,
   "ResponseTo": 8,
@@ -19,4 +19,4 @@
         "log": [
-          "{\"c\":\"STORAGE\",\"ctx\":\"initandlisten\",\"id\":42000,\"msg\":\"Powered by 🥭 FerretDB v0.0.4-34-g5f3044e\\n and PostgreSQL 14.1.\",\"s\":\"I\",\"t\":{\"$date\":\"2021-12-16T21:38:29.729Z\"},\"tags\":[\"startupWarnings\"]}",
-          "{\"c\":\"STORAGE\",\"ctx\":\"initandlisten\",\"id\":42000,\"msg\":\"Please star us on GitHub: https://github.com/FerretDB/FerretDB\",\"s\":\"I\",\"t\":{\"$date\":\"2021-12-16T21:38:29.729Z\"},\"tags\":[\"startupWarnings\"]}"
+          "{\"t\":{\"$date\":\"2021-12-17T03:19:01.763+05:45\"},\"s\":\"I\",  \"c\":\"STORAGE\",  \"id\":22297,   \"ctx\":\"initandlisten\",\"msg\":\"Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem\",\"tags\":[\"startupWarnings\"]}",
+          "{\"t\":{\"$date\":\"2021-12-17T03:19:02.642+05:45\"},\"s\":\"W\",  \"c\":\"CONTROL\",  \"id\":22120,   \"ctx\":\"initandlisten\",\"msg\":\"Access control is not enabled for the database. Read and write access to data and configuration is unrestricted\",\"tags\":[\"startupWarnings\"]}"
         ],




2021-12-16T21:38:36.212Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:162	Request header:
{
  "MessageLength": 60,
  "RequestID": 9,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:36.213Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "listCommands",
          "$db"
        ],
        "listCommands": 1,
        "$db": "monila"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:36.214Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:175	Response header:
{
  "MessageLength": 78,
  "RequestID": 6,
  "ResponseTo": 9,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:36.214Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "argv",
          "parsed",
          "ok"
        ],
        "argv": [
          "ferretdb"
        ],
        "parsed": {
          "$k": []
        },
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:36.274Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 71060,
  "RequestID": 162,
  "ResponseTo": 9,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:36.396Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "commands",
          "ok"
        ],
        "commands": {
          "$k": [
            "_addShard",
            "_cloneCollectionOptionsFromPrimaryShard",
            "_configsvrAbortReshardCollection",
            "_configsvrAddShard",
            "_configsvrAddShardToZone",
            "_configsvrBalancerCollectionStatus",
            "_configsvrBalancerStart",
            "_configsvrBalancerStatus",
            "_configsvrBalancerStop",
            "_configsvrCleanupReshardCollection",
            "_configsvrClearJumboFlag",
            "_configsvrCommitChunkMerge",
            "_configsvrCommitChunkMigration",
            "_configsvrCommitChunkSplit",
            "_configsvrCommitChunksMerge",
            "_configsvrCommitMovePrimary",
            "_configsvrCommitReshardCollection",
            "_configsvrCreateDatabase",
            "_configsvrDropCollection",
            "_configsvrDropDatabase",
            "_configsvrEnableSharding",
            "_configsvrEnsureChunkVersionIsGreaterThan",
            "_configsvrMoveChunk",
            "_configsvrMovePrimary",
            "_configsvrRefineCollectionShardKey",
            "_configsvrRemoveChunks",
            "_configsvrRemoveShard",
            "_configsvrRemoveShardFromZone",
            "_configsvrRemoveTags",
            "_configsvrRenameCollectionMetadata",
            "_configsvrReshardCollection",
            "_configsvrSetAllowMigrations",
            "_configsvrShardCollection",
            "_configsvrUpdateZoneKeyRange",
            "_flushDatabaseCacheUpdates",
            "_flushDatabaseCacheUpdatesWithWriteConcern",
            "_flushReshardingStateChange",
            "_flushRoutingTableCacheUpdates",
            "_flushRoutingTableCacheUpdatesWithWriteConcern",
            "_getNextSessionMods",
            "_getUserCacheGeneration",
            "_isSelf",
            "_killOperations",
            "_mergeAuthzCollections",
            "_migrateClone",
            "_recvChunkAbort",
            "_recvChunkCommit",
            "_recvChunkStart",
            "_recvChunkStatus",
            "_shardsvrAbortReshardCollection",
            "_shardsvrCleanupReshardCollection",
            "_shardsvrCloneCatalogData",
            "_shardsvrCommitReshardCollection",
            "_shardsvrCreateCollection",
            "_shardsvrCreateCollectionParticipant",
            "_shardsvrDropCollection",
            "_shardsvrDropCollectionIfUUIDNotMatching",
            "_shardsvrDropCollectionParticipant",
            "_shardsvrDropDatabase",
            "_shardsvrDropDatabaseParticipant",
            "_shardsvrMovePrimary",
            "_shardsvrRefineCollectionShardKey",
            "_shardsvrRenameCollection",
            "_shardsvrRenameCollectionParticipant",
            "_shardsvrRenameCollectionParticipantUnblock",
            "_shardsvrReshardCollection",
            "_shardsvrReshardingOperationTime",
            "_shardsvrShardCollection",
            "_transferMods",
            "abortTransaction",
            "aggregate",
            "appendOplogNote",
            "applyOps",
            "authenticate",
            "autoSplitVector",
            "availableQueryOptions",
            "buildInfo",
            "checkShardingIndex",
            "cleanupOrphaned",
            "cloneCollectionAsCapped",
            "collMod",
            "collStats",
            "commitTransaction",
            "compact",
            "connPoolStats",
            "connPoolSync",
            "connectionStatus",
            "convertToCapped",
            "coordinateCommitTransaction",
            "count",
            "create",
            "createIndexes",
            "createRole",
            "createUser",
            "currentOp",
            "dataSize",
            "dbHash",
            "dbStats",
            "delete",
            "distinct",
            "donorAbortMigration",
            "donorForgetMigration",
            "donorStartMigration",
            "driverOIDTest",
            "drop",
            "dropAllRolesFromDatabase",
            "dropAllUsersFromDatabase",
            "dropConnections",
            "dropDatabase",
            "dropIndexes",
            "dropRole",
            "dropUser",
            "endSessions",
            "explain",
            "features",
            "filemd5",
            "find",
            "findAndModify",
            "flushRouterConfig",
            "fsync",
            "fsyncUnlock",
            "getCmdLineOpts",
            "getDatabaseVersion",
            "getDefaultRWConcern",
            "getDiagnosticData",
            "getFreeMonitoringStatus",
            "getLastError",
            "getLog",
            "getMore",
            "getParameter",
            "getShardMap",
            "getShardVersion",
            "getnonce",
            "grantPrivilegesToRole",
            "grantRolesToRole",
            "grantRolesToUser",
            "hello",
            "hostInfo",
            "insert",
            "internalRenameIfOptionsAndIndexesMatch",
            "invalidateUserCache",
            "isMaster",
            "killAllSessions",
            "killAllSessionsByPattern",
            "killCursors",
            "killOp",
            "killSessions",
            "listCollections",
            "listCommands",
            "listDatabases",
            "listIndexes",
            "lockInfo",
            "logRotate",
            "logout",
            "mapReduce",
            "mergeChunks",
            "moveChunk",
            "ping",
            "planCacheClear",
            "planCacheClearFilters",
            "planCacheListFilters",
            "planCacheSetFilter",
            "prepareTransaction",
            "profile",
            "reIndex",
            "recipientForgetMigration",
            "recipientSyncData",
            "refreshSessions",
            "renameCollection",
            "repairDatabase",
            "replSetAbortPrimaryCatchUp",
            "replSetFreeze",
            "replSetGetConfig",
            "replSetGetRBID",
            "replSetGetStatus",
            "replSetHeartbeat",
            "replSetInitiate",
            "replSetMaintenance",
            "replSetReconfig",
            "replSetRequestVotes",
            "replSetResizeOplog",
            "replSetStepDown",
            "replSetStepUp",
            "replSetSyncFrom",
            "replSetUpdatePosition",
            "revokePrivilegesFromRole",
            "revokeRolesFromRole",
            "revokeRolesFromUser",
            "rolesInfo",
            "rotateCertificates",
            "saslContinue",
            "saslStart",
            "serverStatus",
            "setDefaultRWConcern",
            "setFeatureCompatibilityVersion",
            "setFreeMonitoring",
            "setIndexCommitQuorum",
            "setParameter",
            "setShardVersion",
            "shardingState",
            "shutdown",
            "splitChunk",
            "splitVector",
            "startRecordingTraffic",
            "startSession",
            "stopRecordingTraffic",
            "top",
            "update",
            "updateRole",
            "updateUser",
            "usersInfo",
            "validate",
            "validateDBMetadata",
            "voteCommitIndexBuild",
            "waitForFailPoint",
            "whatsmyuri"
          ],
          "_addShard": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by shards. Do not call directly. Adds a new shard to a cluster.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_cloneCollectionOptionsFromPrimaryShard": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, do not call directly. Creates a collection on a shard with UUID existing on primary.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrAbortReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Aborts any in-progress resharding operations for this collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrAddShard": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and adds a new shard to the cluster.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrAddShardToZone": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and adds a new zone to the shard.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrBalancerCollectionStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Checks whether the chunks of a given collection are in a quiesced state or there are any which need to be moved because of (1) draining shards, (2) zone violation or (3) imbalance between shards.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrBalancerStart": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrBalancerStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrBalancerStop": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCleanupReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Aborts and cleans up any in-progress resharding operations for this collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrClearJumboFlag": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Clears the jumbo flag of the chunk specified.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitChunkMerge": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a MergeChunkRequest",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitChunkMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitChunkSplit": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a SplitChunkRequest.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitChunksMerge": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a MergeChunksRequest",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitMovePrimary": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Allows a reshard operation to enter critical section ASAP.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCreateDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Create a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrDropCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Drops a collection from a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrDropDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Drops a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrEnableSharding": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Enable sharding on a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrEnsureChunkVersionIsGreaterThan": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrMoveChunk": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Requests the balancer to move or rebalance a single chunk.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrMovePrimary": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Reassigns the primary shard of a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRefineCollectionShardKey": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Adds a suffix to the shard key of an existing collection ('refines the shard key').",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRemoveChunks": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes the chunks for the specified collectionUUID.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRemoveShard": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes a shard from the cluster.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRemoveShardFromZone": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and removes the shard from the zone.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRemoveTags": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes the zone tags for the specified ns.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRenameCollectionMetadata": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Renames a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Reshards a collection on a new shard key.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrSetAllowMigrations": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Sets the allowMigrations flag on the specified collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrShardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Shards a collection. Requires key. Optional unique. Sharding must already be enabled for the database",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrUpdateZoneKeyRange": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and assigns a new range to a zone.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushDatabaseCacheUpdates": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command which waits for any pending routing table cache updates for a particular database to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushDatabaseCacheUpdatesWithWriteConcern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command which waits for any pending routing table cache updates for a particular database to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushReshardingStateChange": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command used by the resharding coordinator to flush state changes to the participant shards while the critical section is active.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushRoutingTableCacheUpdates": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command which waits for any pending routing table cache updates for a particular namespace to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushRoutingTableCacheUpdatesWithWriteConcern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command which waits for any pending routing table cache updates for a particular namespace to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_getNextSessionMods": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_getUserCacheGeneration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_isSelf": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ _isSelf : 1 } INTERNAL ONLY",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_killOperations": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command -- Kill operations on the target server by OperationKey.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_mergeAuthzCollections": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_migrateClone": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_recvChunkAbort": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_recvChunkCommit": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_recvChunkStart": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_recvChunkStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrAbortReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the shard server. Do not call directly. Aborts any in-progress resharding operations.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCleanupReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the shard server. Do not call directly. Aborts and cleans up any in-progress resharding operations for this collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCloneCatalogData": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCommitReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the shard server. Do not call directly. Commits an in-progress resharding operations",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCreateCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Creates a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCreateCollectionParticipant": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Creates a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Drops a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropCollectionIfUUIDNotMatching": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command aimed to remove stale entries from the local collection catalog.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropCollectionParticipant": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by secondary sharding servers. Do not call directly. Participates in droping a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Drops a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropDatabaseParticipant": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by secondary sharding servers. Do not call directly. Participates in droping a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrMovePrimary": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrRefineCollectionShardKey": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Refines Collection shard key.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrRenameCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Renames a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrRenameCollectionParticipant": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Locally renames a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrRenameCollectionParticipantUnblock": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Releases the critical section of source and target collections.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Reshards a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrReshardingOperationTime": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command used by the resharding coordinator to query the elapsed and remaining time for the active resharding operation on participant shards.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrShardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_transferMods": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "abortTransaction": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Aborts a transaction",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "aggregate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Runs the aggregation command. See http://dochub.mongodb.org/core/aggregation for more details.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "appendOplogNote": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Adds a no-op entry to the oplog",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "applyOps": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal (sharding)\n{ applyOps : [ ] , preCondition : [ { ns : ... , q : ... , res : ... } ] }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "authenticate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "autoSplitVector": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command returning the split points for a chunk, given the maximum chunk size.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "availableQueryOptions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "buildInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get version #, etc.\n{ buildinfo:1 }",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "checkShardingIndex": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command.\n",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "cleanupOrphaned": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "cloneCollectionAsCapped": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ cloneCollectionAsCapped:\u003cfromName\u003e, toCollection:\u003ctoName\u003e, size:\u003csizeInBytes\u003e }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "collMod": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Sets collection options.\nExample: { collMod: 'foo', viewOn: 'bar'} Example: { collMod: 'foo', index: {keyPattern: {a: 1}, expireAfterSeconds: 600} Example: { collMod: 'foo', index: {name: 'bar', expireAfterSeconds: 600} }\n",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "collStats": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ collStats:\"blog.posts\" , scale : 1 } scale divides sizes e.g. for KB use 1024\n    avgObjSize - in bytes",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "commitTransaction": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Commits a transaction",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "compact": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "compact collection\nwarning: this operation locks the database and is slow. you can cancel with killOp()\n{ compact : \u003ccollection_name\u003e, [force:\u003cbool\u003e] }\n  force - allows to run on a replica set primary\n",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "connPoolStats": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "stats about connections between servers in a replica set or sharded cluster.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "connPoolSync": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "connectionStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Returns connection-specific information such as logged-in users and their roles",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "convertToCapped": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ convertToCapped:\u003cfromCollectionName\u003e, size:\u003csizeInBytes\u003e }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "coordinateCommitTransaction": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Coordinates the commit for a transaction. Only called by mongos.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "count": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "count objects in collection",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "create": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "explicitly creates a collection or view\n{\n  create: \u003cstring: collection or view name\u003e [,\n  capped: \u003cbool: capped collection\u003e,\n  autoIndexId: \u003cbool: automatic creation of _id index\u003e,\n  idIndex: \u003cdocument: _id index specification\u003e,\n  size: \u003cint: size in bytes of the capped collection\u003e,\n  max: \u003cint: max number of documents in the capped collection\u003e,\n  storageEngine: \u003cdocument: storage engine configuration\u003e,\n  validator: \u003cdocument: validation rules\u003e,\n  validationLevel: \u003cstring: validation level\u003e,\n  validationAction: \u003cstring: validation action\u003e,\n  indexOptionDefaults: \u003cdocument: default configuration for indexes\u003e,\n  viewOn: \u003cstring: name of source collection or view\u003e,\n  pipeline: \u003carray\u003cobject\u003e: aggregation pipeline stage\u003e,\n  collation: \u003cdocument: default collation for the collection or view\u003e,\n  writeConcern: \u003cdocument: write concern expression for the operation\u003e]\n}",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "createIndexes": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "createRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "createUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "currentOp": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dataSize": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "determine data size for a set of data in a certain range\nexample: { dataSize:\"blog.posts\", keyPattern:{x:1}, min:{x:10}, max:{x:55} }\nmin and max parameters are optional. They must either both be included or both omitted\nkeyPattern is an optional parameter indicating an index pattern that would be usefulfor iterating over the min/max bounds. If keyPattern is omitted, it is inferred from the structure of min. \nnote: This command may take a while to run",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dbHash": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dbStats": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Get stats on a database. Not instantaneous. Slower for databases with large .ns files.\nExample: { dbStats:1, scale:1 }",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "delete": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "delete documents",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "distinct": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ distinct : 'collection name' , key : 'a.b' , query : {} }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "donorAbortMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Abort a migration",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "donorForgetMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Forget a migration",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "donorStartMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Start migrating databases whose names match the specified prefix to the specified replica set.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "driverOIDTest": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "drop": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "drop a collection\n{drop : \u003ccollectionName\u003e}",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "dropAllRolesFromDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dropAllUsersFromDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dropConnections": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Drop egress connections to specified host and port",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dropDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "drop (delete) this database",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "dropIndexes": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "drop indexes for a collection",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "dropRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dropUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "endSessions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "end a set of logical sessions",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "explain": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "explain database reads and writes",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "features": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "return build level feature settings",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "filemd5": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": " example: { filemd5 : ObjectId(aaaaaaa) , root : \"fs\" }",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "find": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "query for documents",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "findAndModify": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ findAndModify: \"collection\", query: {processed:false}, update: {$set: {processed:true}}, new: true}\n{ findAndModify: \"collection\", query: {processed:false}, remove: true, sort: {priority:-1}}\nEither update or remove is required, all other fields have default values.\nOutput is in the \"value\" field\n",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "flushRouterConfig": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Flushes the cached routing information for a single collection, entire database (and its collections) or all databases, which would cause full reload from the config server on the next access.\nUsage:\n{flushRouterConfig: 1} flushes all databases\n{flushRouterConfig: 'db'} flushes only the given database (and its collections)\n{flushRouterconfig: 'db.coll'} flushes only the given collection",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "fsync": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "http://dochub.mongodb.org/core/fsynccommand",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "fsyncUnlock": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getCmdLineOpts": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get argv",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getDatabaseVersion": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": " example: { getDatabaseVersion : 'foo'  } ",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getDefaultRWConcern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get the current read/write concern defaults being applied by this node",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getDiagnosticData": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get latest diagnostic data collection snapshot",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getFreeMonitoringStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Indicates free monitoring status",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getLastError": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "return error status of the last operation on this connection\noptions:\n  { fsync:true } - fsync before returning, or wait for journal commit if running with --journal\n  { j:true } - wait for journal commit if running with --journal\n  { w:n } - await replication to n servers (including self) before returning\n  { w:'majority' } - await replication to majority of set\n  { wtimeout:m} - timeout for w in m milliseconds",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getLog": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ getLog : '*' }  OR { getLog : 'global' }",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getMore": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "retrieve more results from an existing cursor",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "getParameter": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get administrative option(s)\nexample:\n{ getParameter:1, notablescan:1 }\nsupported:\n  AlwaysRecordTraffic\n  KeysRotationIntervalSec\n  ShardingTaskExecutorPoolHostTimeoutMS\n  ShardingTaskExecutorPoolMaxConnecting\n  ShardingTaskExecutorPoolMaxSize\n  ShardingTaskExecutorPoolMinSize\n  ShardingTaskExecutorPoolRefreshRequirementMS\n  ShardingTaskExecutorPoolRefreshTimeoutMS\n  ShardingTaskExecutorPoolReplicaSetMatching\n  TransactionRecordMinimumLifetimeMinutes\n  acceptApiVersion2\n  aggregateOperationResourceConsumptionMetrics\n  allowRolesFromX509Certificates\n  authSchemaVersion\n  authenticationMechanisms\n  authorizationManagerCacheSize\n  authorizationManagerPinnedUsers\n  authorizationManagerPinnedUsersRefreshIntervalMillis\n  automationServiceDescriptor\n  awsEC2InstanceMetadataUrl\n  awsECSInstanceMetadataUrl\n  bgSyncOplogFetcherBatchSize\n  changeSyncSourceThresholdMillis\n  clientCursorMonitorFrequencySecs\n  cloudFreeMonitoringEndpointURL\n  clusterAuthMode\n  collectionBulkLoaderBatchSizeInBytes\n  collectionClonerBatchSize\n  collectionClonerUsesExhaust\n  connPoolMaxConnsPerHost\n  connPoolMaxInUseConnsPerHost\n  connectTimeoutMs\n  coordinateCommitReturnImmediatelyAfterPersistingDecision\n  createRollbackDataFiles\n  cursorTimeoutMillis\n  deprecatedWireOpsWarningPeriodInSeconds\n  diagnosticDataCollectionDirectoryPath\n  diagnosticDataCollectionDirectorySizeMB\n  diagnosticDataCollectionEnableLatencyHistograms\n  diagnosticDataCollectionEnabled\n  diagnosticDataCollectionFileSizeMB\n  diagnosticDataCollectionPeriodMillis\n  diagnosticDataCollectionSamplesPerChunk\n  diagnosticDataCollectionSamplesPerInterimUpdate\n  diagnosticDataCollectionVerboseTCMalloc\n  disableJavaScriptJIT\n  disableLogicalSessionCacheRefresh\n  disableNonSSLConnectionLogging\n  disableNonTLSConnectionLogging\n  disableResumableRangeDeleter\n  disableSplitHorizonIPCheck\n  disabledSecureAllocatorDomains\n  documentUnitSizeBytes\n  enableDefaultWriteConcernUpdatesForInitiate\n  enableElectionHandoff\n  enableFinerGrainedCatalogCacheRefresh\n  enableFlowControl\n  enableIndexBuildCommitQuorum\n  enableLocalhostAuthBypass\n  enableOverrideClusterChainingSetting\n  enableReconfigRollbackCommittedWritesCheck\n  enableResumableIndexBuilds\n  enableSearchMeta\n  enableShardedIndexConsistencyCheck\n  enableTestCommands\n  enableTimeoutOfInactiveSessionCursors\n  enforceUserClusterSeparation\n  featureCompatibilityVersion\n  featureFlagBlender\n  featureFlagChangeStreamsOptimization\n  featureFlagDefaultReadConcernLocal\n  featureFlagDefaultWriteConcernMajority\n  featureFlagDotsAndDollars\n  featureFlagFryer\n  featureFlagLockFreeReads\n  featureFlagResharding\n  featureFlagRetryableFindAndModify\n  featureFlagSearchMeta\n  featureFlagShardedTimeSeries\n  featureFlagShardedTimeSeriesUpdateDelete\n  featureFlagShardingFullDDLSupport\n  featureFlagSpoon\n  featureFlagTenantMigrations\n  featureFlagTimeseriesCollection\n  featureFlagTimeseriesUpdatesAndDeletes\n  featureFlagToaster\n  featureFlagUseSecondaryDelaySecs\n  findChunksOnConfigTimeoutMS\n  fixedServiceExecutorRecursionLimit\n  fixedServiceExecutorThreadLimit\n  flowControlDecayConstant\n  flowControlFudgeFactor\n  flowControlMaxSamples\n  flowControlMinTicketsPerSecond\n  flowControlSamplePeriod\n  flowControlTargetLagSeconds\n  flowControlThresholdLagPercentage\n  flowControlTicketAdderConstant\n  flowControlTicketMultiplierConstant\n  flowControlWarnThresholdSeconds\n  forceRollbackViaRefetch\n  globalConnPoolIdleTimeoutMinutes\n  heapProfilingEnabled\n  heapProfilingSampleIntervalBytes\n  heartBeatFrequencyMs\n  honorSystemUmask\n  indexEntryUnitSizeBytes\n  initialServiceExecutorThreadingModel\n  initialSyncOplogBuffer\n  initialSyncOplogBufferPeekCacheSize\n  initialSyncOplogFetcherBatchSize\n  initialSyncSourceReadPreference\n  initialSyncTransientErrorRetryPeriodSeconds\n  internalDocumentSourceCursorBatchSizeBytes\n  internalDocumentSourceGroupMaxMemoryBytes\n  internalDocumentSourceLookupCacheSizeBytes\n  internalDocumentSourceSetWindowFieldsMaxMemoryBytes\n  internalGeoNearQuery2DMaxCoveringCells\n  internalGeoPredicateQuery2DMaxCoveringCells\n  internalIndexBuildBulkLoadYieldIterations\n  internalInsertMaxBatchSize\n  internalLookupStageIntermediateDocumentMaxSizeBytes\n  internalPipelineLengthLimit\n  internalProhibitShardOperationRetry\n  internalQueryAllowShardedLookup\n  internalQueryAlwaysMergeOnPrimaryShard\n  internalQueryAppendIdToSetWindowFieldsSort\n  internalQueryCacheDisableInactiveEntries\n  internalQueryCacheEvictionRatio\n  internalQueryCacheMaxEntriesPerCollection\n  internalQueryCacheMaxSizeBytesBeforeStripDebugInfo\n  internalQueryCacheSize\n  internalQueryCacheWorksGrowthCoefficient\n  internalQueryDefaultDOP\n  internalQueryDesugarWhereToFunction\n  internalQueryDisableExchange\n  internalQueryEnableCSTParser\n  internalQueryEnableLoggingV2OplogEntries\n  internalQueryEnableSlotBasedExecutionEngine\n  internalQueryEnumerationMaxIntersectPerAnd\n  internalQueryEnumerationMaxOrSolutions\n  internalQueryEnumerationPreferLockstepOrEnumeration\n  internalQueryExecYieldIterations\n  internalQueryExecYieldPeriodMS\n  internalQueryExplainSizeThresholdBytes\n  internalQueryFacetBufferSizeBytes\n  internalQueryFacetMaxOutputDocSizeBytes\n  internalQueryForceIntersectionPlans\n  internalQueryIgnoreUnknownJSONSchemaKeywords\n  internalQueryJavaScriptFnTimeoutMillis\n  internalQueryJavaScriptHeapSizeLimitMB\n  internalQueryMaxAddToSetBytes\n  internalQueryMaxBlockingSortMemoryUsageBytes\n  internalQueryMaxDocValidationErrorConsideredValues\n  internalQueryMaxJsEmitBytes\n  internalQueryMaxPushBytes\n  internalQueryMaxRangeBytes\n  internalQueryMaxScansToExplode\n  internalQueryPlanEvaluationCollFraction\n  internalQueryPlanEvaluationMaxResults\n  internalQueryPlanEvaluationWorks\n  internalQueryPlanOrChildrenIndependently\n  internalQueryPlannerEnableHashIntersection\n  internalQueryPlannerEnableIndexIntersection\n  internalQueryPlannerGenerateCoveredWholeIndexScans\n  internalQueryPlannerMaxIndexedSolutions\n  internalQueryProhibitBlockingMergeOnMongoS\n  internalQueryProhibitMergingOnMongoS\n  internalQueryS2GeoCoarsestLevel\n  internalQueryS2GeoFinestLevel\n  internalQueryS2GeoMaxCells\n  internalQuerySlotBasedExecutionMaxStaticIndexScanIntervals\n  internalValidateFeaturesAsMaster\n  internalValidateFeaturesAsPrimary\n  javascriptProtection\n  journalCommitInterval\n  jsHeapLimitMB\n  loadRoutingTableOnStartup\n  localLogicalSessionTimeoutMinutes\n  localThresholdMs\n  logComponentVerbosity\n  logLevel\n  logicalSessionRefreshMillis\n  maxAcceptableLogicalClockDriftSecs\n  maxBSONDepth\n  maxCatchUpPercentageBeforeBlockingWrites\n  maxIndexBuildDrainBatchSize\n  maxIndexBuildDrainMemoryUsageMegabytes\n  maxIndexBuildMemoryUsageMegabytes\n  maxLogSizeKB\n  maxNumActiveUserIndexBuilds\n  maxNumSyncSourceChangesPerHour\n  maxNumberOfTransactionOperationsInSingleOplogEntry\n  maxOplogTruncationPointsAfterStartup\n  maxOplogTruncationPointsDuringStartup\n  maxSessions\n  maxSyncSourceLagSecs\n  maxTenantMigrationDonorServiceThreadPoolSize\n  maxTenantMigrationRecipientThreadPoolSize\n  maxTimeMSForHedgedReads\n  maxTransactionLockRequestTimeoutMillis\n  maxValidateMBperSec\n  maxValidateMemoryUsageMB\n  metadataRefreshInTransactionMaxWaitBehindCritSecMS\n  migrateCloneInsertionBatchDelayMS\n  migrateCloneInsertionBatchSize\n  migrationLockAcquisitionMaxWaitMS\n  minNumChunksForSessionsCollection\n  minOplogEntriesPerThread\n  minOplogTruncationPoints\n  minSnapshotHistoryWindowInSeconds\n  mirrorReads\n  mongosShutdownTimeoutMillisForSignaledShutdown\n  notablescan\n  numInitialSyncAttempts\n  numInitialSyncConnectAttempts\n  numInitialSyncOplogFindAttempts\n  ocspCacheSize\n  ocspEnabled\n  ocspStaplingRefreshPeriodSecs\n  ocspValidationRefreshPeriodSecs\n  opensslCipherConfig\n  opensslCipherSuiteConfig\n  opensslDiffieHellmanParameters\n  operationMemoryPoolBlockInitialSizeKB\n  operationMemoryPoolBlockMaxSizeKB\n  oplogApplicationEnforcesSteadyStateConstraints\n  oplogFetcherInitialSyncMaxFetcherRestarts\n  oplogFetcherSteadyStateMaxFetcherRestarts\n  oplogFetcherUsesExhaust\n  oplogInitialFindMaxSeconds\n  oplogNetworkTimeoutBufferSeconds\n  oplogRetriedFindMaxSeconds\n  oplogSamplingLogIntervalSeconds\n  oplogTruncationPointSizeMB\n  orphanCleanupDelaySecs\n  periodicNoopIntervalSecs\n  priorityTakeoverFreshnessWindowSeconds\n  processUmask\n  profileOperationResourceConsumptionMetrics\n  quiet\n  rangeDeleterBatchDelayMS\n  rangeDeleterBatchSize\n  readHedgingMode\n  receiveChunkWaitForRangeDeleterTimeoutMS\n  recoverFromOplogAsStandalone\n  recoverToOplogTimestamp\n  remainingReshardingOperationTimeThresholdMillis\n  replBatchLimitBytes\n  replBatchLimitOperations\n  replElectionTimeoutOffsetLimitFraction\n  replWriterMinThreadCount\n  replWriterThreadCount\n  replicaSetMonitorProtocol\n  reportOpWriteConcernCountersInServerStatus\n  requireApiVersion\n  reservedServiceExecutorRecursionLimit\n  reshardingCollectionClonerBatchSizeInBytes\n  reshardingCoordinatorServiceMaxThreadCount\n  reshardingCriticalSectionTimeoutMillis\n  reshardingDonorServiceMaxThreadCount\n  reshardingMinimumOperationDurationMillis\n  reshardingOplogApplierMaxLockRequestTimeoutMillis\n  reshardingOplogBatchLimitBytes\n  reshardingOplogBatchLimitOperations\n  reshardingOplogBatchTaskCount\n  reshardingRecipientServiceMaxThreadCount\n  reshardingTxnClonerProgressBatchSize\n  resumableIndexBuildMajorityOpTimeTimeoutMillis\n  rewriteStateChangeErrors\n  roleGraphInvalidationIsFatal\n  rollbackRemoteOplogQueryBatchSize\n  rollbackTimeLimitSecs\n  saslHostName\n  saslServiceName\n  saslauthdPath\n  scramIterationCount\n  scramSHA256IterationCount\n  scriptingEngineInterruptIntervalMS\n  shardedIndexConsistencyCheckIntervalMS\n  shutdownTimeoutMillisForSignaledShutdown\n  skipCorruptDocumentsWhenCloning\n  skipShardingConfigurationChecks\n  skipShellCursorFinalize\n  sslMode\n  sslWithholdClientCertificate\n  startupAuthSchemaValidation\n  startupRecoveryForRestore\n  storeFindAndModifyImagesInSideCollection\n  suppressNoTLSPeerCertificateWarning\n  syncdelay\n  synchronousServiceExecutorRecursionLimit\n  takeUnstableCheckpointOnShutdown\n  taskExecutorPoolSize\n  tcmallocAggressiveMemoryDecommit\n  tcmallocEnableMarkThreadTemporarilyIdle\n  tcmallocMaxTotalThreadCacheBytes\n  tcmallocReleaseRate\n  tcpFastOpenClient\n  tcpFastOpenQueueSize\n  tcpFastOpenServer\n  tenantApplierBatchSizeBytes\n  tenantApplierBatchSizeOps\n  tenantApplierThreadCount\n  tenantMigrationBlockingStateTimeoutMS\n  tenantMigrationDisableX509Auth\n  tenantMigrationExcludeDonorHostTimeoutMS\n  tenantMigrationExternalKeysRemovalBufferSecs\n  tenantMigrationGarbageCollectionDelayMS\n  tenantMigrationOplogBufferPeekCacheSize\n  tenantMigrationOplogFetcherBatchSize\n  testingDiagnosticsEnabled\n  testingSnapshotBehaviorInIsolation\n  timeseriesBucketMaxCount\n  timeseriesBucketMaxSize\n  timeseriesBucketsCollectionClusterById\n  timeseriesIdleBucketExpiryMemoryUsageThreshold\n  tlsCATrusts\n  tlsMode\n  tlsOCSPStaplingTimeoutSecs\n  tlsOCSPVerifyTimeoutSecs\n  tlsWithholdClientCertificate\n  tlsX509ClusterAuthDNOverride\n  tlsX509ExpirationWarningThresholdDays\n  totalUnitWriteSizeBytes\n  traceExceptions\n  traceWriteConflictExceptions\n  trafficRecordingDirectory\n  transactionLifetimeLimitSeconds\n  transactionSizeLimitBytes\n  ttlMonitorEnabled\n  ttlMonitorSleepSecs\n  useReadOnceCursorsForIndexBuilds\n  waitForSecondaryBeforeNoopWriteMS\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartup\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartupWaitMS\n  watchdogPeriodSeconds\n  wiredTigerConcurrentReadTransactions\n  wiredTigerConcurrentWriteTransactions\n  wiredTigerCursorCacheSize\n  wiredTigerEngineRuntimeConfig\n  wiredTigerFileHandleCloseIdleTime\n  wiredTigerFileHandleCloseMinimum\n  wiredTigerFileHandleCloseScanInterval\n  wiredTigerMaxCacheOverflowSizeGB\n  wiredTigerSessionCloseIdleTimeSecs\n  writePeriodicNoops\n{ getParameter:'*' } to get everything\n",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getShardMap": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "lists the set of shards known to this instance",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getShardVersion": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": " example: { getShardVersion : 'alleyinsider.foo'  } ",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getnonce": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "grantPrivilegesToRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "grantRolesToRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "grantRolesToUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "hello": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Check if this server is primary for a replica set\n{ hello : 1 }",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "hostInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "returns information about the daemon's host",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "insert": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "insert documents",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "internalRenameIfOptionsAndIndexesMatch": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command to rename and check collection options",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "invalidateUserCache": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "isMaster": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Check if this server is primary for a replica set\n{ isMaster : 1 }",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "killAllSessions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "kill all logical sessions, for a user, and their operations",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "killAllSessionsByPattern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "kill logical sessions by pattern",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "killCursors": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Kill a list of cursor ids",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "killOp": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "killSessions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "kill a logical session and its operations",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "listCollections": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "list collections for this db",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "listCommands": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get a list of all db commands",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "listDatabases": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ listDatabases:1, [filter: \u003cfilterObject\u003e] [, nameOnly: true ] }\nlist databases on this server",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "listIndexes": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "list indexes for a collection",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "lockInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "show all lock info on the server",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "logRotate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "logout": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "de-authenticate",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "mapReduce": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Runs the mapReduce command. See http://dochub.mongodb.org/core/mapreduce for details.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "mergeChunks": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command to merge a contiguous range of chunks.\nUsage: { mergeChunks: \u003cns\u003e, epoch: \u003cepoch\u003e, bounds: [\u003cmin key\u003e, \u003cmax key\u003e] }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "moveChunk": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "ping": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "a way to check that the server is alive. responds immediately even if server is in a db lock.",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "planCacheClear": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Drops one or all plan cache entries in a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "planCacheClearFilters": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Clears index filter for a single query shape or, if the query shape is omitted, all filters for the collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "planCacheListFilters": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Displays index filters for all query shapes in a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "planCacheSetFilter": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Sets index filter for a query shape. Overrides existing filter.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "prepareTransaction": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Prepares a transaction on this shard; sent by a router or re-sent by the transaction commit coordinator for a cross-shard transaction",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "profile": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "controls the behaviour of the performance profiler, the fraction of eligible operations which are sampled for logging/profiling, and the threshold duration at which ops become eligible. See http://docs.mongodb.org/manual/reference/command/profile",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "reIndex": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "re-index a collection (can only be run on a standalone mongod)",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "recipientForgetMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Interrupts tenant migration data sync and marks that the recipient's durable state machine may be garbage collected.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "recipientSyncData": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal replica set command; instructs the recipient to sync data as part of a tenant migration.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "refreshSessions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "renew a set of logical sessions",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "renameCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": " example: { renameCollection: foo.a, to: bar.b }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "repairDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "This command has been removed. If you would like to compact your data, use the 'compact' command. If you would like to rebuild indexes, use the 'reIndex' command. If you need to recover data, please see the documentation for repairing your database offline: http://dochub.mongodb.org/core/repair",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetAbortPrimaryCatchUp": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ CmdReplSetAbortPrimaryCatchUp : 1 }\nAbort primary catch-up mode; immediately finish the transition to primary without fetching any further unreplicated writes from any other online nodes",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetFreeze": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ replSetFreeze : \u003cseconds\u003e }\n'freeze' state of member to the extent we can do that.  What this really means is that\nthis node will not attempt to become primary until the time period specified expires.\nYou can call again with {replSetFreeze:0} to unfreeze sooner.\nA process restart unfreezes the member also.\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetGetConfig": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Returns the current replica set configuration{ replSetGetConfig : 1 }\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetGetRBID": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetGetStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Report status of a replica set from the POV of this server\n{ replSetGetStatus : 1 }\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetHeartbeat": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetInitiate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Initiate/christen a replica set.\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetMaintenance": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ replSetMaintenance : bool }\nEnable or disable maintenance mode.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetReconfig": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Adjust configuration of a replica set\n{ replSetReconfig : config_object }\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetRequestVotes": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetResizeOplog": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Resize oplog using size (in MBs) and optionally, retention (in terms of hours)",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetStepDown": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ replSetStepDown : \u003cseconds\u003e }\nStep down as primary.  Will not try to reelect self for the specified time period (1 minute if no numeric secs value specified, or secs is 0).\n(If another member with same priority takes over in the meantime, it will stay primary.)\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetStepUp": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetSyncFrom": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ replSetSyncFrom : \"host:port\" }\nChange who this member is syncing from. Note: This will interrupt and restart an in-progress initial sync.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetUpdatePosition": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "revokePrivilegesFromRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "revokeRolesFromRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "revokeRolesFromUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "rolesInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "rotateCertificates": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Rotate certificates for new SSL connections",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "saslContinue": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Subsequent steps in a SASL authentication conversation.",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "saslStart": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "First step in a SASL authentication conversation.",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "serverStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "returns lots of administrative server statistics",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setDefaultRWConcern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "set the current read/write concern defaults (cluster-wide)",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setFeatureCompatibilityVersion": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Set the featureCompatibilityVersion used by this cluster. If set to '4.4', then features introduced in versions greater than '4.4' will be disabled If set to '4.9', then features introduced in '5.0' will be disabled. If set to '5.0', then '5.0' features are enabled, and all nodes in the cluster must be binary version 5.0. See https://docs.mongodb.com/master/release-notes/4.4-compatibility/#feature-compatibility.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setFreeMonitoring": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "enable or disable Free Monitoring",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setIndexCommitQuorum": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Resets the commitQuorum for the given index builds in a collection. Usage:\n{\n    setIndexCommitQuorum: \u003cstring\u003e collection name,\n    indexNames: array\u003cstring\u003e list of index names,\n    commitQuorum: \u003cstring|number|object\u003e option to define the required quorum for\n                  the index builds to commit\n}",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setParameter": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "set administrative option(s)\n{ setParameter:1, \u003cparam\u003e:\u003cvalue\u003e }\nsupported:\n  AlwaysRecordTraffic\n  KeysRotationIntervalSec\n  ShardingTaskExecutorPoolHostTimeoutMS\n  ShardingTaskExecutorPoolMaxConnecting\n  ShardingTaskExecutorPoolMaxSize\n  ShardingTaskExecutorPoolMinSize\n  ShardingTaskExecutorPoolRefreshRequirementMS\n  ShardingTaskExecutorPoolRefreshTimeoutMS\n  ShardingTaskExecutorPoolReplicaSetMatching\n  TransactionRecordMinimumLifetimeMinutes\n  acceptApiVersion2\n  aggregateOperationResourceConsumptionMetrics\n  allowRolesFromX509Certificates\n  authSchemaVersion\n  authenticationMechanisms\n  authorizationManagerCacheSize\n  authorizationManagerPinnedUsers\n  authorizationManagerPinnedUsersRefreshIntervalMillis\n  automationServiceDescriptor\n  awsEC2InstanceMetadataUrl\n  awsECSInstanceMetadataUrl\n  bgSyncOplogFetcherBatchSize\n  changeSyncSourceThresholdMillis\n  clientCursorMonitorFrequencySecs\n  cloudFreeMonitoringEndpointURL\n  clusterAuthMode\n  collectionBulkLoaderBatchSizeInBytes\n  collectionClonerBatchSize\n  collectionClonerUsesExhaust\n  connPoolMaxConnsPerHost\n  connPoolMaxInUseConnsPerHost\n  connectTimeoutMs\n  coordinateCommitReturnImmediatelyAfterPersistingDecision\n  createRollbackDataFiles\n  cursorTimeoutMillis\n  deprecatedWireOpsWarningPeriodInSeconds\n  diagnosticDataCollectionDirectoryPath\n  diagnosticDataCollectionDirectorySizeMB\n  diagnosticDataCollectionEnableLatencyHistograms\n  diagnosticDataCollectionEnabled\n  diagnosticDataCollectionFileSizeMB\n  diagnosticDataCollectionPeriodMillis\n  diagnosticDataCollectionSamplesPerChunk\n  diagnosticDataCollectionSamplesPerInterimUpdate\n  diagnosticDataCollectionVerboseTCMalloc\n  disableJavaScriptJIT\n  disableLogicalSessionCacheRefresh\n  disableNonSSLConnectionLogging\n  disableNonTLSConnectionLogging\n  disableResumableRangeDeleter\n  disableSplitHorizonIPCheck\n  disabledSecureAllocatorDomains\n  documentUnitSizeBytes\n  enableDefaultWriteConcernUpdatesForInitiate\n  enableElectionHandoff\n  enableFinerGrainedCatalogCacheRefresh\n  enableFlowControl\n  enableIndexBuildCommitQuorum\n  enableLocalhostAuthBypass\n  enableOverrideClusterChainingSetting\n  enableReconfigRollbackCommittedWritesCheck\n  enableResumableIndexBuilds\n  enableSearchMeta\n  enableShardedIndexConsistencyCheck\n  enableTestCommands\n  enableTimeoutOfInactiveSessionCursors\n  enforceUserClusterSeparation\n  featureCompatibilityVersion\n  featureFlagBlender\n  featureFlagChangeStreamsOptimization\n  featureFlagDefaultReadConcernLocal\n  featureFlagDefaultWriteConcernMajority\n  featureFlagDotsAndDollars\n  featureFlagFryer\n  featureFlagLockFreeReads\n  featureFlagResharding\n  featureFlagRetryableFindAndModify\n  featureFlagSearchMeta\n  featureFlagShardedTimeSeries\n  featureFlagShardedTimeSeriesUpdateDelete\n  featureFlagShardingFullDDLSupport\n  featureFlagSpoon\n  featureFlagTenantMigrations\n  featureFlagTimeseriesCollection\n  featureFlagTimeseriesUpdatesAndDeletes\n  featureFlagToaster\n  featureFlagUseSecondaryDelaySecs\n  findChunksOnConfigTimeoutMS\n  fixedServiceExecutorRecursionLimit\n  fixedServiceExecutorThreadLimit\n  flowControlDecayConstant\n  flowControlFudgeFactor\n  flowControlMaxSamples\n  flowControlMinTicketsPerSecond\n  flowControlSamplePeriod\n  flowControlTargetLagSeconds\n  flowControlThresholdLagPercentage\n  flowControlTicketAdderConstant\n  flowControlTicketMultiplierConstant\n  flowControlWarnThresholdSeconds\n  forceRollbackViaRefetch\n  globalConnPoolIdleTimeoutMinutes\n  heapProfilingEnabled\n  heapProfilingSampleIntervalBytes\n  heartBeatFrequencyMs\n  honorSystemUmask\n  indexEntryUnitSizeBytes\n  initialServiceExecutorThreadingModel\n  initialSyncOplogBuffer\n  initialSyncOplogBufferPeekCacheSize\n  initialSyncOplogFetcherBatchSize\n  initialSyncSourceReadPreference\n  initialSyncTransientErrorRetryPeriodSeconds\n  internalDocumentSourceCursorBatchSizeBytes\n  internalDocumentSourceGroupMaxMemoryBytes\n  internalDocumentSourceLookupCacheSizeBytes\n  internalDocumentSourceSetWindowFieldsMaxMemoryBytes\n  internalGeoNearQuery2DMaxCoveringCells\n  internalGeoPredicateQuery2DMaxCoveringCells\n  internalIndexBuildBulkLoadYieldIterations\n  internalInsertMaxBatchSize\n  internalLookupStageIntermediateDocumentMaxSizeBytes\n  internalPipelineLengthLimit\n  internalProhibitShardOperationRetry\n  internalQueryAllowShardedLookup\n  internalQueryAlwaysMergeOnPrimaryShard\n  internalQueryAppendIdToSetWindowFieldsSort\n  internalQueryCacheDisableInactiveEntries\n  internalQueryCacheEvictionRatio\n  internalQueryCacheMaxEntriesPerCollection\n  internalQueryCacheMaxSizeBytesBeforeStripDebugInfo\n  internalQueryCacheSize\n  internalQueryCacheWorksGrowthCoefficient\n  internalQueryDefaultDOP\n  internalQueryDesugarWhereToFunction\n  internalQueryDisableExchange\n  internalQueryEnableCSTParser\n  internalQueryEnableLoggingV2OplogEntries\n  internalQueryEnableSlotBasedExecutionEngine\n  internalQueryEnumerationMaxIntersectPerAnd\n  internalQueryEnumerationMaxOrSolutions\n  internalQueryEnumerationPreferLockstepOrEnumeration\n  internalQueryExecYieldIterations\n  internalQueryExecYieldPeriodMS\n  internalQueryExplainSizeThresholdBytes\n  internalQueryFacetBufferSizeBytes\n  internalQueryFacetMaxOutputDocSizeBytes\n  internalQueryForceIntersectionPlans\n  internalQueryIgnoreUnknownJSONSchemaKeywords\n  internalQueryJavaScriptFnTimeoutMillis\n  internalQueryJavaScriptHeapSizeLimitMB\n  internalQueryMaxAddToSetBytes\n  internalQueryMaxBlockingSortMemoryUsageBytes\n  internalQueryMaxDocValidationErrorConsideredValues\n  internalQueryMaxJsEmitBytes\n  internalQueryMaxPushBytes\n  internalQueryMaxRangeBytes\n  internalQueryMaxScansToExplode\n  internalQueryPlanEvaluationCollFraction\n  internalQueryPlanEvaluationMaxResults\n  internalQueryPlanEvaluationWorks\n  internalQueryPlanOrChildrenIndependently\n  internalQueryPlannerEnableHashIntersection\n  internalQueryPlannerEnableIndexIntersection\n  internalQueryPlannerGenerateCoveredWholeIndexScans\n  internalQueryPlannerMaxIndexedSolutions\n  internalQueryProhibitBlockingMergeOnMongoS\n  internalQueryProhibitMergingOnMongoS\n  internalQueryS2GeoCoarsestLevel\n  internalQueryS2GeoFinestLevel\n  internalQueryS2GeoMaxCells\n  internalQuerySlotBasedExecutionMaxStaticIndexScanIntervals\n  internalValidateFeaturesAsMaster\n  internalValidateFeaturesAsPrimary\n  javascriptProtection\n  journalCommitInterval\n  jsHeapLimitMB\n  loadRoutingTableOnStartup\n  localLogicalSessionTimeoutMinutes\n  localThresholdMs\n  logComponentVerbosity\n  logLevel\n  logicalSessionRefreshMillis\n  maxAcceptableLogicalClockDriftSecs\n  maxBSONDepth\n  maxCatchUpPercentageBeforeBlockingWrites\n  maxIndexBuildDrainBatchSize\n  maxIndexBuildDrainMemoryUsageMegabytes\n  maxIndexBuildMemoryUsageMegabytes\n  maxLogSizeKB\n  maxNumActiveUserIndexBuilds\n  maxNumSyncSourceChangesPerHour\n  maxNumberOfTransactionOperationsInSingleOplogEntry\n  maxOplogTruncationPointsAfterStartup\n  maxOplogTruncationPointsDuringStartup\n  maxSessions\n  maxSyncSourceLagSecs\n  maxTenantMigrationDonorServiceThreadPoolSize\n  maxTenantMigrationRecipientThreadPoolSize\n  maxTimeMSForHedgedReads\n  maxTransactionLockRequestTimeoutMillis\n  maxValidateMBperSec\n  maxValidateMemoryUsageMB\n  metadataRefreshInTransactionMaxWaitBehindCritSecMS\n  migrateCloneInsertionBatchDelayMS\n  migrateCloneInsertionBatchSize\n  migrationLockAcquisitionMaxWaitMS\n  minNumChunksForSessionsCollection\n  minOplogEntriesPerThread\n  minOplogTruncationPoints\n  minSnapshotHistoryWindowInSeconds\n  mirrorReads\n  mongosShutdownTimeoutMillisForSignaledShutdown\n  notablescan\n  numInitialSyncAttempts\n  numInitialSyncConnectAttempts\n  numInitialSyncOplogFindAttempts\n  ocspCacheSize\n  ocspEnabled\n  ocspStaplingRefreshPeriodSecs\n  ocspValidationRefreshPeriodSecs\n  opensslCipherConfig\n  opensslCipherSuiteConfig\n  opensslDiffieHellmanParameters\n  operationMemoryPoolBlockInitialSizeKB\n  operationMemoryPoolBlockMaxSizeKB\n  oplogApplicationEnforcesSteadyStateConstraints\n  oplogFetcherInitialSyncMaxFetcherRestarts\n  oplogFetcherSteadyStateMaxFetcherRestarts\n  oplogFetcherUsesExhaust\n  oplogInitialFindMaxSeconds\n  oplogNetworkTimeoutBufferSeconds\n  oplogRetriedFindMaxSeconds\n  oplogSamplingLogIntervalSeconds\n  oplogTruncationPointSizeMB\n  orphanCleanupDelaySecs\n  periodicNoopIntervalSecs\n  priorityTakeoverFreshnessWindowSeconds\n  processUmask\n  profileOperationResourceConsumptionMetrics\n  quiet\n  rangeDeleterBatchDelayMS\n  rangeDeleterBatchSize\n  readHedgingMode\n  receiveChunkWaitForRangeDeleterTimeoutMS\n  recoverFromOplogAsStandalone\n  recoverToOplogTimestamp\n  remainingReshardingOperationTimeThresholdMillis\n  replBatchLimitBytes\n  replBatchLimitOperations\n  replElectionTimeoutOffsetLimitFraction\n  replWriterMinThreadCount\n  replWriterThreadCount\n  replicaSetMonitorProtocol\n  reportOpWriteConcernCountersInServerStatus\n  requireApiVersion\n  reservedServiceExecutorRecursionLimit\n  reshardingCollectionClonerBatchSizeInBytes\n  reshardingCoordinatorServiceMaxThreadCount\n  reshardingCriticalSectionTimeoutMillis\n  reshardingDonorServiceMaxThreadCount\n  reshardingMinimumOperationDurationMillis\n  reshardingOplogApplierMaxLockRequestTimeoutMillis\n  reshardingOplogBatchLimitBytes\n  reshardingOplogBatchLimitOperations\n  reshardingOplogBatchTaskCount\n  reshardingRecipientServiceMaxThreadCount\n  reshardingTxnClonerProgressBatchSize\n  resumableIndexBuildMajorityOpTimeTimeoutMillis\n  rewriteStateChangeErrors\n  roleGraphInvalidationIsFatal\n  rollbackRemoteOplogQueryBatchSize\n  rollbackTimeLimitSecs\n  saslHostName\n  saslServiceName\n  saslauthdPath\n  scramIterationCount\n  scramSHA256IterationCount\n  scriptingEngineInterruptIntervalMS\n  shardedIndexConsistencyCheckIntervalMS\n  shutdownTimeoutMillisForSignaledShutdown\n  skipCorruptDocumentsWhenCloning\n  skipShardingConfigurationChecks\n  skipShellCursorFinalize\n  sslMode\n  sslWithholdClientCertificate\n  startupAuthSchemaValidation\n  startupRecoveryForRestore\n  storeFindAndModifyImagesInSideCollection\n  suppressNoTLSPeerCertificateWarning\n  syncdelay\n  synchronousServiceExecutorRecursionLimit\n  takeUnstableCheckpointOnShutdown\n  taskExecutorPoolSize\n  tcmallocAggressiveMemoryDecommit\n  tcmallocEnableMarkThreadTemporarilyIdle\n  tcmallocMaxTotalThreadCacheBytes\n  tcmallocReleaseRate\n  tcpFastOpenClient\n  tcpFastOpenQueueSize\n  tcpFastOpenServer\n  tenantApplierBatchSizeBytes\n  tenantApplierBatchSizeOps\n  tenantApplierThreadCount\n  tenantMigrationBlockingStateTimeoutMS\n  tenantMigrationDisableX509Auth\n  tenantMigrationExcludeDonorHostTimeoutMS\n  tenantMigrationExternalKeysRemovalBufferSecs\n  tenantMigrationGarbageCollectionDelayMS\n  tenantMigrationOplogBufferPeekCacheSize\n  tenantMigrationOplogFetcherBatchSize\n  testingDiagnosticsEnabled\n  testingSnapshotBehaviorInIsolation\n  timeseriesBucketMaxCount\n  timeseriesBucketMaxSize\n  timeseriesBucketsCollectionClusterById\n  timeseriesIdleBucketExpiryMemoryUsageThreshold\n  tlsCATrusts\n  tlsMode\n  tlsOCSPStaplingTimeoutSecs\n  tlsOCSPVerifyTimeoutSecs\n  tlsWithholdClientCertificate\n  tlsX509ClusterAuthDNOverride\n  tlsX509ExpirationWarningThresholdDays\n  totalUnitWriteSizeBytes\n  traceExceptions\n  traceWriteConflictExceptions\n  trafficRecordingDirectory\n  transactionLifetimeLimitSeconds\n  transactionSizeLimitBytes\n  ttlMonitorEnabled\n  ttlMonitorSleepSecs\n  useReadOnceCursorsForIndexBuilds\n  waitForSecondaryBeforeNoopWriteMS\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartup\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartupWaitMS\n  watchdogPeriodSeconds\n  wiredTigerConcurrentReadTransactions\n  wiredTigerConcurrentWriteTransactions\n  wiredTigerCursorCacheSize\n  wiredTigerEngineRuntimeConfig\n  wiredTigerFileHandleCloseIdleTime\n  wiredTigerFileHandleCloseMinimum\n  wiredTigerFileHandleCloseScanInterval\n  wiredTigerMaxCacheOverflowSizeGB\n  wiredTigerSessionCloseIdleTimeSecs\n  writePeriodicNoops\n",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setShardVersion": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "shardingState": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "shutdown": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Shuts down the database. Must be run against the admin database and either (1) run from localhost or (2) run while authenticated with the shutdown privilege. If the node is the primary of a replica set, waits up to 'timeoutSecs' for an electable node to be caught up before stepping down. If 'force' is false and no electable node was able to catch up, does not shut down. If the node is in state SECONDARY after the attempted stepdown, any remaining time in 'timeoutSecs' is used for quiesce mode, where the database continues to allow operations to run, but directs clients to route new operations to other replica set members.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "splitChunk": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal command usage only\nexample:\n { splitChunk:\"db.foo\" , keyPattern: {a:1} , min : {a:100} , max: {a:200} { splitKeys : [ {a:150} , ... ]}",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "splitVector": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command.\nexamples:\n  { splitVector : \"blog.post\" , keyPattern:{x:1} , min:{x:10} , max:{x:20}, maxChunkSize:200 }\n  maxChunkSize unit in MBs\n  May optionally specify 'maxSplitPoints' and 'maxChunkObjects' to avoid traversing the whole chunk\n  \n  { splitVector : \"blog.post\" , keyPattern:{x:1} , min:{x:10} , max:{x:20}, force: true }\n  'force' will produce one split point even if data is small; defaults to false\nNOTE: This command may take a while to run",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "startRecordingTraffic": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "startSession": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "start a logical session",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "stopRecordingTraffic": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "top": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "usage by collection, in micros ",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "update": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "update documents",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "updateRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "updateUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "usersInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "validate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Validate contents of a namespace by scanning its data structures for correctness.\nThis is a slow operation.\n\tAdd {full: true} option to do a more thorough check.\n\tAdd {background: true} to validate in the background.\n\tAdd {repair: true} to run repair mode.\nCannot specify both {full: true, background: true}.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "validateDBMetadata": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "validateDBMetadata checks that the stored metadata of a database/collection is valid within a particular API version. If 'db' parameter is specified, only runs validation against that database, if not the validation will be run againt all dbs. Similarly if 'collection' parameter is specified, the validation is only run against that collection, if not the validation is run against all collections.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "voteCommitIndexBuild": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal intra replica set command",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "waitForFailPoint": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "wait for a fail point to be entered a certain number of times",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "whatsmyuri": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{whatsmyuri:1}",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          }
        },
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:36.504Z	INFO	// 172.20.0.3:43490 -> 172.17.0.1:27017 clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 78,
-  "RequestID": 6,
+  "MessageLength": 71060,
+  "RequestID": 162,
   "ResponseTo": 9,
@@ -13,11 +13,3762 @@
         "$k": [
-          "argv",
-          "parsed",
+          "commands",
           "ok"
         ],
-        "argv": [
-          "ferretdb"
-        ],
-        "parsed": {
-          "$k": []
+        "commands": {
+          "$k": [
+            "_addShard",
+            "_cloneCollectionOptionsFromPrimaryShard",
+            "_configsvrAbortReshardCollection",
+            "_configsvrAddShard",
+            "_configsvrAddShardToZone",
+            "_configsvrBalancerCollectionStatus",
+            "_configsvrBalancerStart",
+            "_configsvrBalancerStatus",
+            "_configsvrBalancerStop",
+            "_configsvrCleanupReshardCollection",
+            "_configsvrClearJumboFlag",
+            "_configsvrCommitChunkMerge",
+            "_configsvrCommitChunkMigration",
+            "_configsvrCommitChunkSplit",
+            "_configsvrCommitChunksMerge",
+            "_configsvrCommitMovePrimary",
+            "_configsvrCommitReshardCollection",
+            "_configsvrCreateDatabase",
+            "_configsvrDropCollection",
+            "_configsvrDropDatabase",
+            "_configsvrEnableSharding",
+            "_configsvrEnsureChunkVersionIsGreaterThan",
+            "_configsvrMoveChunk",
+            "_configsvrMovePrimary",
+            "_configsvrRefineCollectionShardKey",
+            "_configsvrRemoveChunks",
+            "_configsvrRemoveShard",
+            "_configsvrRemoveShardFromZone",
+            "_configsvrRemoveTags",
+            "_configsvrRenameCollectionMetadata",
+            "_configsvrReshardCollection",
+            "_configsvrSetAllowMigrations",
+            "_configsvrShardCollection",
+            "_configsvrUpdateZoneKeyRange",
+            "_flushDatabaseCacheUpdates",
+            "_flushDatabaseCacheUpdatesWithWriteConcern",
+            "_flushReshardingStateChange",
+            "_flushRoutingTableCacheUpdates",
+            "_flushRoutingTableCacheUpdatesWithWriteConcern",
+            "_getNextSessionMods",
+            "_getUserCacheGeneration",
+            "_isSelf",
+            "_killOperations",
+            "_mergeAuthzCollections",
+            "_migrateClone",
+            "_recvChunkAbort",
+            "_recvChunkCommit",
+            "_recvChunkStart",
+            "_recvChunkStatus",
+            "_shardsvrAbortReshardCollection",
+            "_shardsvrCleanupReshardCollection",
+            "_shardsvrCloneCatalogData",
+            "_shardsvrCommitReshardCollection",
+            "_shardsvrCreateCollection",
+            "_shardsvrCreateCollectionParticipant",
+            "_shardsvrDropCollection",
+            "_shardsvrDropCollectionIfUUIDNotMatching",
+            "_shardsvrDropCollectionParticipant",
+            "_shardsvrDropDatabase",
+            "_shardsvrDropDatabaseParticipant",
+            "_shardsvrMovePrimary",
+            "_shardsvrRefineCollectionShardKey",
+            "_shardsvrRenameCollection",
+            "_shardsvrRenameCollectionParticipant",
+            "_shardsvrRenameCollectionParticipantUnblock",
+            "_shardsvrReshardCollection",
+            "_shardsvrReshardingOperationTime",
+            "_shardsvrShardCollection",
+            "_transferMods",
+            "abortTransaction",
+            "aggregate",
+            "appendOplogNote",
+            "applyOps",
+            "authenticate",
+            "autoSplitVector",
+            "availableQueryOptions",
+            "buildInfo",
+            "checkShardingIndex",
+            "cleanupOrphaned",
+            "cloneCollectionAsCapped",
+            "collMod",
+            "collStats",
+            "commitTransaction",
+            "compact",
+            "connPoolStats",
+            "connPoolSync",
+            "connectionStatus",
+            "convertToCapped",
+            "coordinateCommitTransaction",
+            "count",
+            "create",
+            "createIndexes",
+            "createRole",
+            "createUser",
+            "currentOp",
+            "dataSize",
+            "dbHash",
+            "dbStats",
+            "delete",
+            "distinct",
+            "donorAbortMigration",
+            "donorForgetMigration",
+            "donorStartMigration",
+            "driverOIDTest",
+            "drop",
+            "dropAllRolesFromDatabase",
+            "dropAllUsersFromDatabase",
+            "dropConnections",
+            "dropDatabase",
+            "dropIndexes",
+            "dropRole",
+            "dropUser",
+            "endSessions",
+            "explain",
+            "features",
+            "filemd5",
+            "find",
+            "findAndModify",
+            "flushRouterConfig",
+            "fsync",
+            "fsyncUnlock",
+            "getCmdLineOpts",
+            "getDatabaseVersion",
+            "getDefaultRWConcern",
+            "getDiagnosticData",
+            "getFreeMonitoringStatus",
+            "getLastError",
+            "getLog",
+            "getMore",
+            "getParameter",
+            "getShardMap",
+            "getShardVersion",
+            "getnonce",
+            "grantPrivilegesToRole",
+            "grantRolesToRole",
+            "grantRolesToUser",
+            "hello",
+            "hostInfo",
+            "insert",
+            "internalRenameIfOptionsAndIndexesMatch",
+            "invalidateUserCache",
+            "isMaster",
+            "killAllSessions",
+            "killAllSessionsByPattern",
+            "killCursors",
+            "killOp",
+            "killSessions",
+            "listCollections",
+            "listCommands",
+            "listDatabases",
+            "listIndexes",
+            "lockInfo",
+            "logRotate",
+            "logout",
+            "mapReduce",
+            "mergeChunks",
+            "moveChunk",
+            "ping",
+            "planCacheClear",
+            "planCacheClearFilters",
+            "planCacheListFilters",
+            "planCacheSetFilter",
+            "prepareTransaction",
+            "profile",
+            "reIndex",
+            "recipientForgetMigration",
+            "recipientSyncData",
+            "refreshSessions",
+            "renameCollection",
+            "repairDatabase",
+            "replSetAbortPrimaryCatchUp",
+            "replSetFreeze",
+            "replSetGetConfig",
+            "replSetGetRBID",
+            "replSetGetStatus",
+            "replSetHeartbeat",
+            "replSetInitiate",
+            "replSetMaintenance",
+            "replSetReconfig",
+            "replSetRequestVotes",
+            "replSetResizeOplog",
+            "replSetStepDown",
+            "replSetStepUp",
+            "replSetSyncFrom",
+            "replSetUpdatePosition",
+            "revokePrivilegesFromRole",
+            "revokeRolesFromRole",
+            "revokeRolesFromUser",
+            "rolesInfo",
+            "rotateCertificates",
+            "saslContinue",
+            "saslStart",
+            "serverStatus",
+            "setDefaultRWConcern",
+            "setFeatureCompatibilityVersion",
+            "setFreeMonitoring",
+            "setIndexCommitQuorum",
+            "setParameter",
+            "setShardVersion",
+            "shardingState",
+            "shutdown",
+            "splitChunk",
+            "splitVector",
+            "startRecordingTraffic",
+            "startSession",
+            "stopRecordingTraffic",
+            "top",
+            "update",
+            "updateRole",
+            "updateUser",
+            "usersInfo",
+            "validate",
+            "validateDBMetadata",
+            "voteCommitIndexBuild",
+            "waitForFailPoint",
+            "whatsmyuri"
+          ],
+          "_addShard": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by shards. Do not call directly. Adds a new shard to a cluster.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_cloneCollectionOptionsFromPrimaryShard": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, do not call directly. Creates a collection on a shard with UUID existing on primary.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrAbortReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Aborts any in-progress resharding operations for this collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrAddShard": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and adds a new shard to the cluster.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrAddShardToZone": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and adds a new zone to the shard.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrBalancerCollectionStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Checks whether the chunks of a given collection are in a quiesced state or there are any which need to be moved because of (1) draining shards, (2) zone violation or (3) imbalance between shards.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrBalancerStart": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrBalancerStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrBalancerStop": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCleanupReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Aborts and cleans up any in-progress resharding operations for this collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrClearJumboFlag": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Clears the jumbo flag of the chunk specified.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitChunkMerge": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a MergeChunkRequest",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitChunkMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitChunkSplit": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a SplitChunkRequest.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitChunksMerge": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a MergeChunksRequest",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitMovePrimary": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Allows a reshard operation to enter critical section ASAP.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCreateDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Create a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrDropCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Drops a collection from a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrDropDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Drops a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrEnableSharding": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Enable sharding on a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrEnsureChunkVersionIsGreaterThan": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrMoveChunk": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Requests the balancer to move or rebalance a single chunk.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrMovePrimary": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Reassigns the primary shard of a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRefineCollectionShardKey": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Adds a suffix to the shard key of an existing collection ('refines the shard key').",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRemoveChunks": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes the chunks for the specified collectionUUID.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRemoveShard": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes a shard from the cluster.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRemoveShardFromZone": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and removes the shard from the zone.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRemoveTags": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes the zone tags for the specified ns.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRenameCollectionMetadata": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Renames a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Reshards a collection on a new shard key.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrSetAllowMigrations": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Sets the allowMigrations flag on the specified collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrShardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Shards a collection. Requires key. Optional unique. Sharding must already be enabled for the database",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrUpdateZoneKeyRange": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and assigns a new range to a zone.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushDatabaseCacheUpdates": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command which waits for any pending routing table cache updates for a particular database to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushDatabaseCacheUpdatesWithWriteConcern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command which waits for any pending routing table cache updates for a particular database to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushReshardingStateChange": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command used by the resharding coordinator to flush state changes to the participant shards while the critical section is active.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushRoutingTableCacheUpdates": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command which waits for any pending routing table cache updates for a particular namespace to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushRoutingTableCacheUpdatesWithWriteConcern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command which waits for any pending routing table cache updates for a particular namespace to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_getNextSessionMods": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_getUserCacheGeneration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_isSelf": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ _isSelf : 1 } INTERNAL ONLY",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_killOperations": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command -- Kill operations on the target server by OperationKey.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_mergeAuthzCollections": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_migrateClone": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_recvChunkAbort": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_recvChunkCommit": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_recvChunkStart": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_recvChunkStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrAbortReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the shard server. Do not call directly. Aborts any in-progress resharding operations.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCleanupReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the shard server. Do not call directly. Aborts and cleans up any in-progress resharding operations for this collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCloneCatalogData": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCommitReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the shard server. Do not call directly. Commits an in-progress resharding operations",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCreateCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Creates a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCreateCollectionParticipant": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Creates a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Drops a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropCollectionIfUUIDNotMatching": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command aimed to remove stale entries from the local collection catalog.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropCollectionParticipant": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by secondary sharding servers. Do not call directly. Participates in droping a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Drops a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropDatabaseParticipant": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by secondary sharding servers. Do not call directly. Participates in droping a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrMovePrimary": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrRefineCollectionShardKey": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Refines Collection shard key.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrRenameCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Renames a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrRenameCollectionParticipant": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Locally renames a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrRenameCollectionParticipantUnblock": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Releases the critical section of source and target collections.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Reshards a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrReshardingOperationTime": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command used by the resharding coordinator to query the elapsed and remaining time for the active resharding operation on participant shards.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrShardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_transferMods": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "abortTransaction": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Aborts a transaction",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "aggregate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Runs the aggregation command. See http://dochub.mongodb.org/core/aggregation for more details.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "appendOplogNote": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Adds a no-op entry to the oplog",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "applyOps": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal (sharding)\n{ applyOps : [ ] , preCondition : [ { ns : ... , q : ... , res : ... } ] }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "authenticate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "autoSplitVector": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command returning the split points for a chunk, given the maximum chunk size.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "availableQueryOptions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "buildInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get version #, etc.\n{ buildinfo:1 }",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "checkShardingIndex": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command.\n",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "cleanupOrphaned": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "cloneCollectionAsCapped": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ cloneCollectionAsCapped:\u003cfromName\u003e, toCollection:\u003ctoName\u003e, size:\u003csizeInBytes\u003e }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "collMod": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Sets collection options.\nExample: { collMod: 'foo', viewOn: 'bar'} Example: { collMod: 'foo', index: {keyPattern: {a: 1}, expireAfterSeconds: 600} Example: { collMod: 'foo', index: {name: 'bar', expireAfterSeconds: 600} }\n",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "collStats": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ collStats:\"blog.posts\" , scale : 1 } scale divides sizes e.g. for KB use 1024\n    avgObjSize - in bytes",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "commitTransaction": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Commits a transaction",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "compact": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "compact collection\nwarning: this operation locks the database and is slow. you can cancel with killOp()\n{ compact : \u003ccollection_name\u003e, [force:\u003cbool\u003e] }\n  force - allows to run on a replica set primary\n",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "connPoolStats": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "stats about connections between servers in a replica set or sharded cluster.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "connPoolSync": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "connectionStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Returns connection-specific information such as logged-in users and their roles",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "convertToCapped": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ convertToCapped:\u003cfromCollectionName\u003e, size:\u003csizeInBytes\u003e }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "coordinateCommitTransaction": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Coordinates the commit for a transaction. Only called by mongos.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "count": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "count objects in collection",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "create": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "explicitly creates a collection or view\n{\n  create: \u003cstring: collection or view name\u003e [,\n  capped: \u003cbool: capped collection\u003e,\n  autoIndexId: \u003cbool: automatic creation of _id index\u003e,\n  idIndex: \u003cdocument: _id index specification\u003e,\n  size: \u003cint: size in bytes of the capped collection\u003e,\n  max: \u003cint: max number of documents in the capped collection\u003e,\n  storageEngine: \u003cdocument: storage engine configuration\u003e,\n  validator: \u003cdocument: validation rules\u003e,\n  validationLevel: \u003cstring: validation level\u003e,\n  validationAction: \u003cstring: validation action\u003e,\n  indexOptionDefaults: \u003cdocument: default configuration for indexes\u003e,\n  viewOn: \u003cstring: name of source collection or view\u003e,\n  pipeline: \u003carray\u003cobject\u003e: aggregation pipeline stage\u003e,\n  collation: \u003cdocument: default collation for the collection or view\u003e,\n  writeConcern: \u003cdocument: write concern expression for the operation\u003e]\n}",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "createIndexes": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "createRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "createUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "currentOp": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dataSize": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "determine data size for a set of data in a certain range\nexample: { dataSize:\"blog.posts\", keyPattern:{x:1}, min:{x:10}, max:{x:55} }\nmin and max parameters are optional. They must either both be included or both omitted\nkeyPattern is an optional parameter indicating an index pattern that would be usefulfor iterating over the min/max bounds. If keyPattern is omitted, it is inferred from the structure of min. \nnote: This command may take a while to run",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dbHash": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dbStats": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Get stats on a database. Not instantaneous. Slower for databases with large .ns files.\nExample: { dbStats:1, scale:1 }",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "delete": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "delete documents",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "distinct": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ distinct : 'collection name' , key : 'a.b' , query : {} }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "donorAbortMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Abort a migration",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "donorForgetMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Forget a migration",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "donorStartMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Start migrating databases whose names match the specified prefix to the specified replica set.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "driverOIDTest": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "drop": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "drop a collection\n{drop : \u003ccollectionName\u003e}",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "dropAllRolesFromDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dropAllUsersFromDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dropConnections": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Drop egress connections to specified host and port",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dropDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "drop (delete) this database",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "dropIndexes": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "drop indexes for a collection",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "dropRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dropUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "endSessions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "end a set of logical sessions",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "explain": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "explain database reads and writes",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "features": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "return build level feature settings",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "filemd5": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": " example: { filemd5 : ObjectId(aaaaaaa) , root : \"fs\" }",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "find": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "query for documents",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "findAndModify": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ findAndModify: \"collection\", query: {processed:false}, update: {$set: {processed:true}}, new: true}\n{ findAndModify: \"collection\", query: {processed:false}, remove: true, sort: {priority:-1}}\nEither update or remove is required, all other fields have default values.\nOutput is in the \"value\" field\n",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "flushRouterConfig": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Flushes the cached routing information for a single collection, entire database (and its collections) or all databases, which would cause full reload from the config server on the next access.\nUsage:\n{flushRouterConfig: 1} flushes all databases\n{flushRouterConfig: 'db'} flushes only the given database (and its collections)\n{flushRouterconfig: 'db.coll'} flushes only the given collection",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "fsync": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "http://dochub.mongodb.org/core/fsynccommand",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "fsyncUnlock": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getCmdLineOpts": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get argv",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getDatabaseVersion": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": " example: { getDatabaseVersion : 'foo'  } ",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getDefaultRWConcern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get the current read/write concern defaults being applied by this node",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getDiagnosticData": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get latest diagnostic data collection snapshot",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getFreeMonitoringStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Indicates free monitoring status",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getLastError": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "return error status of the last operation on this connection\noptions:\n  { fsync:true } - fsync before returning, or wait for journal commit if running with --journal\n  { j:true } - wait for journal commit if running with --journal\n  { w:n } - await replication to n servers (including self) before returning\n  { w:'majority' } - await replication to majority of set\n  { wtimeout:m} - timeout for w in m milliseconds",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getLog": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ getLog : '*' }  OR { getLog : 'global' }",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getMore": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "retrieve more results from an existing cursor",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "getParameter": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get administrative option(s)\nexample:\n{ getParameter:1, notablescan:1 }\nsupported:\n  AlwaysRecordTraffic\n  KeysRotationIntervalSec\n  ShardingTaskExecutorPoolHostTimeoutMS\n  ShardingTaskExecutorPoolMaxConnecting\n  ShardingTaskExecutorPoolMaxSize\n  ShardingTaskExecutorPoolMinSize\n  ShardingTaskExecutorPoolRefreshRequirementMS\n  ShardingTaskExecutorPoolRefreshTimeoutMS\n  ShardingTaskExecutorPoolReplicaSetMatching\n  TransactionRecordMinimumLifetimeMinutes\n  acceptApiVersion2\n  aggregateOperationResourceConsumptionMetrics\n  allowRolesFromX509Certificates\n  authSchemaVersion\n  authenticationMechanisms\n  authorizationManagerCacheSize\n  authorizationManagerPinnedUsers\n  authorizationManagerPinnedUsersRefreshIntervalMillis\n  automationServiceDescriptor\n  awsEC2InstanceMetadataUrl\n  awsECSInstanceMetadataUrl\n  bgSyncOplogFetcherBatchSize\n  changeSyncSourceThresholdMillis\n  clientCursorMonitorFrequencySecs\n  cloudFreeMonitoringEndpointURL\n  clusterAuthMode\n  collectionBulkLoaderBatchSizeInBytes\n  collectionClonerBatchSize\n  collectionClonerUsesExhaust\n  connPoolMaxConnsPerHost\n  connPoolMaxInUseConnsPerHost\n  connectTimeoutMs\n  coordinateCommitReturnImmediatelyAfterPersistingDecision\n  createRollbackDataFiles\n  cursorTimeoutMillis\n  deprecatedWireOpsWarningPeriodInSeconds\n  diagnosticDataCollectionDirectoryPath\n  diagnosticDataCollectionDirectorySizeMB\n  diagnosticDataCollectionEnableLatencyHistograms\n  diagnosticDataCollectionEnabled\n  diagnosticDataCollectionFileSizeMB\n  diagnosticDataCollectionPeriodMillis\n  diagnosticDataCollectionSamplesPerChunk\n  diagnosticDataCollectionSamplesPerInterimUpdate\n  diagnosticDataCollectionVerboseTCMalloc\n  disableJavaScriptJIT\n  disableLogicalSessionCacheRefresh\n  disableNonSSLConnectionLogging\n  disableNonTLSConnectionLogging\n  disableResumableRangeDeleter\n  disableSplitHorizonIPCheck\n  disabledSecureAllocatorDomains\n  documentUnitSizeBytes\n  enableDefaultWriteConcernUpdatesForInitiate\n  enableElectionHandoff\n  enableFinerGrainedCatalogCacheRefresh\n  enableFlowControl\n  enableIndexBuildCommitQuorum\n  enableLocalhostAuthBypass\n  enableOverrideClusterChainingSetting\n  enableReconfigRollbackCommittedWritesCheck\n  enableResumableIndexBuilds\n  enableSearchMeta\n  enableShardedIndexConsistencyCheck\n  enableTestCommands\n  enableTimeoutOfInactiveSessionCursors\n  enforceUserClusterSeparation\n  featureCompatibilityVersion\n  featureFlagBlender\n  featureFlagChangeStreamsOptimization\n  featureFlagDefaultReadConcernLocal\n  featureFlagDefaultWriteConcernMajority\n  featureFlagDotsAndDollars\n  featureFlagFryer\n  featureFlagLockFreeReads\n  featureFlagResharding\n  featureFlagRetryableFindAndModify\n  featureFlagSearchMeta\n  featureFlagShardedTimeSeries\n  featureFlagShardedTimeSeriesUpdateDelete\n  featureFlagShardingFullDDLSupport\n  featureFlagSpoon\n  featureFlagTenantMigrations\n  featureFlagTimeseriesCollection\n  featureFlagTimeseriesUpdatesAndDeletes\n  featureFlagToaster\n  featureFlagUseSecondaryDelaySecs\n  findChunksOnConfigTimeoutMS\n  fixedServiceExecutorRecursionLimit\n  fixedServiceExecutorThreadLimit\n  flowControlDecayConstant\n  flowControlFudgeFactor\n  flowControlMaxSamples\n  flowControlMinTicketsPerSecond\n  flowControlSamplePeriod\n  flowControlTargetLagSeconds\n  flowControlThresholdLagPercentage\n  flowControlTicketAdderConstant\n  flowControlTicketMultiplierConstant\n  flowControlWarnThresholdSeconds\n  forceRollbackViaRefetch\n  globalConnPoolIdleTimeoutMinutes\n  heapProfilingEnabled\n  heapProfilingSampleIntervalBytes\n  heartBeatFrequencyMs\n  honorSystemUmask\n  indexEntryUnitSizeBytes\n  initialServiceExecutorThreadingModel\n  initialSyncOplogBuffer\n  initialSyncOplogBufferPeekCacheSize\n  initialSyncOplogFetcherBatchSize\n  initialSyncSourceReadPreference\n  initialSyncTransientErrorRetryPeriodSeconds\n  internalDocumentSourceCursorBatchSizeBytes\n  internalDocumentSourceGroupMaxMemoryBytes\n  internalDocumentSourceLookupCacheSizeBytes\n  internalDocumentSourceSetWindowFieldsMaxMemoryBytes\n  internalGeoNearQuery2DMaxCoveringCells\n  internalGeoPredicateQuery2DMaxCoveringCells\n  internalIndexBuildBulkLoadYieldIterations\n  internalInsertMaxBatchSize\n  internalLookupStageIntermediateDocumentMaxSizeBytes\n  internalPipelineLengthLimit\n  internalProhibitShardOperationRetry\n  internalQueryAllowShardedLookup\n  internalQueryAlwaysMergeOnPrimaryShard\n  internalQueryAppendIdToSetWindowFieldsSort\n  internalQueryCacheDisableInactiveEntries\n  internalQueryCacheEvictionRatio\n  internalQueryCacheMaxEntriesPerCollection\n  internalQueryCacheMaxSizeBytesBeforeStripDebugInfo\n  internalQueryCacheSize\n  internalQueryCacheWorksGrowthCoefficient\n  internalQueryDefaultDOP\n  internalQueryDesugarWhereToFunction\n  internalQueryDisableExchange\n  internalQueryEnableCSTParser\n  internalQueryEnableLoggingV2OplogEntries\n  internalQueryEnableSlotBasedExecutionEngine\n  internalQueryEnumerationMaxIntersectPerAnd\n  internalQueryEnumerationMaxOrSolutions\n  internalQueryEnumerationPreferLockstepOrEnumeration\n  internalQueryExecYieldIterations\n  internalQueryExecYieldPeriodMS\n  internalQueryExplainSizeThresholdBytes\n  internalQueryFacetBufferSizeBytes\n  internalQueryFacetMaxOutputDocSizeBytes\n  internalQueryForceIntersectionPlans\n  internalQueryIgnoreUnknownJSONSchemaKeywords\n  internalQueryJavaScriptFnTimeoutMillis\n  internalQueryJavaScriptHeapSizeLimitMB\n  internalQueryMaxAddToSetBytes\n  internalQueryMaxBlockingSortMemoryUsageBytes\n  internalQueryMaxDocValidationErrorConsideredValues\n  internalQueryMaxJsEmitBytes\n  internalQueryMaxPushBytes\n  internalQueryMaxRangeBytes\n  internalQueryMaxScansToExplode\n  internalQueryPlanEvaluationCollFraction\n  internalQueryPlanEvaluationMaxResults\n  internalQueryPlanEvaluationWorks\n  internalQueryPlanOrChildrenIndependently\n  internalQueryPlannerEnableHashIntersection\n  internalQueryPlannerEnableIndexIntersection\n  internalQueryPlannerGenerateCoveredWholeIndexScans\n  internalQueryPlannerMaxIndexedSolutions\n  internalQueryProhibitBlockingMergeOnMongoS\n  internalQueryProhibitMergingOnMongoS\n  internalQueryS2GeoCoarsestLevel\n  internalQueryS2GeoFinestLevel\n  internalQueryS2GeoMaxCells\n  internalQuerySlotBasedExecutionMaxStaticIndexScanIntervals\n  internalValidateFeaturesAsMaster\n  internalValidateFeaturesAsPrimary\n  javascriptProtection\n  journalCommitInterval\n  jsHeapLimitMB\n  loadRoutingTableOnStartup\n  localLogicalSessionTimeoutMinutes\n  localThresholdMs\n  logComponentVerbosity\n  logLevel\n  logicalSessionRefreshMillis\n  maxAcceptableLogicalClockDriftSecs\n  maxBSONDepth\n  maxCatchUpPercentageBeforeBlockingWrites\n  maxIndexBuildDrainBatchSize\n  maxIndexBuildDrainMemoryUsageMegabytes\n  maxIndexBuildMemoryUsageMegabytes\n  maxLogSizeKB\n  maxNumActiveUserIndexBuilds\n  maxNumSyncSourceChangesPerHour\n  maxNumberOfTransactionOperationsInSingleOplogEntry\n  maxOplogTruncationPointsAfterStartup\n  maxOplogTruncationPointsDuringStartup\n  maxSessions\n  maxSyncSourceLagSecs\n  maxTenantMigrationDonorServiceThreadPoolSize\n  maxTenantMigrationRecipientThreadPoolSize\n  maxTimeMSForHedgedReads\n  maxTransactionLockRequestTimeoutMillis\n  maxValidateMBperSec\n  maxValidateMemoryUsageMB\n  metadataRefreshInTransactionMaxWaitBehindCritSecMS\n  migrateCloneInsertionBatchDelayMS\n  migrateCloneInsertionBatchSize\n  migrationLockAcquisitionMaxWaitMS\n  minNumChunksForSessionsCollection\n  minOplogEntriesPerThread\n  minOplogTruncationPoints\n  minSnapshotHistoryWindowInSeconds\n  mirrorReads\n  mongosShutdownTimeoutMillisForSignaledShutdown\n  notablescan\n  numInitialSyncAttempts\n  numInitialSyncConnectAttempts\n  numInitialSyncOplogFindAttempts\n  ocspCacheSize\n  ocspEnabled\n  ocspStaplingRefreshPeriodSecs\n  ocspValidationRefreshPeriodSecs\n  opensslCipherConfig\n  opensslCipherSuiteConfig\n  opensslDiffieHellmanParameters\n  operationMemoryPoolBlockInitialSizeKB\n  operationMemoryPoolBlockMaxSizeKB\n  oplogApplicationEnforcesSteadyStateConstraints\n  oplogFetcherInitialSyncMaxFetcherRestarts\n  oplogFetcherSteadyStateMaxFetcherRestarts\n  oplogFetcherUsesExhaust\n  oplogInitialFindMaxSeconds\n  oplogNetworkTimeoutBufferSeconds\n  oplogRetriedFindMaxSeconds\n  oplogSamplingLogIntervalSeconds\n  oplogTruncationPointSizeMB\n  orphanCleanupDelaySecs\n  periodicNoopIntervalSecs\n  priorityTakeoverFreshnessWindowSeconds\n  processUmask\n  profileOperationResourceConsumptionMetrics\n  quiet\n  rangeDeleterBatchDelayMS\n  rangeDeleterBatchSize\n  readHedgingMode\n  receiveChunkWaitForRangeDeleterTimeoutMS\n  recoverFromOplogAsStandalone\n  recoverToOplogTimestamp\n  remainingReshardingOperationTimeThresholdMillis\n  replBatchLimitBytes\n  replBatchLimitOperations\n  replElectionTimeoutOffsetLimitFraction\n  replWriterMinThreadCount\n  replWriterThreadCount\n  replicaSetMonitorProtocol\n  reportOpWriteConcernCountersInServerStatus\n  requireApiVersion\n  reservedServiceExecutorRecursionLimit\n  reshardingCollectionClonerBatchSizeInBytes\n  reshardingCoordinatorServiceMaxThreadCount\n  reshardingCriticalSectionTimeoutMillis\n  reshardingDonorServiceMaxThreadCount\n  reshardingMinimumOperationDurationMillis\n  reshardingOplogApplierMaxLockRequestTimeoutMillis\n  reshardingOplogBatchLimitBytes\n  reshardingOplogBatchLimitOperations\n  reshardingOplogBatchTaskCount\n  reshardingRecipientServiceMaxThreadCount\n  reshardingTxnClonerProgressBatchSize\n  resumableIndexBuildMajorityOpTimeTimeoutMillis\n  rewriteStateChangeErrors\n  roleGraphInvalidationIsFatal\n  rollbackRemoteOplogQueryBatchSize\n  rollbackTimeLimitSecs\n  saslHostName\n  saslServiceName\n  saslauthdPath\n  scramIterationCount\n  scramSHA256IterationCount\n  scriptingEngineInterruptIntervalMS\n  shardedIndexConsistencyCheckIntervalMS\n  shutdownTimeoutMillisForSignaledShutdown\n  skipCorruptDocumentsWhenCloning\n  skipShardingConfigurationChecks\n  skipShellCursorFinalize\n  sslMode\n  sslWithholdClientCertificate\n  startupAuthSchemaValidation\n  startupRecoveryForRestore\n  storeFindAndModifyImagesInSideCollection\n  suppressNoTLSPeerCertificateWarning\n  syncdelay\n  synchronousServiceExecutorRecursionLimit\n  takeUnstableCheckpointOnShutdown\n  taskExecutorPoolSize\n  tcmallocAggressiveMemoryDecommit\n  tcmallocEnableMarkThreadTemporarilyIdle\n  tcmallocMaxTotalThreadCacheBytes\n  tcmallocReleaseRate\n  tcpFastOpenClient\n  tcpFastOpenQueueSize\n  tcpFastOpenServer\n  tenantApplierBatchSizeBytes\n  tenantApplierBatchSizeOps\n  tenantApplierThreadCount\n  tenantMigrationBlockingStateTimeoutMS\n  tenantMigrationDisableX509Auth\n  tenantMigrationExcludeDonorHostTimeoutMS\n  tenantMigrationExternalKeysRemovalBufferSecs\n  tenantMigrationGarbageCollectionDelayMS\n  tenantMigrationOplogBufferPeekCacheSize\n  tenantMigrationOplogFetcherBatchSize\n  testingDiagnosticsEnabled\n  testingSnapshotBehaviorInIsolation\n  timeseriesBucketMaxCount\n  timeseriesBucketMaxSize\n  timeseriesBucketsCollectionClusterById\n  timeseriesIdleBucketExpiryMemoryUsageThreshold\n  tlsCATrusts\n  tlsMode\n  tlsOCSPStaplingTimeoutSecs\n  tlsOCSPVerifyTimeoutSecs\n  tlsWithholdClientCertificate\n  tlsX509ClusterAuthDNOverride\n  tlsX509ExpirationWarningThresholdDays\n  totalUnitWriteSizeBytes\n  traceExceptions\n  traceWriteConflictExceptions\n  trafficRecordingDirectory\n  transactionLifetimeLimitSeconds\n  transactionSizeLimitBytes\n  ttlMonitorEnabled\n  ttlMonitorSleepSecs\n  useReadOnceCursorsForIndexBuilds\n  waitForSecondaryBeforeNoopWriteMS\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartup\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartupWaitMS\n  watchdogPeriodSeconds\n  wiredTigerConcurrentReadTransactions\n  wiredTigerConcurrentWriteTransactions\n  wiredTigerCursorCacheSize\n  wiredTigerEngineRuntimeConfig\n  wiredTigerFileHandleCloseIdleTime\n  wiredTigerFileHandleCloseMinimum\n  wiredTigerFileHandleCloseScanInterval\n  wiredTigerMaxCacheOverflowSizeGB\n  wiredTigerSessionCloseIdleTimeSecs\n  writePeriodicNoops\n{ getParameter:'*' } to get everything\n",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getShardMap": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "lists the set of shards known to this instance",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getShardVersion": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": " example: { getShardVersion : 'alleyinsider.foo'  } ",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getnonce": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "grantPrivilegesToRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "grantRolesToRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "grantRolesToUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "hello": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Check if this server is primary for a replica set\n{ hello : 1 }",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "hostInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "returns information about the daemon's host",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "insert": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "insert documents",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "internalRenameIfOptionsAndIndexesMatch": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command to rename and check collection options",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "invalidateUserCache": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "isMaster": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Check if this server is primary for a replica set\n{ isMaster : 1 }",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "killAllSessions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "kill all logical sessions, for a user, and their operations",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "killAllSessionsByPattern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "kill logical sessions by pattern",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "killCursors": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Kill a list of cursor ids",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "killOp": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "killSessions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "kill a logical session and its operations",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "listCollections": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "list collections for this db",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "listCommands": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get a list of all db commands",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "listDatabases": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ listDatabases:1, [filter: \u003cfilterObject\u003e] [, nameOnly: true ] }\nlist databases on this server",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "listIndexes": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "list indexes for a collection",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "lockInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "show all lock info on the server",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "logRotate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "logout": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "de-authenticate",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "mapReduce": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Runs the mapReduce command. See http://dochub.mongodb.org/core/mapreduce for details.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "mergeChunks": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command to merge a contiguous range of chunks.\nUsage: { mergeChunks: \u003cns\u003e, epoch: \u003cepoch\u003e, bounds: [\u003cmin key\u003e, \u003cmax key\u003e] }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "moveChunk": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "ping": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "a way to check that the server is alive. responds immediately even if server is in a db lock.",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "planCacheClear": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Drops one or all plan cache entries in a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "planCacheClearFilters": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Clears index filter for a single query shape or, if the query shape is omitted, all filters for the collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "planCacheListFilters": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Displays index filters for all query shapes in a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "planCacheSetFilter": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Sets index filter for a query shape. Overrides existing filter.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "prepareTransaction": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Prepares a transaction on this shard; sent by a router or re-sent by the transaction commit coordinator for a cross-shard transaction",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "profile": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "controls the behaviour of the performance profiler, the fraction of eligible operations which are sampled for logging/profiling, and the threshold duration at which ops become eligible. See http://docs.mongodb.org/manual/reference/command/profile",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "reIndex": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "re-index a collection (can only be run on a standalone mongod)",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "recipientForgetMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Interrupts tenant migration data sync and marks that the recipient's durable state machine may be garbage collected.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "recipientSyncData": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal replica set command; instructs the recipient to sync data as part of a tenant migration.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "refreshSessions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "renew a set of logical sessions",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "renameCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": " example: { renameCollection: foo.a, to: bar.b }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "repairDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "This command has been removed. If you would like to compact your data, use the 'compact' command. If you would like to rebuild indexes, use the 'reIndex' command. If you need to recover data, please see the documentation for repairing your database offline: http://dochub.mongodb.org/core/repair",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetAbortPrimaryCatchUp": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ CmdReplSetAbortPrimaryCatchUp : 1 }\nAbort primary catch-up mode; immediately finish the transition to primary without fetching any further unreplicated writes from any other online nodes",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetFreeze": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ replSetFreeze : \u003cseconds\u003e }\n'freeze' state of member to the extent we can do that.  What this really means is that\nthis node will not attempt to become primary until the time period specified expires.\nYou can call again with {replSetFreeze:0} to unfreeze sooner.\nA process restart unfreezes the member also.\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetGetConfig": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Returns the current replica set configuration{ replSetGetConfig : 1 }\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetGetRBID": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetGetStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Report status of a replica set from the POV of this server\n{ replSetGetStatus : 1 }\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetHeartbeat": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetInitiate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Initiate/christen a replica set.\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetMaintenance": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ replSetMaintenance : bool }\nEnable or disable maintenance mode.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetReconfig": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Adjust configuration of a replica set\n{ replSetReconfig : config_object }\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetRequestVotes": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetResizeOplog": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Resize oplog using size (in MBs) and optionally, retention (in terms of hours)",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetStepDown": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ replSetStepDown : \u003cseconds\u003e }\nStep down as primary.  Will not try to reelect self for the specified time period (1 minute if no numeric secs value specified, or secs is 0).\n(If another member with same priority takes over in the meantime, it will stay primary.)\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetStepUp": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetSyncFrom": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ replSetSyncFrom : \"host:port\" }\nChange who this member is syncing from. Note: This will interrupt and restart an in-progress initial sync.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetUpdatePosition": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "revokePrivilegesFromRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "revokeRolesFromRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "revokeRolesFromUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "rolesInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "rotateCertificates": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Rotate certificates for new SSL connections",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "saslContinue": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Subsequent steps in a SASL authentication conversation.",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "saslStart": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "First step in a SASL authentication conversation.",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "serverStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "returns lots of administrative server statistics",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setDefaultRWConcern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "set the current read/write concern defaults (cluster-wide)",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setFeatureCompatibilityVersion": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Set the featureCompatibilityVersion used by this cluster. If set to '4.4', then features introduced in versions greater than '4.4' will be disabled If set to '4.9', then features introduced in '5.0' will be disabled. If set to '5.0', then '5.0' features are enabled, and all nodes in the cluster must be binary version 5.0. See https://docs.mongodb.com/master/release-notes/4.4-compatibility/#feature-compatibility.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setFreeMonitoring": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "enable or disable Free Monitoring",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setIndexCommitQuorum": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Resets the commitQuorum for the given index builds in a collection. Usage:\n{\n    setIndexCommitQuorum: \u003cstring\u003e collection name,\n    indexNames: array\u003cstring\u003e list of index names,\n    commitQuorum: \u003cstring|number|object\u003e option to define the required quorum for\n                  the index builds to commit\n}",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setParameter": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "set administrative option(s)\n{ setParameter:1, \u003cparam\u003e:\u003cvalue\u003e }\nsupported:\n  AlwaysRecordTraffic\n  KeysRotationIntervalSec\n  ShardingTaskExecutorPoolHostTimeoutMS\n  ShardingTaskExecutorPoolMaxConnecting\n  ShardingTaskExecutorPoolMaxSize\n  ShardingTaskExecutorPoolMinSize\n  ShardingTaskExecutorPoolRefreshRequirementMS\n  ShardingTaskExecutorPoolRefreshTimeoutMS\n  ShardingTaskExecutorPoolReplicaSetMatching\n  TransactionRecordMinimumLifetimeMinutes\n  acceptApiVersion2\n  aggregateOperationResourceConsumptionMetrics\n  allowRolesFromX509Certificates\n  authSchemaVersion\n  authenticationMechanisms\n  authorizationManagerCacheSize\n  authorizationManagerPinnedUsers\n  authorizationManagerPinnedUsersRefreshIntervalMillis\n  automationServiceDescriptor\n  awsEC2InstanceMetadataUrl\n  awsECSInstanceMetadataUrl\n  bgSyncOplogFetcherBatchSize\n  changeSyncSourceThresholdMillis\n  clientCursorMonitorFrequencySecs\n  cloudFreeMonitoringEndpointURL\n  clusterAuthMode\n  collectionBulkLoaderBatchSizeInBytes\n  collectionClonerBatchSize\n  collectionClonerUsesExhaust\n  connPoolMaxConnsPerHost\n  connPoolMaxInUseConnsPerHost\n  connectTimeoutMs\n  coordinateCommitReturnImmediatelyAfterPersistingDecision\n  createRollbackDataFiles\n  cursorTimeoutMillis\n  deprecatedWireOpsWarningPeriodInSeconds\n  diagnosticDataCollectionDirectoryPath\n  diagnosticDataCollectionDirectorySizeMB\n  diagnosticDataCollectionEnableLatencyHistograms\n  diagnosticDataCollectionEnabled\n  diagnosticDataCollectionFileSizeMB\n  diagnosticDataCollectionPeriodMillis\n  diagnosticDataCollectionSamplesPerChunk\n  diagnosticDataCollectionSamplesPerInterimUpdate\n  diagnosticDataCollectionVerboseTCMalloc\n  disableJavaScriptJIT\n  disableLogicalSessionCacheRefresh\n  disableNonSSLConnectionLogging\n  disableNonTLSConnectionLogging\n  disableResumableRangeDeleter\n  disableSplitHorizonIPCheck\n  disabledSecureAllocatorDomains\n  documentUnitSizeBytes\n  enableDefaultWriteConcernUpdatesForInitiate\n  enableElectionHandoff\n  enableFinerGrainedCatalogCacheRefresh\n  enableFlowControl\n  enableIndexBuildCommitQuorum\n  enableLocalhostAuthBypass\n  enableOverrideClusterChainingSetting\n  enableReconfigRollbackCommittedWritesCheck\n  enableResumableIndexBuilds\n  enableSearchMeta\n  enableShardedIndexConsistencyCheck\n  enableTestCommands\n  enableTimeoutOfInactiveSessionCursors\n  enforceUserClusterSeparation\n  featureCompatibilityVersion\n  featureFlagBlender\n  featureFlagChangeStreamsOptimization\n  featureFlagDefaultReadConcernLocal\n  featureFlagDefaultWriteConcernMajority\n  featureFlagDotsAndDollars\n  featureFlagFryer\n  featureFlagLockFreeReads\n  featureFlagResharding\n  featureFlagRetryableFindAndModify\n  featureFlagSearchMeta\n  featureFlagShardedTimeSeries\n  featureFlagShardedTimeSeriesUpdateDelete\n  featureFlagShardingFullDDLSupport\n  featureFlagSpoon\n  featureFlagTenantMigrations\n  featureFlagTimeseriesCollection\n  featureFlagTimeseriesUpdatesAndDeletes\n  featureFlagToaster\n  featureFlagUseSecondaryDelaySecs\n  findChunksOnConfigTimeoutMS\n  fixedServiceExecutorRecursionLimit\n  fixedServiceExecutorThreadLimit\n  flowControlDecayConstant\n  flowControlFudgeFactor\n  flowControlMaxSamples\n  flowControlMinTicketsPerSecond\n  flowControlSamplePeriod\n  flowControlTargetLagSeconds\n  flowControlThresholdLagPercentage\n  flowControlTicketAdderConstant\n  flowControlTicketMultiplierConstant\n  flowControlWarnThresholdSeconds\n  forceRollbackViaRefetch\n  globalConnPoolIdleTimeoutMinutes\n  heapProfilingEnabled\n  heapProfilingSampleIntervalBytes\n  heartBeatFrequencyMs\n  honorSystemUmask\n  indexEntryUnitSizeBytes\n  initialServiceExecutorThreadingModel\n  initialSyncOplogBuffer\n  initialSyncOplogBufferPeekCacheSize\n  initialSyncOplogFetcherBatchSize\n  initialSyncSourceReadPreference\n  initialSyncTransientErrorRetryPeriodSeconds\n  internalDocumentSourceCursorBatchSizeBytes\n  internalDocumentSourceGroupMaxMemoryBytes\n  internalDocumentSourceLookupCacheSizeBytes\n  internalDocumentSourceSetWindowFieldsMaxMemoryBytes\n  internalGeoNearQuery2DMaxCoveringCells\n  internalGeoPredicateQuery2DMaxCoveringCells\n  internalIndexBuildBulkLoadYieldIterations\n  internalInsertMaxBatchSize\n  internalLookupStageIntermediateDocumentMaxSizeBytes\n  internalPipelineLengthLimit\n  internalProhibitShardOperationRetry\n  internalQueryAllowShardedLookup\n  internalQueryAlwaysMergeOnPrimaryShard\n  internalQueryAppendIdToSetWindowFieldsSort\n  internalQueryCacheDisableInactiveEntries\n  internalQueryCacheEvictionRatio\n  internalQueryCacheMaxEntriesPerCollection\n  internalQueryCacheMaxSizeBytesBeforeStripDebugInfo\n  internalQueryCacheSize\n  internalQueryCacheWorksGrowthCoefficient\n  internalQueryDefaultDOP\n  internalQueryDesugarWhereToFunction\n  internalQueryDisableExchange\n  internalQueryEnableCSTParser\n  internalQueryEnableLoggingV2OplogEntries\n  internalQueryEnableSlotBasedExecutionEngine\n  internalQueryEnumerationMaxIntersectPerAnd\n  internalQueryEnumerationMaxOrSolutions\n  internalQueryEnumerationPreferLockstepOrEnumeration\n  internalQueryExecYieldIterations\n  internalQueryExecYieldPeriodMS\n  internalQueryExplainSizeThresholdBytes\n  internalQueryFacetBufferSizeBytes\n  internalQueryFacetMaxOutputDocSizeBytes\n  internalQueryForceIntersectionPlans\n  internalQueryIgnoreUnknownJSONSchemaKeywords\n  internalQueryJavaScriptFnTimeoutMillis\n  internalQueryJavaScriptHeapSizeLimitMB\n  internalQueryMaxAddToSetBytes\n  internalQueryMaxBlockingSortMemoryUsageBytes\n  internalQueryMaxDocValidationErrorConsideredValues\n  internalQueryMaxJsEmitBytes\n  internalQueryMaxPushBytes\n  internalQueryMaxRangeBytes\n  internalQueryMaxScansToExplode\n  internalQueryPlanEvaluationCollFraction\n  internalQueryPlanEvaluationMaxResults\n  internalQueryPlanEvaluationWorks\n  internalQueryPlanOrChildrenIndependently\n  internalQueryPlannerEnableHashIntersection\n  internalQueryPlannerEnableIndexIntersection\n  internalQueryPlannerGenerateCoveredWholeIndexScans\n  internalQueryPlannerMaxIndexedSolutions\n  internalQueryProhibitBlockingMergeOnMongoS\n  internalQueryProhibitMergingOnMongoS\n  internalQueryS2GeoCoarsestLevel\n  internalQueryS2GeoFinestLevel\n  internalQueryS2GeoMaxCells\n  internalQuerySlotBasedExecutionMaxStaticIndexScanIntervals\n  internalValidateFeaturesAsMaster\n  internalValidateFeaturesAsPrimary\n  javascriptProtection\n  journalCommitInterval\n  jsHeapLimitMB\n  loadRoutingTableOnStartup\n  localLogicalSessionTimeoutMinutes\n  localThresholdMs\n  logComponentVerbosity\n  logLevel\n  logicalSessionRefreshMillis\n  maxAcceptableLogicalClockDriftSecs\n  maxBSONDepth\n  maxCatchUpPercentageBeforeBlockingWrites\n  maxIndexBuildDrainBatchSize\n  maxIndexBuildDrainMemoryUsageMegabytes\n  maxIndexBuildMemoryUsageMegabytes\n  maxLogSizeKB\n  maxNumActiveUserIndexBuilds\n  maxNumSyncSourceChangesPerHour\n  maxNumberOfTransactionOperationsInSingleOplogEntry\n  maxOplogTruncationPointsAfterStartup\n  maxOplogTruncationPointsDuringStartup\n  maxSessions\n  maxSyncSourceLagSecs\n  maxTenantMigrationDonorServiceThreadPoolSize\n  maxTenantMigrationRecipientThreadPoolSize\n  maxTimeMSForHedgedReads\n  maxTransactionLockRequestTimeoutMillis\n  maxValidateMBperSec\n  maxValidateMemoryUsageMB\n  metadataRefreshInTransactionMaxWaitBehindCritSecMS\n  migrateCloneInsertionBatchDelayMS\n  migrateCloneInsertionBatchSize\n  migrationLockAcquisitionMaxWaitMS\n  minNumChunksForSessionsCollection\n  minOplogEntriesPerThread\n  minOplogTruncationPoints\n  minSnapshotHistoryWindowInSeconds\n  mirrorReads\n  mongosShutdownTimeoutMillisForSignaledShutdown\n  notablescan\n  numInitialSyncAttempts\n  numInitialSyncConnectAttempts\n  numInitialSyncOplogFindAttempts\n  ocspCacheSize\n  ocspEnabled\n  ocspStaplingRefreshPeriodSecs\n  ocspValidationRefreshPeriodSecs\n  opensslCipherConfig\n  opensslCipherSuiteConfig\n  opensslDiffieHellmanParameters\n  operationMemoryPoolBlockInitialSizeKB\n  operationMemoryPoolBlockMaxSizeKB\n  oplogApplicationEnforcesSteadyStateConstraints\n  oplogFetcherInitialSyncMaxFetcherRestarts\n  oplogFetcherSteadyStateMaxFetcherRestarts\n  oplogFetcherUsesExhaust\n  oplogInitialFindMaxSeconds\n  oplogNetworkTimeoutBufferSeconds\n  oplogRetriedFindMaxSeconds\n  oplogSamplingLogIntervalSeconds\n  oplogTruncationPointSizeMB\n  orphanCleanupDelaySecs\n  periodicNoopIntervalSecs\n  priorityTakeoverFreshnessWindowSeconds\n  processUmask\n  profileOperationResourceConsumptionMetrics\n  quiet\n  rangeDeleterBatchDelayMS\n  rangeDeleterBatchSize\n  readHedgingMode\n  receiveChunkWaitForRangeDeleterTimeoutMS\n  recoverFromOplogAsStandalone\n  recoverToOplogTimestamp\n  remainingReshardingOperationTimeThresholdMillis\n  replBatchLimitBytes\n  replBatchLimitOperations\n  replElectionTimeoutOffsetLimitFraction\n  replWriterMinThreadCount\n  replWriterThreadCount\n  replicaSetMonitorProtocol\n  reportOpWriteConcernCountersInServerStatus\n  requireApiVersion\n  reservedServiceExecutorRecursionLimit\n  reshardingCollectionClonerBatchSizeInBytes\n  reshardingCoordinatorServiceMaxThreadCount\n  reshardingCriticalSectionTimeoutMillis\n  reshardingDonorServiceMaxThreadCount\n  reshardingMinimumOperationDurationMillis\n  reshardingOplogApplierMaxLockRequestTimeoutMillis\n  reshardingOplogBatchLimitBytes\n  reshardingOplogBatchLimitOperations\n  reshardingOplogBatchTaskCount\n  reshardingRecipientServiceMaxThreadCount\n  reshardingTxnClonerProgressBatchSize\n  resumableIndexBuildMajorityOpTimeTimeoutMillis\n  rewriteStateChangeErrors\n  roleGraphInvalidationIsFatal\n  rollbackRemoteOplogQueryBatchSize\n  rollbackTimeLimitSecs\n  saslHostName\n  saslServiceName\n  saslauthdPath\n  scramIterationCount\n  scramSHA256IterationCount\n  scriptingEngineInterruptIntervalMS\n  shardedIndexConsistencyCheckIntervalMS\n  shutdownTimeoutMillisForSignaledShutdown\n  skipCorruptDocumentsWhenCloning\n  skipShardingConfigurationChecks\n  skipShellCursorFinalize\n  sslMode\n  sslWithholdClientCertificate\n  startupAuthSchemaValidation\n  startupRecoveryForRestore\n  storeFindAndModifyImagesInSideCollection\n  suppressNoTLSPeerCertificateWarning\n  syncdelay\n  synchronousServiceExecutorRecursionLimit\n  takeUnstableCheckpointOnShutdown\n  taskExecutorPoolSize\n  tcmallocAggressiveMemoryDecommit\n  tcmallocEnableMarkThreadTemporarilyIdle\n  tcmallocMaxTotalThreadCacheBytes\n  tcmallocReleaseRate\n  tcpFastOpenClient\n  tcpFastOpenQueueSize\n  tcpFastOpenServer\n  tenantApplierBatchSizeBytes\n  tenantApplierBatchSizeOps\n  tenantApplierThreadCount\n  tenantMigrationBlockingStateTimeoutMS\n  tenantMigrationDisableX509Auth\n  tenantMigrationExcludeDonorHostTimeoutMS\n  tenantMigrationExternalKeysRemovalBufferSecs\n  tenantMigrationGarbageCollectionDelayMS\n  tenantMigrationOplogBufferPeekCacheSize\n  tenantMigrationOplogFetcherBatchSize\n  testingDiagnosticsEnabled\n  testingSnapshotBehaviorInIsolation\n  timeseriesBucketMaxCount\n  timeseriesBucketMaxSize\n  timeseriesBucketsCollectionClusterById\n  timeseriesIdleBucketExpiryMemoryUsageThreshold\n  tlsCATrusts\n  tlsMode\n  tlsOCSPStaplingTimeoutSecs\n  tlsOCSPVerifyTimeoutSecs\n  tlsWithholdClientCertificate\n  tlsX509ClusterAuthDNOverride\n  tlsX509ExpirationWarningThresholdDays\n  totalUnitWriteSizeBytes\n  traceExceptions\n  traceWriteConflictExceptions\n  trafficRecordingDirectory\n  transactionLifetimeLimitSeconds\n  transactionSizeLimitBytes\n  ttlMonitorEnabled\n  ttlMonitorSleepSecs\n  useReadOnceCursorsForIndexBuilds\n  waitForSecondaryBeforeNoopWriteMS\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartup\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartupWaitMS\n  watchdogPeriodSeconds\n  wiredTigerConcurrentReadTransactions\n  wiredTigerConcurrentWriteTransactions\n  wiredTigerCursorCacheSize\n  wiredTigerEngineRuntimeConfig\n  wiredTigerFileHandleCloseIdleTime\n  wiredTigerFileHandleCloseMinimum\n  wiredTigerFileHandleCloseScanInterval\n  wiredTigerMaxCacheOverflowSizeGB\n  wiredTigerSessionCloseIdleTimeSecs\n  writePeriodicNoops\n",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setShardVersion": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "shardingState": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "shutdown": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Shuts down the database. Must be run against the admin database and either (1) run from localhost or (2) run while authenticated with the shutdown privilege. If the node is the primary of a replica set, waits up to 'timeoutSecs' for an electable node to be caught up before stepping down. If 'force' is false and no electable node was able to catch up, does not shut down. If the node is in state SECONDARY after the attempted stepdown, any remaining time in 'timeoutSecs' is used for quiesce mode, where the database continues to allow operations to run, but directs clients to route new operations to other replica set members.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "splitChunk": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal command usage only\nexample:\n { splitChunk:\"db.foo\" , keyPattern: {a:1} , min : {a:100} , max: {a:200} { splitKeys : [ {a:150} , ... ]}",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "splitVector": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command.\nexamples:\n  { splitVector : \"blog.post\" , keyPattern:{x:1} , min:{x:10} , max:{x:20}, maxChunkSize:200 }\n  maxChunkSize unit in MBs\n  May optionally specify 'maxSplitPoints' and 'maxChunkObjects' to avoid traversing the whole chunk\n  \n  { splitVector : \"blog.post\" , keyPattern:{x:1} , min:{x:10} , max:{x:20}, force: true }\n  'force' will produce one split point even if data is small; defaults to false\nNOTE: This command may take a while to run",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "startRecordingTraffic": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "startSession": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "start a logical session",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "stopRecordingTraffic": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "top": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "usage by collection, in micros ",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "update": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "update documents",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "updateRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "updateUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "usersInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "validate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Validate contents of a namespace by scanning its data structures for correctness.\nThis is a slow operation.\n\tAdd {full: true} option to do a more thorough check.\n\tAdd {background: true} to validate in the background.\n\tAdd {repair: true} to run repair mode.\nCannot specify both {full: true, background: true}.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "validateDBMetadata": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "validateDBMetadata checks that the stored metadata of a database/collection is valid within a particular API version. If 'db' parameter is specified, only runs validation against that database, if not the validation will be run againt all dbs. Similarly if 'collection' parameter is specified, the validation is only run against that collection, if not the validation is run against all collections.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "voteCommitIndexBuild": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal intra replica set command",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "waitForFailPoint": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "wait for a fail point to be entered a certain number of times",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "whatsmyuri": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{whatsmyuri:1}",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          }
         },




2021-12-16T21:38:39.673Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 clientconn/conn.go:162	Request header:
{
  "MessageLength": 52,
  "RequestID": 10,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:39.674Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "$db"
        ],
        "ismaster": true,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:39.674Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 clientconn/conn.go:175	Response header:
{
  "MessageLength": 190,
  "RequestID": 2,
  "ResponseTo": 10,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:39.676Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690719674
        },
        "minWireVersion": 13,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:39.677Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 304,
  "RequestID": 163,
  "ResponseTo": 10,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:39.678Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "topologyVersion",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "logicalSessionTimeoutMinutes",
          "connectionId",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "topologyVersion": {
          "$k": [
            "processId",
            "counter"
          ],
          "processId": {
            "$o": "61bbb0c97437c3a34c46c94d"
          },
          "counter": {
            "$l": "0"
          }
        },
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690719676
        },
        "logicalSessionTimeoutMinutes": 30,
        "connectionId": 43,
        "minWireVersion": 0,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:39.681Z	INFO	// 172.20.0.3:43484 -> 172.17.0.1:27017 clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 190,
-  "RequestID": 2,
+  "MessageLength": 304,
+  "RequestID": 163,
   "ResponseTo": 10,
@@ -14,2 +14,3 @@
           "ismaster",
+          "topologyVersion",
           "maxBsonObjectSize",
@@ -18,2 +19,4 @@
           "localTime",
+          "logicalSessionTimeoutMinutes",
+          "connectionId",
           "minWireVersion",
@@ -24,2 +27,14 @@
         "ismaster": true,
+        "topologyVersion": {
+          "$k": [
+            "processId",
+            "counter"
+          ],
+          "processId": {
+            "$o": "61bbb0c97437c3a34c46c94d"
+          },
+          "counter": {
+            "$l": "0"
+          }
+        },
         "maxBsonObjectSize": 16777216,
@@ -28,5 +43,7 @@
         "localTime": {
-          "$d": 1639690719674
+          "$d": 1639690719676
         },
-        "minWireVersion": 13,
+        "logicalSessionTimeoutMinutes": 30,
+        "connectionId": 43,
+        "minWireVersion": 0,
         "maxWireVersion": 13,




2021-12-16T21:38:49.686Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:162	Request header:
{
  "MessageLength": 52,
  "RequestID": 11,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:49.687Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "$db"
        ],
        "ismaster": true,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:49.687Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:175	Response header:
{
  "MessageLength": 190,
  "RequestID": 3,
  "ResponseTo": 11,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:49.688Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690729687
        },
        "minWireVersion": 13,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:49.690Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 304,
  "RequestID": 164,
  "ResponseTo": 11,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:49.691Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "topologyVersion",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "logicalSessionTimeoutMinutes",
          "connectionId",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "topologyVersion": {
          "$k": [
            "processId",
            "counter"
          ],
          "processId": {
            "$o": "61bbb0c97437c3a34c46c94d"
          },
          "counter": {
            "$l": "0"
          }
        },
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690729689
        },
        "logicalSessionTimeoutMinutes": 30,
        "connectionId": 43,
        "minWireVersion": 0,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:49.694Z	INFO	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 190,
-  "RequestID": 3,
+  "MessageLength": 304,
+  "RequestID": 164,
   "ResponseTo": 11,
@@ -14,2 +14,3 @@
           "ismaster",
+          "topologyVersion",
           "maxBsonObjectSize",
@@ -18,2 +19,4 @@
           "localTime",
+          "logicalSessionTimeoutMinutes",
+          "connectionId",
           "minWireVersion",
@@ -24,2 +27,14 @@
         "ismaster": true,
+        "topologyVersion": {
+          "$k": [
+            "processId",
+            "counter"
+          ],
+          "processId": {
+            "$o": "61bbb0c97437c3a34c46c94d"
+          },
+          "counter": {
+            "$l": "0"
+          }
+        },
         "maxBsonObjectSize": 16777216,
@@ -28,5 +43,7 @@
         "localTime": {
-          "$d": 1639690729687
+          "$d": 1639690729689
         },
-        "minWireVersion": 13,
+        "logicalSessionTimeoutMinutes": 30,
+        "connectionId": 43,
+        "minWireVersion": 0,
         "maxWireVersion": 13,




2021-12-16T21:38:59.706Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:162	Request header:
{
  "MessageLength": 52,
  "RequestID": 12,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:59.706Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "$db"
        ],
        "ismaster": true,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:59.707Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:175	Response header:
{
  "MessageLength": 190,
  "RequestID": 4,
  "ResponseTo": 12,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:59.708Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690739707
        },
        "minWireVersion": 13,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:59.710Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 304,
  "RequestID": 165,
  "ResponseTo": 12,
  "OpCode": "OP_MSG"
}
2021-12-16T21:38:59.711Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "topologyVersion",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "logicalSessionTimeoutMinutes",
          "connectionId",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "topologyVersion": {
          "$k": [
            "processId",
            "counter"
          ],
          "processId": {
            "$o": "61bbb0c97437c3a34c46c94d"
          },
          "counter": {
            "$l": "0"
          }
        },
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690739709
        },
        "logicalSessionTimeoutMinutes": 30,
        "connectionId": 43,
        "minWireVersion": 0,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:38:59.714Z	INFO	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 190,
-  "RequestID": 4,
+  "MessageLength": 304,
+  "RequestID": 165,
   "ResponseTo": 12,
@@ -14,2 +14,3 @@
           "ismaster",
+          "topologyVersion",
           "maxBsonObjectSize",
@@ -18,2 +19,4 @@
           "localTime",
+          "logicalSessionTimeoutMinutes",
+          "connectionId",
           "minWireVersion",
@@ -24,2 +27,14 @@
         "ismaster": true,
+        "topologyVersion": {
+          "$k": [
+            "processId",
+            "counter"
+          ],
+          "processId": {
+            "$o": "61bbb0c97437c3a34c46c94d"
+          },
+          "counter": {
+            "$l": "0"
+          }
+        },
         "maxBsonObjectSize": 16777216,
@@ -28,5 +43,7 @@
         "localTime": {
-          "$d": 1639690739707
+          "$d": 1639690739709
         },
-        "minWireVersion": 13,
+        "logicalSessionTimeoutMinutes": 30,
+        "connectionId": 43,
+        "minWireVersion": 0,
         "maxWireVersion": 13,




2021-12-16T21:39:09.716Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:162	Request header:
{
  "MessageLength": 52,
  "RequestID": 13,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:09.716Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "$db"
        ],
        "ismaster": true,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:09.717Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:175	Response header:
{
  "MessageLength": 190,
  "RequestID": 5,
  "ResponseTo": 13,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:09.718Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690749716
        },
        "minWireVersion": 13,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:09.719Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 304,
  "RequestID": 170,
  "ResponseTo": 13,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:09.720Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "topologyVersion",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "logicalSessionTimeoutMinutes",
          "connectionId",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "topologyVersion": {
          "$k": [
            "processId",
            "counter"
          ],
          "processId": {
            "$o": "61bbb0c97437c3a34c46c94d"
          },
          "counter": {
            "$l": "0"
          }
        },
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690749718
        },
        "logicalSessionTimeoutMinutes": 30,
        "connectionId": 43,
        "minWireVersion": 0,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:09.723Z	INFO	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 190,
-  "RequestID": 5,
+  "MessageLength": 304,
+  "RequestID": 170,
   "ResponseTo": 13,
@@ -14,2 +14,3 @@
           "ismaster",
+          "topologyVersion",
           "maxBsonObjectSize",
@@ -18,2 +19,4 @@
           "localTime",
+          "logicalSessionTimeoutMinutes",
+          "connectionId",
           "minWireVersion",
@@ -24,2 +27,14 @@
         "ismaster": true,
+        "topologyVersion": {
+          "$k": [
+            "processId",
+            "counter"
+          ],
+          "processId": {
+            "$o": "61bbb0c97437c3a34c46c94d"
+          },
+          "counter": {
+            "$l": "0"
+          }
+        },
         "maxBsonObjectSize": 16777216,
@@ -28,5 +43,7 @@
         "localTime": {
-          "$d": 1639690749716
+          "$d": 1639690749718
         },
-        "minWireVersion": 13,
+        "logicalSessionTimeoutMinutes": 30,
+        "connectionId": 43,
+        "minWireVersion": 0,
         "maxWireVersion": 13,




2021-12-16T21:39:19.733Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:162	Request header:
{
  "MessageLength": 52,
  "RequestID": 14,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:19.733Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "$db"
        ],
        "ismaster": true,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:19.734Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:175	Response header:
{
  "MessageLength": 190,
  "RequestID": 6,
  "ResponseTo": 14,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:19.735Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690759733
        },
        "minWireVersion": 13,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:19.736Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 304,
  "RequestID": 171,
  "ResponseTo": 14,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:19.738Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "topologyVersion",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "logicalSessionTimeoutMinutes",
          "connectionId",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "topologyVersion": {
          "$k": [
            "processId",
            "counter"
          ],
          "processId": {
            "$o": "61bbb0c97437c3a34c46c94d"
          },
          "counter": {
            "$l": "0"
          }
        },
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690759735
        },
        "logicalSessionTimeoutMinutes": 30,
        "connectionId": 43,
        "minWireVersion": 0,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:19.741Z	INFO	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 190,
-  "RequestID": 6,
+  "MessageLength": 304,
+  "RequestID": 171,
   "ResponseTo": 14,
@@ -14,2 +14,3 @@
           "ismaster",
+          "topologyVersion",
           "maxBsonObjectSize",
@@ -18,2 +19,4 @@
           "localTime",
+          "logicalSessionTimeoutMinutes",
+          "connectionId",
           "minWireVersion",
@@ -24,2 +27,14 @@
         "ismaster": true,
+        "topologyVersion": {
+          "$k": [
+            "processId",
+            "counter"
+          ],
+          "processId": {
+            "$o": "61bbb0c97437c3a34c46c94d"
+          },
+          "counter": {
+            "$l": "0"
+          }
+        },
         "maxBsonObjectSize": 16777216,
@@ -28,5 +43,7 @@
         "localTime": {
-          "$d": 1639690759733
+          "$d": 1639690759735
         },
-        "minWireVersion": 13,
+        "logicalSessionTimeoutMinutes": 30,
+        "connectionId": 43,
+        "minWireVersion": 0,
         "maxWireVersion": 13,




2021-12-16T21:39:29.749Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:162	Request header:
{
  "MessageLength": 52,
  "RequestID": 15,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:29.750Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "$db"
        ],
        "ismaster": true,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:29.750Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:175	Response header:
{
  "MessageLength": 190,
  "RequestID": 7,
  "ResponseTo": 15,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:29.751Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690769750
        },
        "minWireVersion": 13,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:29.753Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 304,
  "RequestID": 172,
  "ResponseTo": 15,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:29.755Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "topologyVersion",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "logicalSessionTimeoutMinutes",
          "connectionId",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "topologyVersion": {
          "$k": [
            "processId",
            "counter"
          ],
          "processId": {
            "$o": "61bbb0c97437c3a34c46c94d"
          },
          "counter": {
            "$l": "0"
          }
        },
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690769752
        },
        "logicalSessionTimeoutMinutes": 30,
        "connectionId": 43,
        "minWireVersion": 0,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:29.759Z	INFO	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 190,
-  "RequestID": 7,
+  "MessageLength": 304,
+  "RequestID": 172,
   "ResponseTo": 15,
@@ -14,2 +14,3 @@
           "ismaster",
+          "topologyVersion",
           "maxBsonObjectSize",
@@ -18,2 +19,4 @@
           "localTime",
+          "logicalSessionTimeoutMinutes",
+          "connectionId",
           "minWireVersion",
@@ -24,2 +27,14 @@
         "ismaster": true,
+        "topologyVersion": {
+          "$k": [
+            "processId",
+            "counter"
+          ],
+          "processId": {
+            "$o": "61bbb0c97437c3a34c46c94d"
+          },
+          "counter": {
+            "$l": "0"
+          }
+        },
         "maxBsonObjectSize": 16777216,
@@ -28,5 +43,7 @@
         "localTime": {
-          "$d": 1639690769750
+          "$d": 1639690769752
         },
-        "minWireVersion": 13,
+        "logicalSessionTimeoutMinutes": 30,
+        "connectionId": 43,
+        "minWireVersion": 0,
         "maxWireVersion": 13,




^A2021-12-16T21:39:39.761Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:162	Request header:
{
  "MessageLength": 52,
  "RequestID": 16,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:39.762Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "$db"
        ],
        "ismaster": true,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:39.763Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:175	Response header:
{
  "MessageLength": 190,
  "RequestID": 8,
  "ResponseTo": 16,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:39.764Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690779762
        },
        "minWireVersion": 13,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:39.766Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 304,
  "RequestID": 173,
  "ResponseTo": 16,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:39.768Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "topologyVersion",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "logicalSessionTimeoutMinutes",
          "connectionId",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "topologyVersion": {
          "$k": [
            "processId",
            "counter"
          ],
          "processId": {
            "$o": "61bbb0c97437c3a34c46c94d"
          },
          "counter": {
            "$l": "0"
          }
        },
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690779765
        },
        "logicalSessionTimeoutMinutes": 30,
        "connectionId": 43,
        "minWireVersion": 0,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:39.771Z	INFO	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 190,
-  "RequestID": 8,
+  "MessageLength": 304,
+  "RequestID": 173,
   "ResponseTo": 16,
@@ -14,2 +14,3 @@
           "ismaster",
+          "topologyVersion",
           "maxBsonObjectSize",
@@ -18,2 +19,4 @@
           "localTime",
+          "logicalSessionTimeoutMinutes",
+          "connectionId",
           "minWireVersion",
@@ -24,2 +27,14 @@
         "ismaster": true,
+        "topologyVersion": {
+          "$k": [
+            "processId",
+            "counter"
+          ],
+          "processId": {
+            "$o": "61bbb0c97437c3a34c46c94d"
+          },
+          "counter": {
+            "$l": "0"
+          }
+        },
         "maxBsonObjectSize": 16777216,
@@ -28,5 +43,7 @@
         "localTime": {
-          "$d": 1639690779762
+          "$d": 1639690779765
         },
-        "minWireVersion": 13,
+        "logicalSessionTimeoutMinutes": 30,
+        "connectionId": 43,
+        "minWireVersion": 0,
         "maxWireVersion": 13,




2021-12-16T21:39:49.783Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:162	Request header:
{
  "MessageLength": 52,
  "RequestID": 17,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:49.783Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "$db"
        ],
        "ismaster": true,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:49.784Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:175	Response header:
{
  "MessageLength": 190,
  "RequestID": 9,
  "ResponseTo": 17,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:49.785Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690789783
        },
        "minWireVersion": 13,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:49.787Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 304,
  "RequestID": 174,
  "ResponseTo": 17,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:49.788Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "topologyVersion",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "logicalSessionTimeoutMinutes",
          "connectionId",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "topologyVersion": {
          "$k": [
            "processId",
            "counter"
          ],
          "processId": {
            "$o": "61bbb0c97437c3a34c46c94d"
          },
          "counter": {
            "$l": "0"
          }
        },
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690789786
        },
        "logicalSessionTimeoutMinutes": 30,
        "connectionId": 43,
        "minWireVersion": 0,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:49.791Z	INFO	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 190,
-  "RequestID": 9,
+  "MessageLength": 304,
+  "RequestID": 174,
   "ResponseTo": 17,
@@ -14,2 +14,3 @@
           "ismaster",
+          "topologyVersion",
           "maxBsonObjectSize",
@@ -18,2 +19,4 @@
           "localTime",
+          "logicalSessionTimeoutMinutes",
+          "connectionId",
           "minWireVersion",
@@ -24,2 +27,14 @@
         "ismaster": true,
+        "topologyVersion": {
+          "$k": [
+            "processId",
+            "counter"
+          ],
+          "processId": {
+            "$o": "61bbb0c97437c3a34c46c94d"
+          },
+          "counter": {
+            "$l": "0"
+          }
+        },
         "maxBsonObjectSize": 16777216,
@@ -28,5 +43,7 @@
         "localTime": {
-          "$d": 1639690789783
+          "$d": 1639690789786
         },
-        "minWireVersion": 13,
+        "logicalSessionTimeoutMinutes": 30,
+        "connectionId": 43,
+        "minWireVersion": 0,
         "maxWireVersion": 13,




2021-12-16T21:39:56.002Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 	clientconn/conn.go:162	Request header:
{
  "MessageLength": 60,
  "RequestID": 18,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:56.002Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 	clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "listCommands",
          "$db"
        ],
        "listCommands": 1,
        "$db": "monila"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:56.003Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 	clientconn/conn.go:175	Response header:
{
  "MessageLength": 78,
  "RequestID": 7,
  "ResponseTo": 18,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:56.003Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 	clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "argv",
          "parsed",
          "ok"
        ],
        "argv": [
          "ferretdb"
        ],
        "parsed": {
          "$k": []
        },
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:56.051Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 	clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 71060,
  "RequestID": 175,
  "ResponseTo": 18,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:56.123Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 	clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "commands",
          "ok"
        ],
        "commands": {
          "$k": [
            "_addShard",
            "_cloneCollectionOptionsFromPrimaryShard",
            "_configsvrAbortReshardCollection",
            "_configsvrAddShard",
            "_configsvrAddShardToZone",
            "_configsvrBalancerCollectionStatus",
            "_configsvrBalancerStart",
            "_configsvrBalancerStatus",
            "_configsvrBalancerStop",
            "_configsvrCleanupReshardCollection",
            "_configsvrClearJumboFlag",
            "_configsvrCommitChunkMerge",
            "_configsvrCommitChunkMigration",
            "_configsvrCommitChunkSplit",
            "_configsvrCommitChunksMerge",
            "_configsvrCommitMovePrimary",
            "_configsvrCommitReshardCollection",
            "_configsvrCreateDatabase",
            "_configsvrDropCollection",
            "_configsvrDropDatabase",
            "_configsvrEnableSharding",
            "_configsvrEnsureChunkVersionIsGreaterThan",
            "_configsvrMoveChunk",
            "_configsvrMovePrimary",
            "_configsvrRefineCollectionShardKey",
            "_configsvrRemoveChunks",
            "_configsvrRemoveShard",
            "_configsvrRemoveShardFromZone",
            "_configsvrRemoveTags",
            "_configsvrRenameCollectionMetadata",
            "_configsvrReshardCollection",
            "_configsvrSetAllowMigrations",
            "_configsvrShardCollection",
            "_configsvrUpdateZoneKeyRange",
            "_flushDatabaseCacheUpdates",
            "_flushDatabaseCacheUpdatesWithWriteConcern",
            "_flushReshardingStateChange",
            "_flushRoutingTableCacheUpdates",
            "_flushRoutingTableCacheUpdatesWithWriteConcern",
            "_getNextSessionMods",
            "_getUserCacheGeneration",
            "_isSelf",
            "_killOperations",
            "_mergeAuthzCollections",
            "_migrateClone",
            "_recvChunkAbort",
            "_recvChunkCommit",
            "_recvChunkStart",
            "_recvChunkStatus",
            "_shardsvrAbortReshardCollection",
            "_shardsvrCleanupReshardCollection",
            "_shardsvrCloneCatalogData",
            "_shardsvrCommitReshardCollection",
            "_shardsvrCreateCollection",
            "_shardsvrCreateCollectionParticipant",
            "_shardsvrDropCollection",
            "_shardsvrDropCollectionIfUUIDNotMatching",
            "_shardsvrDropCollectionParticipant",
            "_shardsvrDropDatabase",
            "_shardsvrDropDatabaseParticipant",
            "_shardsvrMovePrimary",
            "_shardsvrRefineCollectionShardKey",
            "_shardsvrRenameCollection",
            "_shardsvrRenameCollectionParticipant",
            "_shardsvrRenameCollectionParticipantUnblock",
            "_shardsvrReshardCollection",
            "_shardsvrReshardingOperationTime",
            "_shardsvrShardCollection",
            "_transferMods",
            "abortTransaction",
            "aggregate",
            "appendOplogNote",
            "applyOps",
            "authenticate",
            "autoSplitVector",
            "availableQueryOptions",
            "buildInfo",
            "checkShardingIndex",
            "cleanupOrphaned",
            "cloneCollectionAsCapped",
            "collMod",
            "collStats",
            "commitTransaction",
            "compact",
            "connPoolStats",
            "connPoolSync",
            "connectionStatus",
            "convertToCapped",
            "coordinateCommitTransaction",
            "count",
            "create",
            "createIndexes",
            "createRole",
            "createUser",
            "currentOp",
            "dataSize",
            "dbHash",
            "dbStats",
            "delete",
            "distinct",
            "donorAbortMigration",
            "donorForgetMigration",
            "donorStartMigration",
            "driverOIDTest",
            "drop",
            "dropAllRolesFromDatabase",
            "dropAllUsersFromDatabase",
            "dropConnections",
            "dropDatabase",
            "dropIndexes",
            "dropRole",
            "dropUser",
            "endSessions",
            "explain",
            "features",
            "filemd5",
            "find",
            "findAndModify",
            "flushRouterConfig",
            "fsync",
            "fsyncUnlock",
            "getCmdLineOpts",
            "getDatabaseVersion",
            "getDefaultRWConcern",
            "getDiagnosticData",
            "getFreeMonitoringStatus",
            "getLastError",
            "getLog",
            "getMore",
            "getParameter",
            "getShardMap",
            "getShardVersion",
            "getnonce",
            "grantPrivilegesToRole",
            "grantRolesToRole",
            "grantRolesToUser",
            "hello",
            "hostInfo",
            "insert",
            "internalRenameIfOptionsAndIndexesMatch",
            "invalidateUserCache",
            "isMaster",
            "killAllSessions",
            "killAllSessionsByPattern",
            "killCursors",
            "killOp",
            "killSessions",
            "listCollections",
            "listCommands",
            "listDatabases",
            "listIndexes",
            "lockInfo",
            "logRotate",
            "logout",
            "mapReduce",
            "mergeChunks",
            "moveChunk",
            "ping",
            "planCacheClear",
            "planCacheClearFilters",
            "planCacheListFilters",
            "planCacheSetFilter",
            "prepareTransaction",
            "profile",
            "reIndex",
            "recipientForgetMigration",
            "recipientSyncData",
            "refreshSessions",
            "renameCollection",
            "repairDatabase",
            "replSetAbortPrimaryCatchUp",
            "replSetFreeze",
            "replSetGetConfig",
            "replSetGetRBID",
            "replSetGetStatus",
            "replSetHeartbeat",
            "replSetInitiate",
            "replSetMaintenance",
            "replSetReconfig",
            "replSetRequestVotes",
            "replSetResizeOplog",
            "replSetStepDown",
            "replSetStepUp",
            "replSetSyncFrom",
            "replSetUpdatePosition",
            "revokePrivilegesFromRole",
            "revokeRolesFromRole",
            "revokeRolesFromUser",
            "rolesInfo",
            "rotateCertificates",
            "saslContinue",
            "saslStart",
            "serverStatus",
            "setDefaultRWConcern",
            "setFeatureCompatibilityVersion",
            "setFreeMonitoring",
            "setIndexCommitQuorum",
            "setParameter",
            "setShardVersion",
            "shardingState",
            "shutdown",
            "splitChunk",
            "splitVector",
            "startRecordingTraffic",
            "startSession",
            "stopRecordingTraffic",
            "top",
            "update",
            "updateRole",
            "updateUser",
            "usersInfo",
            "validate",
            "validateDBMetadata",
            "voteCommitIndexBuild",
            "waitForFailPoint",
            "whatsmyuri"
          ],
          "_addShard": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by shards. Do not call directly. Adds a new shard to a cluster.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_cloneCollectionOptionsFromPrimaryShard": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, do not call directly. Creates a collection on a shard with UUID existing on primary.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrAbortReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Aborts any in-progress resharding operations for this collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrAddShard": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and adds a new shard to the cluster.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrAddShardToZone": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and adds a new zone to the shard.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrBalancerCollectionStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Checks whether the chunks of a given collection are in a quiesced state or there are any which need to be moved because of (1) draining shards, (2) zone violation or (3) imbalance between shards.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrBalancerStart": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrBalancerStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrBalancerStop": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCleanupReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Aborts and cleans up any in-progress resharding operations for this collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrClearJumboFlag": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Clears the jumbo flag of the chunk specified.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitChunkMerge": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a MergeChunkRequest",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitChunkMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitChunkSplit": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a SplitChunkRequest.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitChunksMerge": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a MergeChunksRequest",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitMovePrimary": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Allows a reshard operation to enter critical section ASAP.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCreateDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Create a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrDropCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Drops a collection from a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrDropDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Drops a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrEnableSharding": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Enable sharding on a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrEnsureChunkVersionIsGreaterThan": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrMoveChunk": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Requests the balancer to move or rebalance a single chunk.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrMovePrimary": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Reassigns the primary shard of a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRefineCollectionShardKey": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Adds a suffix to the shard key of an existing collection ('refines the shard key').",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRemoveChunks": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes the chunks for the specified collectionUUID.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRemoveShard": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes a shard from the cluster.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRemoveShardFromZone": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and removes the shard from the zone.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRemoveTags": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes the zone tags for the specified ns.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRenameCollectionMetadata": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Renames a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Reshards a collection on a new shard key.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrSetAllowMigrations": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Sets the allowMigrations flag on the specified collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrShardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Shards a collection. Requires key. Optional unique. Sharding must already be enabled for the database",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrUpdateZoneKeyRange": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and assigns a new range to a zone.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushDatabaseCacheUpdates": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command which waits for any pending routing table cache updates for a particular database to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushDatabaseCacheUpdatesWithWriteConcern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command which waits for any pending routing table cache updates for a particular database to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushReshardingStateChange": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command used by the resharding coordinator to flush state changes to the participant shards while the critical section is active.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushRoutingTableCacheUpdates": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command which waits for any pending routing table cache updates for a particular namespace to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushRoutingTableCacheUpdatesWithWriteConcern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command which waits for any pending routing table cache updates for a particular namespace to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_getNextSessionMods": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_getUserCacheGeneration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_isSelf": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ _isSelf : 1 } INTERNAL ONLY",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_killOperations": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command -- Kill operations on the target server by OperationKey.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_mergeAuthzCollections": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_migrateClone": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_recvChunkAbort": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_recvChunkCommit": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_recvChunkStart": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_recvChunkStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrAbortReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the shard server. Do not call directly. Aborts any in-progress resharding operations.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCleanupReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the shard server. Do not call directly. Aborts and cleans up any in-progress resharding operations for this collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCloneCatalogData": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCommitReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the shard server. Do not call directly. Commits an in-progress resharding operations",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCreateCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Creates a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCreateCollectionParticipant": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Creates a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Drops a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropCollectionIfUUIDNotMatching": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command aimed to remove stale entries from the local collection catalog.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropCollectionParticipant": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by secondary sharding servers. Do not call directly. Participates in droping a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Drops a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropDatabaseParticipant": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by secondary sharding servers. Do not call directly. Participates in droping a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrMovePrimary": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrRefineCollectionShardKey": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Refines Collection shard key.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrRenameCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Renames a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrRenameCollectionParticipant": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Locally renames a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrRenameCollectionParticipantUnblock": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Releases the critical section of source and target collections.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Reshards a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrReshardingOperationTime": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command used by the resharding coordinator to query the elapsed and remaining time for the active resharding operation on participant shards.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrShardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_transferMods": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "abortTransaction": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Aborts a transaction",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "aggregate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Runs the aggregation command. See http://dochub.mongodb.org/core/aggregation for more details.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "appendOplogNote": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Adds a no-op entry to the oplog",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "applyOps": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal (sharding)\n{ applyOps : [ ] , preCondition : [ { ns : ... , q : ... , res : ... } ] }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "authenticate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "autoSplitVector": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command returning the split points for a chunk, given the maximum chunk size.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "availableQueryOptions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "buildInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get version #, etc.\n{ buildinfo:1 }",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "checkShardingIndex": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command.\n",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "cleanupOrphaned": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "cloneCollectionAsCapped": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ cloneCollectionAsCapped:\u003cfromName\u003e, toCollection:\u003ctoName\u003e, size:\u003csizeInBytes\u003e }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "collMod": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Sets collection options.\nExample: { collMod: 'foo', viewOn: 'bar'} Example: { collMod: 'foo', index: {keyPattern: {a: 1}, expireAfterSeconds: 600} Example: { collMod: 'foo', index: {name: 'bar', expireAfterSeconds: 600} }\n",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "collStats": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ collStats:\"blog.posts\" , scale : 1 } scale divides sizes e.g. for KB use 1024\n    avgObjSize - in bytes",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "commitTransaction": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Commits a transaction",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "compact": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "compact collection\nwarning: this operation locks the database and is slow. you can cancel with killOp()\n{ compact : \u003ccollection_name\u003e, [force:\u003cbool\u003e] }\n  force - allows to run on a replica set primary\n",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "connPoolStats": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "stats about connections between servers in a replica set or sharded cluster.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "connPoolSync": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "connectionStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Returns connection-specific information such as logged-in users and their roles",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "convertToCapped": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ convertToCapped:\u003cfromCollectionName\u003e, size:\u003csizeInBytes\u003e }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "coordinateCommitTransaction": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Coordinates the commit for a transaction. Only called by mongos.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "count": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "count objects in collection",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "create": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "explicitly creates a collection or view\n{\n  create: \u003cstring: collection or view name\u003e [,\n  capped: \u003cbool: capped collection\u003e,\n  autoIndexId: \u003cbool: automatic creation of _id index\u003e,\n  idIndex: \u003cdocument: _id index specification\u003e,\n  size: \u003cint: size in bytes of the capped collection\u003e,\n  max: \u003cint: max number of documents in the capped collection\u003e,\n  storageEngine: \u003cdocument: storage engine configuration\u003e,\n  validator: \u003cdocument: validation rules\u003e,\n  validationLevel: \u003cstring: validation level\u003e,\n  validationAction: \u003cstring: validation action\u003e,\n  indexOptionDefaults: \u003cdocument: default configuration for indexes\u003e,\n  viewOn: \u003cstring: name of source collection or view\u003e,\n  pipeline: \u003carray\u003cobject\u003e: aggregation pipeline stage\u003e,\n  collation: \u003cdocument: default collation for the collection or view\u003e,\n  writeConcern: \u003cdocument: write concern expression for the operation\u003e]\n}",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "createIndexes": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "createRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "createUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "currentOp": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dataSize": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "determine data size for a set of data in a certain range\nexample: { dataSize:\"blog.posts\", keyPattern:{x:1}, min:{x:10}, max:{x:55} }\nmin and max parameters are optional. They must either both be included or both omitted\nkeyPattern is an optional parameter indicating an index pattern that would be usefulfor iterating over the min/max bounds. If keyPattern is omitted, it is inferred from the structure of min. \nnote: This command may take a while to run",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dbHash": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dbStats": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Get stats on a database. Not instantaneous. Slower for databases with large .ns files.\nExample: { dbStats:1, scale:1 }",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "delete": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "delete documents",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "distinct": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ distinct : 'collection name' , key : 'a.b' , query : {} }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "donorAbortMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Abort a migration",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "donorForgetMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Forget a migration",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "donorStartMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Start migrating databases whose names match the specified prefix to the specified replica set.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "driverOIDTest": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "drop": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "drop a collection\n{drop : \u003ccollectionName\u003e}",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "dropAllRolesFromDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dropAllUsersFromDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dropConnections": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Drop egress connections to specified host and port",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dropDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "drop (delete) this database",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "dropIndexes": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "drop indexes for a collection",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "dropRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dropUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "endSessions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "end a set of logical sessions",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "explain": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "explain database reads and writes",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "features": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "return build level feature settings",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "filemd5": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": " example: { filemd5 : ObjectId(aaaaaaa) , root : \"fs\" }",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "find": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "query for documents",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "findAndModify": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ findAndModify: \"collection\", query: {processed:false}, update: {$set: {processed:true}}, new: true}\n{ findAndModify: \"collection\", query: {processed:false}, remove: true, sort: {priority:-1}}\nEither update or remove is required, all other fields have default values.\nOutput is in the \"value\" field\n",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "flushRouterConfig": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Flushes the cached routing information for a single collection, entire database (and its collections) or all databases, which would cause full reload from the config server on the next access.\nUsage:\n{flushRouterConfig: 1} flushes all databases\n{flushRouterConfig: 'db'} flushes only the given database (and its collections)\n{flushRouterconfig: 'db.coll'} flushes only the given collection",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "fsync": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "http://dochub.mongodb.org/core/fsynccommand",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "fsyncUnlock": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getCmdLineOpts": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get argv",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getDatabaseVersion": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": " example: { getDatabaseVersion : 'foo'  } ",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getDefaultRWConcern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get the current read/write concern defaults being applied by this node",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getDiagnosticData": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get latest diagnostic data collection snapshot",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getFreeMonitoringStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Indicates free monitoring status",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getLastError": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "return error status of the last operation on this connection\noptions:\n  { fsync:true } - fsync before returning, or wait for journal commit if running with --journal\n  { j:true } - wait for journal commit if running with --journal\n  { w:n } - await replication to n servers (including self) before returning\n  { w:'majority' } - await replication to majority of set\n  { wtimeout:m} - timeout for w in m milliseconds",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getLog": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ getLog : '*' }  OR { getLog : 'global' }",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getMore": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "retrieve more results from an existing cursor",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "getParameter": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get administrative option(s)\nexample:\n{ getParameter:1, notablescan:1 }\nsupported:\n  AlwaysRecordTraffic\n  KeysRotationIntervalSec\n  ShardingTaskExecutorPoolHostTimeoutMS\n  ShardingTaskExecutorPoolMaxConnecting\n  ShardingTaskExecutorPoolMaxSize\n  ShardingTaskExecutorPoolMinSize\n  ShardingTaskExecutorPoolRefreshRequirementMS\n  ShardingTaskExecutorPoolRefreshTimeoutMS\n  ShardingTaskExecutorPoolReplicaSetMatching\n  TransactionRecordMinimumLifetimeMinutes\n  acceptApiVersion2\n  aggregateOperationResourceConsumptionMetrics\n  allowRolesFromX509Certificates\n  authSchemaVersion\n  authenticationMechanisms\n  authorizationManagerCacheSize\n  authorizationManagerPinnedUsers\n  authorizationManagerPinnedUsersRefreshIntervalMillis\n  automationServiceDescriptor\n  awsEC2InstanceMetadataUrl\n  awsECSInstanceMetadataUrl\n  bgSyncOplogFetcherBatchSize\n  changeSyncSourceThresholdMillis\n  clientCursorMonitorFrequencySecs\n  cloudFreeMonitoringEndpointURL\n  clusterAuthMode\n  collectionBulkLoaderBatchSizeInBytes\n  collectionClonerBatchSize\n  collectionClonerUsesExhaust\n  connPoolMaxConnsPerHost\n  connPoolMaxInUseConnsPerHost\n  connectTimeoutMs\n  coordinateCommitReturnImmediatelyAfterPersistingDecision\n  createRollbackDataFiles\n  cursorTimeoutMillis\n  deprecatedWireOpsWarningPeriodInSeconds\n  diagnosticDataCollectionDirectoryPath\n  diagnosticDataCollectionDirectorySizeMB\n  diagnosticDataCollectionEnableLatencyHistograms\n  diagnosticDataCollectionEnabled\n  diagnosticDataCollectionFileSizeMB\n  diagnosticDataCollectionPeriodMillis\n  diagnosticDataCollectionSamplesPerChunk\n  diagnosticDataCollectionSamplesPerInterimUpdate\n  diagnosticDataCollectionVerboseTCMalloc\n  disableJavaScriptJIT\n  disableLogicalSessionCacheRefresh\n  disableNonSSLConnectionLogging\n  disableNonTLSConnectionLogging\n  disableResumableRangeDeleter\n  disableSplitHorizonIPCheck\n  disabledSecureAllocatorDomains\n  documentUnitSizeBytes\n  enableDefaultWriteConcernUpdatesForInitiate\n  enableElectionHandoff\n  enableFinerGrainedCatalogCacheRefresh\n  enableFlowControl\n  enableIndexBuildCommitQuorum\n  enableLocalhostAuthBypass\n  enableOverrideClusterChainingSetting\n  enableReconfigRollbackCommittedWritesCheck\n  enableResumableIndexBuilds\n  enableSearchMeta\n  enableShardedIndexConsistencyCheck\n  enableTestCommands\n  enableTimeoutOfInactiveSessionCursors\n  enforceUserClusterSeparation\n  featureCompatibilityVersion\n  featureFlagBlender\n  featureFlagChangeStreamsOptimization\n  featureFlagDefaultReadConcernLocal\n  featureFlagDefaultWriteConcernMajority\n  featureFlagDotsAndDollars\n  featureFlagFryer\n  featureFlagLockFreeReads\n  featureFlagResharding\n  featureFlagRetryableFindAndModify\n  featureFlagSearchMeta\n  featureFlagShardedTimeSeries\n  featureFlagShardedTimeSeriesUpdateDelete\n  featureFlagShardingFullDDLSupport\n  featureFlagSpoon\n  featureFlagTenantMigrations\n  featureFlagTimeseriesCollection\n  featureFlagTimeseriesUpdatesAndDeletes\n  featureFlagToaster\n  featureFlagUseSecondaryDelaySecs\n  findChunksOnConfigTimeoutMS\n  fixedServiceExecutorRecursionLimit\n  fixedServiceExecutorThreadLimit\n  flowControlDecayConstant\n  flowControlFudgeFactor\n  flowControlMaxSamples\n  flowControlMinTicketsPerSecond\n  flowControlSamplePeriod\n  flowControlTargetLagSeconds\n  flowControlThresholdLagPercentage\n  flowControlTicketAdderConstant\n  flowControlTicketMultiplierConstant\n  flowControlWarnThresholdSeconds\n  forceRollbackViaRefetch\n  globalConnPoolIdleTimeoutMinutes\n  heapProfilingEnabled\n  heapProfilingSampleIntervalBytes\n  heartBeatFrequencyMs\n  honorSystemUmask\n  indexEntryUnitSizeBytes\n  initialServiceExecutorThreadingModel\n  initialSyncOplogBuffer\n  initialSyncOplogBufferPeekCacheSize\n  initialSyncOplogFetcherBatchSize\n  initialSyncSourceReadPreference\n  initialSyncTransientErrorRetryPeriodSeconds\n  internalDocumentSourceCursorBatchSizeBytes\n  internalDocumentSourceGroupMaxMemoryBytes\n  internalDocumentSourceLookupCacheSizeBytes\n  internalDocumentSourceSetWindowFieldsMaxMemoryBytes\n  internalGeoNearQuery2DMaxCoveringCells\n  internalGeoPredicateQuery2DMaxCoveringCells\n  internalIndexBuildBulkLoadYieldIterations\n  internalInsertMaxBatchSize\n  internalLookupStageIntermediateDocumentMaxSizeBytes\n  internalPipelineLengthLimit\n  internalProhibitShardOperationRetry\n  internalQueryAllowShardedLookup\n  internalQueryAlwaysMergeOnPrimaryShard\n  internalQueryAppendIdToSetWindowFieldsSort\n  internalQueryCacheDisableInactiveEntries\n  internalQueryCacheEvictionRatio\n  internalQueryCacheMaxEntriesPerCollection\n  internalQueryCacheMaxSizeBytesBeforeStripDebugInfo\n  internalQueryCacheSize\n  internalQueryCacheWorksGrowthCoefficient\n  internalQueryDefaultDOP\n  internalQueryDesugarWhereToFunction\n  internalQueryDisableExchange\n  internalQueryEnableCSTParser\n  internalQueryEnableLoggingV2OplogEntries\n  internalQueryEnableSlotBasedExecutionEngine\n  internalQueryEnumerationMaxIntersectPerAnd\n  internalQueryEnumerationMaxOrSolutions\n  internalQueryEnumerationPreferLockstepOrEnumeration\n  internalQueryExecYieldIterations\n  internalQueryExecYieldPeriodMS\n  internalQueryExplainSizeThresholdBytes\n  internalQueryFacetBufferSizeBytes\n  internalQueryFacetMaxOutputDocSizeBytes\n  internalQueryForceIntersectionPlans\n  internalQueryIgnoreUnknownJSONSchemaKeywords\n  internalQueryJavaScriptFnTimeoutMillis\n  internalQueryJavaScriptHeapSizeLimitMB\n  internalQueryMaxAddToSetBytes\n  internalQueryMaxBlockingSortMemoryUsageBytes\n  internalQueryMaxDocValidationErrorConsideredValues\n  internalQueryMaxJsEmitBytes\n  internalQueryMaxPushBytes\n  internalQueryMaxRangeBytes\n  internalQueryMaxScansToExplode\n  internalQueryPlanEvaluationCollFraction\n  internalQueryPlanEvaluationMaxResults\n  internalQueryPlanEvaluationWorks\n  internalQueryPlanOrChildrenIndependently\n  internalQueryPlannerEnableHashIntersection\n  internalQueryPlannerEnableIndexIntersection\n  internalQueryPlannerGenerateCoveredWholeIndexScans\n  internalQueryPlannerMaxIndexedSolutions\n  internalQueryProhibitBlockingMergeOnMongoS\n  internalQueryProhibitMergingOnMongoS\n  internalQueryS2GeoCoarsestLevel\n  internalQueryS2GeoFinestLevel\n  internalQueryS2GeoMaxCells\n  internalQuerySlotBasedExecutionMaxStaticIndexScanIntervals\n  internalValidateFeaturesAsMaster\n  internalValidateFeaturesAsPrimary\n  javascriptProtection\n  journalCommitInterval\n  jsHeapLimitMB\n  loadRoutingTableOnStartup\n  localLogicalSessionTimeoutMinutes\n  localThresholdMs\n  logComponentVerbosity\n  logLevel\n  logicalSessionRefreshMillis\n  maxAcceptableLogicalClockDriftSecs\n  maxBSONDepth\n  maxCatchUpPercentageBeforeBlockingWrites\n  maxIndexBuildDrainBatchSize\n  maxIndexBuildDrainMemoryUsageMegabytes\n  maxIndexBuildMemoryUsageMegabytes\n  maxLogSizeKB\n  maxNumActiveUserIndexBuilds\n  maxNumSyncSourceChangesPerHour\n  maxNumberOfTransactionOperationsInSingleOplogEntry\n  maxOplogTruncationPointsAfterStartup\n  maxOplogTruncationPointsDuringStartup\n  maxSessions\n  maxSyncSourceLagSecs\n  maxTenantMigrationDonorServiceThreadPoolSize\n  maxTenantMigrationRecipientThreadPoolSize\n  maxTimeMSForHedgedReads\n  maxTransactionLockRequestTimeoutMillis\n  maxValidateMBperSec\n  maxValidateMemoryUsageMB\n  metadataRefreshInTransactionMaxWaitBehindCritSecMS\n  migrateCloneInsertionBatchDelayMS\n  migrateCloneInsertionBatchSize\n  migrationLockAcquisitionMaxWaitMS\n  minNumChunksForSessionsCollection\n  minOplogEntriesPerThread\n  minOplogTruncationPoints\n  minSnapshotHistoryWindowInSeconds\n  mirrorReads\n  mongosShutdownTimeoutMillisForSignaledShutdown\n  notablescan\n  numInitialSyncAttempts\n  numInitialSyncConnectAttempts\n  numInitialSyncOplogFindAttempts\n  ocspCacheSize\n  ocspEnabled\n  ocspStaplingRefreshPeriodSecs\n  ocspValidationRefreshPeriodSecs\n  opensslCipherConfig\n  opensslCipherSuiteConfig\n  opensslDiffieHellmanParameters\n  operationMemoryPoolBlockInitialSizeKB\n  operationMemoryPoolBlockMaxSizeKB\n  oplogApplicationEnforcesSteadyStateConstraints\n  oplogFetcherInitialSyncMaxFetcherRestarts\n  oplogFetcherSteadyStateMaxFetcherRestarts\n  oplogFetcherUsesExhaust\n  oplogInitialFindMaxSeconds\n  oplogNetworkTimeoutBufferSeconds\n  oplogRetriedFindMaxSeconds\n  oplogSamplingLogIntervalSeconds\n  oplogTruncationPointSizeMB\n  orphanCleanupDelaySecs\n  periodicNoopIntervalSecs\n  priorityTakeoverFreshnessWindowSeconds\n  processUmask\n  profileOperationResourceConsumptionMetrics\n  quiet\n  rangeDeleterBatchDelayMS\n  rangeDeleterBatchSize\n  readHedgingMode\n  receiveChunkWaitForRangeDeleterTimeoutMS\n  recoverFromOplogAsStandalone\n  recoverToOplogTimestamp\n  remainingReshardingOperationTimeThresholdMillis\n  replBatchLimitBytes\n  replBatchLimitOperations\n  replElectionTimeoutOffsetLimitFraction\n  replWriterMinThreadCount\n  replWriterThreadCount\n  replicaSetMonitorProtocol\n  reportOpWriteConcernCountersInServerStatus\n  requireApiVersion\n  reservedServiceExecutorRecursionLimit\n  reshardingCollectionClonerBatchSizeInBytes\n  reshardingCoordinatorServiceMaxThreadCount\n  reshardingCriticalSectionTimeoutMillis\n  reshardingDonorServiceMaxThreadCount\n  reshardingMinimumOperationDurationMillis\n  reshardingOplogApplierMaxLockRequestTimeoutMillis\n  reshardingOplogBatchLimitBytes\n  reshardingOplogBatchLimitOperations\n  reshardingOplogBatchTaskCount\n  reshardingRecipientServiceMaxThreadCount\n  reshardingTxnClonerProgressBatchSize\n  resumableIndexBuildMajorityOpTimeTimeoutMillis\n  rewriteStateChangeErrors\n  roleGraphInvalidationIsFatal\n  rollbackRemoteOplogQueryBatchSize\n  rollbackTimeLimitSecs\n  saslHostName\n  saslServiceName\n  saslauthdPath\n  scramIterationCount\n  scramSHA256IterationCount\n  scriptingEngineInterruptIntervalMS\n  shardedIndexConsistencyCheckIntervalMS\n  shutdownTimeoutMillisForSignaledShutdown\n  skipCorruptDocumentsWhenCloning\n  skipShardingConfigurationChecks\n  skipShellCursorFinalize\n  sslMode\n  sslWithholdClientCertificate\n  startupAuthSchemaValidation\n  startupRecoveryForRestore\n  storeFindAndModifyImagesInSideCollection\n  suppressNoTLSPeerCertificateWarning\n  syncdelay\n  synchronousServiceExecutorRecursionLimit\n  takeUnstableCheckpointOnShutdown\n  taskExecutorPoolSize\n  tcmallocAggressiveMemoryDecommit\n  tcmallocEnableMarkThreadTemporarilyIdle\n  tcmallocMaxTotalThreadCacheBytes\n  tcmallocReleaseRate\n  tcpFastOpenClient\n  tcpFastOpenQueueSize\n  tcpFastOpenServer\n  tenantApplierBatchSizeBytes\n  tenantApplierBatchSizeOps\n  tenantApplierThreadCount\n  tenantMigrationBlockingStateTimeoutMS\n  tenantMigrationDisableX509Auth\n  tenantMigrationExcludeDonorHostTimeoutMS\n  tenantMigrationExternalKeysRemovalBufferSecs\n  tenantMigrationGarbageCollectionDelayMS\n  tenantMigrationOplogBufferPeekCacheSize\n  tenantMigrationOplogFetcherBatchSize\n  testingDiagnosticsEnabled\n  testingSnapshotBehaviorInIsolation\n  timeseriesBucketMaxCount\n  timeseriesBucketMaxSize\n  timeseriesBucketsCollectionClusterById\n  timeseriesIdleBucketExpiryMemoryUsageThreshold\n  tlsCATrusts\n  tlsMode\n  tlsOCSPStaplingTimeoutSecs\n  tlsOCSPVerifyTimeoutSecs\n  tlsWithholdClientCertificate\n  tlsX509ClusterAuthDNOverride\n  tlsX509ExpirationWarningThresholdDays\n  totalUnitWriteSizeBytes\n  traceExceptions\n  traceWriteConflictExceptions\n  trafficRecordingDirectory\n  transactionLifetimeLimitSeconds\n  transactionSizeLimitBytes\n  ttlMonitorEnabled\n  ttlMonitorSleepSecs\n  useReadOnceCursorsForIndexBuilds\n  waitForSecondaryBeforeNoopWriteMS\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartup\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartupWaitMS\n  watchdogPeriodSeconds\n  wiredTigerConcurrentReadTransactions\n  wiredTigerConcurrentWriteTransactions\n  wiredTigerCursorCacheSize\n  wiredTigerEngineRuntimeConfig\n  wiredTigerFileHandleCloseIdleTime\n  wiredTigerFileHandleCloseMinimum\n  wiredTigerFileHandleCloseScanInterval\n  wiredTigerMaxCacheOverflowSizeGB\n  wiredTigerSessionCloseIdleTimeSecs\n  writePeriodicNoops\n{ getParameter:'*' } to get everything\n",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getShardMap": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "lists the set of shards known to this instance",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getShardVersion": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": " example: { getShardVersion : 'alleyinsider.foo'  } ",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getnonce": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "grantPrivilegesToRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "grantRolesToRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "grantRolesToUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "hello": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Check if this server is primary for a replica set\n{ hello : 1 }",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "hostInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "returns information about the daemon's host",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "insert": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "insert documents",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "internalRenameIfOptionsAndIndexesMatch": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command to rename and check collection options",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "invalidateUserCache": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "isMaster": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Check if this server is primary for a replica set\n{ isMaster : 1 }",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "killAllSessions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "kill all logical sessions, for a user, and their operations",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "killAllSessionsByPattern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "kill logical sessions by pattern",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "killCursors": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Kill a list of cursor ids",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "killOp": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "killSessions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "kill a logical session and its operations",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "listCollections": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "list collections for this db",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "listCommands": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get a list of all db commands",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "listDatabases": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ listDatabases:1, [filter: \u003cfilterObject\u003e] [, nameOnly: true ] }\nlist databases on this server",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "listIndexes": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "list indexes for a collection",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "lockInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "show all lock info on the server",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "logRotate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "logout": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "de-authenticate",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "mapReduce": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Runs the mapReduce command. See http://dochub.mongodb.org/core/mapreduce for details.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "mergeChunks": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command to merge a contiguous range of chunks.\nUsage: { mergeChunks: \u003cns\u003e, epoch: \u003cepoch\u003e, bounds: [\u003cmin key\u003e, \u003cmax key\u003e] }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "moveChunk": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "ping": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "a way to check that the server is alive. responds immediately even if server is in a db lock.",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "planCacheClear": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Drops one or all plan cache entries in a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "planCacheClearFilters": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Clears index filter for a single query shape or, if the query shape is omitted, all filters for the collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "planCacheListFilters": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Displays index filters for all query shapes in a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "planCacheSetFilter": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Sets index filter for a query shape. Overrides existing filter.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "prepareTransaction": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Prepares a transaction on this shard; sent by a router or re-sent by the transaction commit coordinator for a cross-shard transaction",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "profile": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "controls the behaviour of the performance profiler, the fraction of eligible operations which are sampled for logging/profiling, and the threshold duration at which ops become eligible. See http://docs.mongodb.org/manual/reference/command/profile",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "reIndex": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "re-index a collection (can only be run on a standalone mongod)",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "recipientForgetMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Interrupts tenant migration data sync and marks that the recipient's durable state machine may be garbage collected.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "recipientSyncData": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal replica set command; instructs the recipient to sync data as part of a tenant migration.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "refreshSessions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "renew a set of logical sessions",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "renameCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": " example: { renameCollection: foo.a, to: bar.b }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "repairDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "This command has been removed. If you would like to compact your data, use the 'compact' command. If you would like to rebuild indexes, use the 'reIndex' command. If you need to recover data, please see the documentation for repairing your database offline: http://dochub.mongodb.org/core/repair",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetAbortPrimaryCatchUp": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ CmdReplSetAbortPrimaryCatchUp : 1 }\nAbort primary catch-up mode; immediately finish the transition to primary without fetching any further unreplicated writes from any other online nodes",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetFreeze": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ replSetFreeze : \u003cseconds\u003e }\n'freeze' state of member to the extent we can do that.  What this really means is that\nthis node will not attempt to become primary until the time period specified expires.\nYou can call again with {replSetFreeze:0} to unfreeze sooner.\nA process restart unfreezes the member also.\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetGetConfig": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Returns the current replica set configuration{ replSetGetConfig : 1 }\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetGetRBID": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetGetStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Report status of a replica set from the POV of this server\n{ replSetGetStatus : 1 }\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetHeartbeat": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetInitiate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Initiate/christen a replica set.\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetMaintenance": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ replSetMaintenance : bool }\nEnable or disable maintenance mode.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetReconfig": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Adjust configuration of a replica set\n{ replSetReconfig : config_object }\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetRequestVotes": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetResizeOplog": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Resize oplog using size (in MBs) and optionally, retention (in terms of hours)",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetStepDown": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ replSetStepDown : \u003cseconds\u003e }\nStep down as primary.  Will not try to reelect self for the specified time period (1 minute if no numeric secs value specified, or secs is 0).\n(If another member with same priority takes over in the meantime, it will stay primary.)\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetStepUp": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetSyncFrom": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ replSetSyncFrom : \"host:port\" }\nChange who this member is syncing from. Note: This will interrupt and restart an in-progress initial sync.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetUpdatePosition": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "revokePrivilegesFromRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "revokeRolesFromRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "revokeRolesFromUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "rolesInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "rotateCertificates": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Rotate certificates for new SSL connections",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "saslContinue": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Subsequent steps in a SASL authentication conversation.",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "saslStart": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "First step in a SASL authentication conversation.",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "serverStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "returns lots of administrative server statistics",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setDefaultRWConcern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "set the current read/write concern defaults (cluster-wide)",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setFeatureCompatibilityVersion": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Set the featureCompatibilityVersion used by this cluster. If set to '4.4', then features introduced in versions greater than '4.4' will be disabled If set to '4.9', then features introduced in '5.0' will be disabled. If set to '5.0', then '5.0' features are enabled, and all nodes in the cluster must be binary version 5.0. See https://docs.mongodb.com/master/release-notes/4.4-compatibility/#feature-compatibility.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setFreeMonitoring": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "enable or disable Free Monitoring",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setIndexCommitQuorum": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Resets the commitQuorum for the given index builds in a collection. Usage:\n{\n    setIndexCommitQuorum: \u003cstring\u003e collection name,\n    indexNames: array\u003cstring\u003e list of index names,\n    commitQuorum: \u003cstring|number|object\u003e option to define the required quorum for\n                  the index builds to commit\n}",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setParameter": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "set administrative option(s)\n{ setParameter:1, \u003cparam\u003e:\u003cvalue\u003e }\nsupported:\n  AlwaysRecordTraffic\n  KeysRotationIntervalSec\n  ShardingTaskExecutorPoolHostTimeoutMS\n  ShardingTaskExecutorPoolMaxConnecting\n  ShardingTaskExecutorPoolMaxSize\n  ShardingTaskExecutorPoolMinSize\n  ShardingTaskExecutorPoolRefreshRequirementMS\n  ShardingTaskExecutorPoolRefreshTimeoutMS\n  ShardingTaskExecutorPoolReplicaSetMatching\n  TransactionRecordMinimumLifetimeMinutes\n  acceptApiVersion2\n  aggregateOperationResourceConsumptionMetrics\n  allowRolesFromX509Certificates\n  authSchemaVersion\n  authenticationMechanisms\n  authorizationManagerCacheSize\n  authorizationManagerPinnedUsers\n  authorizationManagerPinnedUsersRefreshIntervalMillis\n  automationServiceDescriptor\n  awsEC2InstanceMetadataUrl\n  awsECSInstanceMetadataUrl\n  bgSyncOplogFetcherBatchSize\n  changeSyncSourceThresholdMillis\n  clientCursorMonitorFrequencySecs\n  cloudFreeMonitoringEndpointURL\n  clusterAuthMode\n  collectionBulkLoaderBatchSizeInBytes\n  collectionClonerBatchSize\n  collectionClonerUsesExhaust\n  connPoolMaxConnsPerHost\n  connPoolMaxInUseConnsPerHost\n  connectTimeoutMs\n  coordinateCommitReturnImmediatelyAfterPersistingDecision\n  createRollbackDataFiles\n  cursorTimeoutMillis\n  deprecatedWireOpsWarningPeriodInSeconds\n  diagnosticDataCollectionDirectoryPath\n  diagnosticDataCollectionDirectorySizeMB\n  diagnosticDataCollectionEnableLatencyHistograms\n  diagnosticDataCollectionEnabled\n  diagnosticDataCollectionFileSizeMB\n  diagnosticDataCollectionPeriodMillis\n  diagnosticDataCollectionSamplesPerChunk\n  diagnosticDataCollectionSamplesPerInterimUpdate\n  diagnosticDataCollectionVerboseTCMalloc\n  disableJavaScriptJIT\n  disableLogicalSessionCacheRefresh\n  disableNonSSLConnectionLogging\n  disableNonTLSConnectionLogging\n  disableResumableRangeDeleter\n  disableSplitHorizonIPCheck\n  disabledSecureAllocatorDomains\n  documentUnitSizeBytes\n  enableDefaultWriteConcernUpdatesForInitiate\n  enableElectionHandoff\n  enableFinerGrainedCatalogCacheRefresh\n  enableFlowControl\n  enableIndexBuildCommitQuorum\n  enableLocalhostAuthBypass\n  enableOverrideClusterChainingSetting\n  enableReconfigRollbackCommittedWritesCheck\n  enableResumableIndexBuilds\n  enableSearchMeta\n  enableShardedIndexConsistencyCheck\n  enableTestCommands\n  enableTimeoutOfInactiveSessionCursors\n  enforceUserClusterSeparation\n  featureCompatibilityVersion\n  featureFlagBlender\n  featureFlagChangeStreamsOptimization\n  featureFlagDefaultReadConcernLocal\n  featureFlagDefaultWriteConcernMajority\n  featureFlagDotsAndDollars\n  featureFlagFryer\n  featureFlagLockFreeReads\n  featureFlagResharding\n  featureFlagRetryableFindAndModify\n  featureFlagSearchMeta\n  featureFlagShardedTimeSeries\n  featureFlagShardedTimeSeriesUpdateDelete\n  featureFlagShardingFullDDLSupport\n  featureFlagSpoon\n  featureFlagTenantMigrations\n  featureFlagTimeseriesCollection\n  featureFlagTimeseriesUpdatesAndDeletes\n  featureFlagToaster\n  featureFlagUseSecondaryDelaySecs\n  findChunksOnConfigTimeoutMS\n  fixedServiceExecutorRecursionLimit\n  fixedServiceExecutorThreadLimit\n  flowControlDecayConstant\n  flowControlFudgeFactor\n  flowControlMaxSamples\n  flowControlMinTicketsPerSecond\n  flowControlSamplePeriod\n  flowControlTargetLagSeconds\n  flowControlThresholdLagPercentage\n  flowControlTicketAdderConstant\n  flowControlTicketMultiplierConstant\n  flowControlWarnThresholdSeconds\n  forceRollbackViaRefetch\n  globalConnPoolIdleTimeoutMinutes\n  heapProfilingEnabled\n  heapProfilingSampleIntervalBytes\n  heartBeatFrequencyMs\n  honorSystemUmask\n  indexEntryUnitSizeBytes\n  initialServiceExecutorThreadingModel\n  initialSyncOplogBuffer\n  initialSyncOplogBufferPeekCacheSize\n  initialSyncOplogFetcherBatchSize\n  initialSyncSourceReadPreference\n  initialSyncTransientErrorRetryPeriodSeconds\n  internalDocumentSourceCursorBatchSizeBytes\n  internalDocumentSourceGroupMaxMemoryBytes\n  internalDocumentSourceLookupCacheSizeBytes\n  internalDocumentSourceSetWindowFieldsMaxMemoryBytes\n  internalGeoNearQuery2DMaxCoveringCells\n  internalGeoPredicateQuery2DMaxCoveringCells\n  internalIndexBuildBulkLoadYieldIterations\n  internalInsertMaxBatchSize\n  internalLookupStageIntermediateDocumentMaxSizeBytes\n  internalPipelineLengthLimit\n  internalProhibitShardOperationRetry\n  internalQueryAllowShardedLookup\n  internalQueryAlwaysMergeOnPrimaryShard\n  internalQueryAppendIdToSetWindowFieldsSort\n  internalQueryCacheDisableInactiveEntries\n  internalQueryCacheEvictionRatio\n  internalQueryCacheMaxEntriesPerCollection\n  internalQueryCacheMaxSizeBytesBeforeStripDebugInfo\n  internalQueryCacheSize\n  internalQueryCacheWorksGrowthCoefficient\n  internalQueryDefaultDOP\n  internalQueryDesugarWhereToFunction\n  internalQueryDisableExchange\n  internalQueryEnableCSTParser\n  internalQueryEnableLoggingV2OplogEntries\n  internalQueryEnableSlotBasedExecutionEngine\n  internalQueryEnumerationMaxIntersectPerAnd\n  internalQueryEnumerationMaxOrSolutions\n  internalQueryEnumerationPreferLockstepOrEnumeration\n  internalQueryExecYieldIterations\n  internalQueryExecYieldPeriodMS\n  internalQueryExplainSizeThresholdBytes\n  internalQueryFacetBufferSizeBytes\n  internalQueryFacetMaxOutputDocSizeBytes\n  internalQueryForceIntersectionPlans\n  internalQueryIgnoreUnknownJSONSchemaKeywords\n  internalQueryJavaScriptFnTimeoutMillis\n  internalQueryJavaScriptHeapSizeLimitMB\n  internalQueryMaxAddToSetBytes\n  internalQueryMaxBlockingSortMemoryUsageBytes\n  internalQueryMaxDocValidationErrorConsideredValues\n  internalQueryMaxJsEmitBytes\n  internalQueryMaxPushBytes\n  internalQueryMaxRangeBytes\n  internalQueryMaxScansToExplode\n  internalQueryPlanEvaluationCollFraction\n  internalQueryPlanEvaluationMaxResults\n  internalQueryPlanEvaluationWorks\n  internalQueryPlanOrChildrenIndependently\n  internalQueryPlannerEnableHashIntersection\n  internalQueryPlannerEnableIndexIntersection\n  internalQueryPlannerGenerateCoveredWholeIndexScans\n  internalQueryPlannerMaxIndexedSolutions\n  internalQueryProhibitBlockingMergeOnMongoS\n  internalQueryProhibitMergingOnMongoS\n  internalQueryS2GeoCoarsestLevel\n  internalQueryS2GeoFinestLevel\n  internalQueryS2GeoMaxCells\n  internalQuerySlotBasedExecutionMaxStaticIndexScanIntervals\n  internalValidateFeaturesAsMaster\n  internalValidateFeaturesAsPrimary\n  javascriptProtection\n  journalCommitInterval\n  jsHeapLimitMB\n  loadRoutingTableOnStartup\n  localLogicalSessionTimeoutMinutes\n  localThresholdMs\n  logComponentVerbosity\n  logLevel\n  logicalSessionRefreshMillis\n  maxAcceptableLogicalClockDriftSecs\n  maxBSONDepth\n  maxCatchUpPercentageBeforeBlockingWrites\n  maxIndexBuildDrainBatchSize\n  maxIndexBuildDrainMemoryUsageMegabytes\n  maxIndexBuildMemoryUsageMegabytes\n  maxLogSizeKB\n  maxNumActiveUserIndexBuilds\n  maxNumSyncSourceChangesPerHour\n  maxNumberOfTransactionOperationsInSingleOplogEntry\n  maxOplogTruncationPointsAfterStartup\n  maxOplogTruncationPointsDuringStartup\n  maxSessions\n  maxSyncSourceLagSecs\n  maxTenantMigrationDonorServiceThreadPoolSize\n  maxTenantMigrationRecipientThreadPoolSize\n  maxTimeMSForHedgedReads\n  maxTransactionLockRequestTimeoutMillis\n  maxValidateMBperSec\n  maxValidateMemoryUsageMB\n  metadataRefreshInTransactionMaxWaitBehindCritSecMS\n  migrateCloneInsertionBatchDelayMS\n  migrateCloneInsertionBatchSize\n  migrationLockAcquisitionMaxWaitMS\n  minNumChunksForSessionsCollection\n  minOplogEntriesPerThread\n  minOplogTruncationPoints\n  minSnapshotHistoryWindowInSeconds\n  mirrorReads\n  mongosShutdownTimeoutMillisForSignaledShutdown\n  notablescan\n  numInitialSyncAttempts\n  numInitialSyncConnectAttempts\n  numInitialSyncOplogFindAttempts\n  ocspCacheSize\n  ocspEnabled\n  ocspStaplingRefreshPeriodSecs\n  ocspValidationRefreshPeriodSecs\n  opensslCipherConfig\n  opensslCipherSuiteConfig\n  opensslDiffieHellmanParameters\n  operationMemoryPoolBlockInitialSizeKB\n  operationMemoryPoolBlockMaxSizeKB\n  oplogApplicationEnforcesSteadyStateConstraints\n  oplogFetcherInitialSyncMaxFetcherRestarts\n  oplogFetcherSteadyStateMaxFetcherRestarts\n  oplogFetcherUsesExhaust\n  oplogInitialFindMaxSeconds\n  oplogNetworkTimeoutBufferSeconds\n  oplogRetriedFindMaxSeconds\n  oplogSamplingLogIntervalSeconds\n  oplogTruncationPointSizeMB\n  orphanCleanupDelaySecs\n  periodicNoopIntervalSecs\n  priorityTakeoverFreshnessWindowSeconds\n  processUmask\n  profileOperationResourceConsumptionMetrics\n  quiet\n  rangeDeleterBatchDelayMS\n  rangeDeleterBatchSize\n  readHedgingMode\n  receiveChunkWaitForRangeDeleterTimeoutMS\n  recoverFromOplogAsStandalone\n  recoverToOplogTimestamp\n  remainingReshardingOperationTimeThresholdMillis\n  replBatchLimitBytes\n  replBatchLimitOperations\n  replElectionTimeoutOffsetLimitFraction\n  replWriterMinThreadCount\n  replWriterThreadCount\n  replicaSetMonitorProtocol\n  reportOpWriteConcernCountersInServerStatus\n  requireApiVersion\n  reservedServiceExecutorRecursionLimit\n  reshardingCollectionClonerBatchSizeInBytes\n  reshardingCoordinatorServiceMaxThreadCount\n  reshardingCriticalSectionTimeoutMillis\n  reshardingDonorServiceMaxThreadCount\n  reshardingMinimumOperationDurationMillis\n  reshardingOplogApplierMaxLockRequestTimeoutMillis\n  reshardingOplogBatchLimitBytes\n  reshardingOplogBatchLimitOperations\n  reshardingOplogBatchTaskCount\n  reshardingRecipientServiceMaxThreadCount\n  reshardingTxnClonerProgressBatchSize\n  resumableIndexBuildMajorityOpTimeTimeoutMillis\n  rewriteStateChangeErrors\n  roleGraphInvalidationIsFatal\n  rollbackRemoteOplogQueryBatchSize\n  rollbackTimeLimitSecs\n  saslHostName\n  saslServiceName\n  saslauthdPath\n  scramIterationCount\n  scramSHA256IterationCount\n  scriptingEngineInterruptIntervalMS\n  shardedIndexConsistencyCheckIntervalMS\n  shutdownTimeoutMillisForSignaledShutdown\n  skipCorruptDocumentsWhenCloning\n  skipShardingConfigurationChecks\n  skipShellCursorFinalize\n  sslMode\n  sslWithholdClientCertificate\n  startupAuthSchemaValidation\n  startupRecoveryForRestore\n  storeFindAndModifyImagesInSideCollection\n  suppressNoTLSPeerCertificateWarning\n  syncdelay\n  synchronousServiceExecutorRecursionLimit\n  takeUnstableCheckpointOnShutdown\n  taskExecutorPoolSize\n  tcmallocAggressiveMemoryDecommit\n  tcmallocEnableMarkThreadTemporarilyIdle\n  tcmallocMaxTotalThreadCacheBytes\n  tcmallocReleaseRate\n  tcpFastOpenClient\n  tcpFastOpenQueueSize\n  tcpFastOpenServer\n  tenantApplierBatchSizeBytes\n  tenantApplierBatchSizeOps\n  tenantApplierThreadCount\n  tenantMigrationBlockingStateTimeoutMS\n  tenantMigrationDisableX509Auth\n  tenantMigrationExcludeDonorHostTimeoutMS\n  tenantMigrationExternalKeysRemovalBufferSecs\n  tenantMigrationGarbageCollectionDelayMS\n  tenantMigrationOplogBufferPeekCacheSize\n  tenantMigrationOplogFetcherBatchSize\n  testingDiagnosticsEnabled\n  testingSnapshotBehaviorInIsolation\n  timeseriesBucketMaxCount\n  timeseriesBucketMaxSize\n  timeseriesBucketsCollectionClusterById\n  timeseriesIdleBucketExpiryMemoryUsageThreshold\n  tlsCATrusts\n  tlsMode\n  tlsOCSPStaplingTimeoutSecs\n  tlsOCSPVerifyTimeoutSecs\n  tlsWithholdClientCertificate\n  tlsX509ClusterAuthDNOverride\n  tlsX509ExpirationWarningThresholdDays\n  totalUnitWriteSizeBytes\n  traceExceptions\n  traceWriteConflictExceptions\n  trafficRecordingDirectory\n  transactionLifetimeLimitSeconds\n  transactionSizeLimitBytes\n  ttlMonitorEnabled\n  ttlMonitorSleepSecs\n  useReadOnceCursorsForIndexBuilds\n  waitForSecondaryBeforeNoopWriteMS\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartup\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartupWaitMS\n  watchdogPeriodSeconds\n  wiredTigerConcurrentReadTransactions\n  wiredTigerConcurrentWriteTransactions\n  wiredTigerCursorCacheSize\n  wiredTigerEngineRuntimeConfig\n  wiredTigerFileHandleCloseIdleTime\n  wiredTigerFileHandleCloseMinimum\n  wiredTigerFileHandleCloseScanInterval\n  wiredTigerMaxCacheOverflowSizeGB\n  wiredTigerSessionCloseIdleTimeSecs\n  writePeriodicNoops\n",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setShardVersion": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "shardingState": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "shutdown": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Shuts down the database. Must be run against the admin database and either (1) run from localhost or (2) run while authenticated with the shutdown privilege. If the node is the primary of a replica set, waits up to 'timeoutSecs' for an electable node to be caught up before stepping down. If 'force' is false and no electable node was able to catch up, does not shut down. If the node is in state SECONDARY after the attempted stepdown, any remaining time in 'timeoutSecs' is used for quiesce mode, where the database continues to allow operations to run, but directs clients to route new operations to other replica set members.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "splitChunk": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal command usage only\nexample:\n { splitChunk:\"db.foo\" , keyPattern: {a:1} , min : {a:100} , max: {a:200} { splitKeys : [ {a:150} , ... ]}",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "splitVector": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command.\nexamples:\n  { splitVector : \"blog.post\" , keyPattern:{x:1} , min:{x:10} , max:{x:20}, maxChunkSize:200 }\n  maxChunkSize unit in MBs\n  May optionally specify 'maxSplitPoints' and 'maxChunkObjects' to avoid traversing the whole chunk\n  \n  { splitVector : \"blog.post\" , keyPattern:{x:1} , min:{x:10} , max:{x:20}, force: true }\n  'force' will produce one split point even if data is small; defaults to false\nNOTE: This command may take a while to run",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "startRecordingTraffic": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "startSession": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "start a logical session",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "stopRecordingTraffic": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "top": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "usage by collection, in micros ",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "update": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "update documents",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "updateRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "updateUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "usersInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "validate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Validate contents of a namespace by scanning its data structures for correctness.\nThis is a slow operation.\n\tAdd {full: true} option to do a more thorough check.\n\tAdd {background: true} to validate in the background.\n\tAdd {repair: true} to run repair mode.\nCannot specify both {full: true, background: true}.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "validateDBMetadata": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "validateDBMetadata checks that the stored metadata of a database/collection is valid within a particular API version. If 'db' parameter is specified, only runs validation against that database, if not the validation will be run againt all dbs. Similarly if 'collection' parameter is specified, the validation is only run against that collection, if not the validation is run against all collections.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "voteCommitIndexBuild": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal intra replica set command",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "waitForFailPoint": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "wait for a fail point to be entered a certain number of times",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "whatsmyuri": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{whatsmyuri:1}",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          }
        },
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:56.197Z	INFO	// 172.20.0.3:43490 -> 172.17.0.1:27017 	clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 78,
-  "RequestID": 7,
+  "MessageLength": 71060,
+  "RequestID": 175,
   "ResponseTo": 18,
@@ -13,11 +13,3762 @@
         "$k": [
-          "argv",
-          "parsed",
+          "commands",
           "ok"
         ],
-        "argv": [
-          "ferretdb"
-        ],
-        "parsed": {
-          "$k": []
+        "commands": {
+          "$k": [
+            "_addShard",
+            "_cloneCollectionOptionsFromPrimaryShard",
+            "_configsvrAbortReshardCollection",
+            "_configsvrAddShard",
+            "_configsvrAddShardToZone",
+            "_configsvrBalancerCollectionStatus",
+            "_configsvrBalancerStart",
+            "_configsvrBalancerStatus",
+            "_configsvrBalancerStop",
+            "_configsvrCleanupReshardCollection",
+            "_configsvrClearJumboFlag",
+            "_configsvrCommitChunkMerge",
+            "_configsvrCommitChunkMigration",
+            "_configsvrCommitChunkSplit",
+            "_configsvrCommitChunksMerge",
+            "_configsvrCommitMovePrimary",
+            "_configsvrCommitReshardCollection",
+            "_configsvrCreateDatabase",
+            "_configsvrDropCollection",
+            "_configsvrDropDatabase",
+            "_configsvrEnableSharding",
+            "_configsvrEnsureChunkVersionIsGreaterThan",
+            "_configsvrMoveChunk",
+            "_configsvrMovePrimary",
+            "_configsvrRefineCollectionShardKey",
+            "_configsvrRemoveChunks",
+            "_configsvrRemoveShard",
+            "_configsvrRemoveShardFromZone",
+            "_configsvrRemoveTags",
+            "_configsvrRenameCollectionMetadata",
+            "_configsvrReshardCollection",
+            "_configsvrSetAllowMigrations",
+            "_configsvrShardCollection",
+            "_configsvrUpdateZoneKeyRange",
+            "_flushDatabaseCacheUpdates",
+            "_flushDatabaseCacheUpdatesWithWriteConcern",
+            "_flushReshardingStateChange",
+            "_flushRoutingTableCacheUpdates",
+            "_flushRoutingTableCacheUpdatesWithWriteConcern",
+            "_getNextSessionMods",
+            "_getUserCacheGeneration",
+            "_isSelf",
+            "_killOperations",
+            "_mergeAuthzCollections",
+            "_migrateClone",
+            "_recvChunkAbort",
+            "_recvChunkCommit",
+            "_recvChunkStart",
+            "_recvChunkStatus",
+            "_shardsvrAbortReshardCollection",
+            "_shardsvrCleanupReshardCollection",
+            "_shardsvrCloneCatalogData",
+            "_shardsvrCommitReshardCollection",
+            "_shardsvrCreateCollection",
+            "_shardsvrCreateCollectionParticipant",
+            "_shardsvrDropCollection",
+            "_shardsvrDropCollectionIfUUIDNotMatching",
+            "_shardsvrDropCollectionParticipant",
+            "_shardsvrDropDatabase",
+            "_shardsvrDropDatabaseParticipant",
+            "_shardsvrMovePrimary",
+            "_shardsvrRefineCollectionShardKey",
+            "_shardsvrRenameCollection",
+            "_shardsvrRenameCollectionParticipant",
+            "_shardsvrRenameCollectionParticipantUnblock",
+            "_shardsvrReshardCollection",
+            "_shardsvrReshardingOperationTime",
+            "_shardsvrShardCollection",
+            "_transferMods",
+            "abortTransaction",
+            "aggregate",
+            "appendOplogNote",
+            "applyOps",
+            "authenticate",
+            "autoSplitVector",
+            "availableQueryOptions",
+            "buildInfo",
+            "checkShardingIndex",
+            "cleanupOrphaned",
+            "cloneCollectionAsCapped",
+            "collMod",
+            "collStats",
+            "commitTransaction",
+            "compact",
+            "connPoolStats",
+            "connPoolSync",
+            "connectionStatus",
+            "convertToCapped",
+            "coordinateCommitTransaction",
+            "count",
+            "create",
+            "createIndexes",
+            "createRole",
+            "createUser",
+            "currentOp",
+            "dataSize",
+            "dbHash",
+            "dbStats",
+            "delete",
+            "distinct",
+            "donorAbortMigration",
+            "donorForgetMigration",
+            "donorStartMigration",
+            "driverOIDTest",
+            "drop",
+            "dropAllRolesFromDatabase",
+            "dropAllUsersFromDatabase",
+            "dropConnections",
+            "dropDatabase",
+            "dropIndexes",
+            "dropRole",
+            "dropUser",
+            "endSessions",
+            "explain",
+            "features",
+            "filemd5",
+            "find",
+            "findAndModify",
+            "flushRouterConfig",
+            "fsync",
+            "fsyncUnlock",
+            "getCmdLineOpts",
+            "getDatabaseVersion",
+            "getDefaultRWConcern",
+            "getDiagnosticData",
+            "getFreeMonitoringStatus",
+            "getLastError",
+            "getLog",
+            "getMore",
+            "getParameter",
+            "getShardMap",
+            "getShardVersion",
+            "getnonce",
+            "grantPrivilegesToRole",
+            "grantRolesToRole",
+            "grantRolesToUser",
+            "hello",
+            "hostInfo",
+            "insert",
+            "internalRenameIfOptionsAndIndexesMatch",
+            "invalidateUserCache",
+            "isMaster",
+            "killAllSessions",
+            "killAllSessionsByPattern",
+            "killCursors",
+            "killOp",
+            "killSessions",
+            "listCollections",
+            "listCommands",
+            "listDatabases",
+            "listIndexes",
+            "lockInfo",
+            "logRotate",
+            "logout",
+            "mapReduce",
+            "mergeChunks",
+            "moveChunk",
+            "ping",
+            "planCacheClear",
+            "planCacheClearFilters",
+            "planCacheListFilters",
+            "planCacheSetFilter",
+            "prepareTransaction",
+            "profile",
+            "reIndex",
+            "recipientForgetMigration",
+            "recipientSyncData",
+            "refreshSessions",
+            "renameCollection",
+            "repairDatabase",
+            "replSetAbortPrimaryCatchUp",
+            "replSetFreeze",
+            "replSetGetConfig",
+            "replSetGetRBID",
+            "replSetGetStatus",
+            "replSetHeartbeat",
+            "replSetInitiate",
+            "replSetMaintenance",
+            "replSetReconfig",
+            "replSetRequestVotes",
+            "replSetResizeOplog",
+            "replSetStepDown",
+            "replSetStepUp",
+            "replSetSyncFrom",
+            "replSetUpdatePosition",
+            "revokePrivilegesFromRole",
+            "revokeRolesFromRole",
+            "revokeRolesFromUser",
+            "rolesInfo",
+            "rotateCertificates",
+            "saslContinue",
+            "saslStart",
+            "serverStatus",
+            "setDefaultRWConcern",
+            "setFeatureCompatibilityVersion",
+            "setFreeMonitoring",
+            "setIndexCommitQuorum",
+            "setParameter",
+            "setShardVersion",
+            "shardingState",
+            "shutdown",
+            "splitChunk",
+            "splitVector",
+            "startRecordingTraffic",
+            "startSession",
+            "stopRecordingTraffic",
+            "top",
+            "update",
+            "updateRole",
+            "updateUser",
+            "usersInfo",
+            "validate",
+            "validateDBMetadata",
+            "voteCommitIndexBuild",
+            "waitForFailPoint",
+            "whatsmyuri"
+          ],
+          "_addShard": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by shards. Do not call directly. Adds a new shard to a cluster.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_cloneCollectionOptionsFromPrimaryShard": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, do not call directly. Creates a collection on a shard with UUID existing on primary.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrAbortReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Aborts any in-progress resharding operations for this collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrAddShard": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and adds a new shard to the cluster.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrAddShardToZone": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and adds a new zone to the shard.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrBalancerCollectionStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Checks whether the chunks of a given collection are in a quiesced state or there are any which need to be moved because of (1) draining shards, (2) zone violation or (3) imbalance between shards.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrBalancerStart": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrBalancerStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrBalancerStop": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCleanupReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Aborts and cleans up any in-progress resharding operations for this collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrClearJumboFlag": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Clears the jumbo flag of the chunk specified.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitChunkMerge": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a MergeChunkRequest",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitChunkMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitChunkSplit": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a SplitChunkRequest.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitChunksMerge": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a MergeChunksRequest",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitMovePrimary": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Allows a reshard operation to enter critical section ASAP.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCreateDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Create a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrDropCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Drops a collection from a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrDropDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Drops a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrEnableSharding": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Enable sharding on a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrEnsureChunkVersionIsGreaterThan": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrMoveChunk": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Requests the balancer to move or rebalance a single chunk.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrMovePrimary": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Reassigns the primary shard of a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRefineCollectionShardKey": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Adds a suffix to the shard key of an existing collection ('refines the shard key').",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRemoveChunks": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes the chunks for the specified collectionUUID.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRemoveShard": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes a shard from the cluster.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRemoveShardFromZone": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and removes the shard from the zone.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRemoveTags": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes the zone tags for the specified ns.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRenameCollectionMetadata": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Renames a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Reshards a collection on a new shard key.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrSetAllowMigrations": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Sets the allowMigrations flag on the specified collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrShardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Shards a collection. Requires key. Optional unique. Sharding must already be enabled for the database",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrUpdateZoneKeyRange": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and assigns a new range to a zone.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushDatabaseCacheUpdates": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command which waits for any pending routing table cache updates for a particular database to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushDatabaseCacheUpdatesWithWriteConcern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command which waits for any pending routing table cache updates for a particular database to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushReshardingStateChange": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command used by the resharding coordinator to flush state changes to the participant shards while the critical section is active.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushRoutingTableCacheUpdates": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command which waits for any pending routing table cache updates for a particular namespace to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushRoutingTableCacheUpdatesWithWriteConcern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command which waits for any pending routing table cache updates for a particular namespace to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_getNextSessionMods": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_getUserCacheGeneration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_isSelf": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ _isSelf : 1 } INTERNAL ONLY",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_killOperations": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command -- Kill operations on the target server by OperationKey.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_mergeAuthzCollections": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_migrateClone": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_recvChunkAbort": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_recvChunkCommit": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_recvChunkStart": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_recvChunkStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrAbortReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the shard server. Do not call directly. Aborts any in-progress resharding operations.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCleanupReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the shard server. Do not call directly. Aborts and cleans up any in-progress resharding operations for this collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCloneCatalogData": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCommitReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the shard server. Do not call directly. Commits an in-progress resharding operations",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCreateCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Creates a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCreateCollectionParticipant": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Creates a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Drops a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropCollectionIfUUIDNotMatching": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command aimed to remove stale entries from the local collection catalog.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropCollectionParticipant": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by secondary sharding servers. Do not call directly. Participates in droping a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Drops a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropDatabaseParticipant": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by secondary sharding servers. Do not call directly. Participates in droping a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrMovePrimary": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrRefineCollectionShardKey": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Refines Collection shard key.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrRenameCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Renames a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrRenameCollectionParticipant": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Locally renames a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrRenameCollectionParticipantUnblock": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Releases the critical section of source and target collections.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Reshards a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrReshardingOperationTime": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command used by the resharding coordinator to query the elapsed and remaining time for the active resharding operation on participant shards.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrShardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_transferMods": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "abortTransaction": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Aborts a transaction",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "aggregate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Runs the aggregation command. See http://dochub.mongodb.org/core/aggregation for more details.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "appendOplogNote": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Adds a no-op entry to the oplog",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "applyOps": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal (sharding)\n{ applyOps : [ ] , preCondition : [ { ns : ... , q : ... , res : ... } ] }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "authenticate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "autoSplitVector": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command returning the split points for a chunk, given the maximum chunk size.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "availableQueryOptions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "buildInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get version #, etc.\n{ buildinfo:1 }",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "checkShardingIndex": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command.\n",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "cleanupOrphaned": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "cloneCollectionAsCapped": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ cloneCollectionAsCapped:\u003cfromName\u003e, toCollection:\u003ctoName\u003e, size:\u003csizeInBytes\u003e }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "collMod": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Sets collection options.\nExample: { collMod: 'foo', viewOn: 'bar'} Example: { collMod: 'foo', index: {keyPattern: {a: 1}, expireAfterSeconds: 600} Example: { collMod: 'foo', index: {name: 'bar', expireAfterSeconds: 600} }\n",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "collStats": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ collStats:\"blog.posts\" , scale : 1 } scale divides sizes e.g. for KB use 1024\n    avgObjSize - in bytes",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "commitTransaction": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Commits a transaction",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "compact": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "compact collection\nwarning: this operation locks the database and is slow. you can cancel with killOp()\n{ compact : \u003ccollection_name\u003e, [force:\u003cbool\u003e] }\n  force - allows to run on a replica set primary\n",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "connPoolStats": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "stats about connections between servers in a replica set or sharded cluster.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "connPoolSync": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "connectionStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Returns connection-specific information such as logged-in users and their roles",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "convertToCapped": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ convertToCapped:\u003cfromCollectionName\u003e, size:\u003csizeInBytes\u003e }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "coordinateCommitTransaction": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Coordinates the commit for a transaction. Only called by mongos.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "count": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "count objects in collection",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "create": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "explicitly creates a collection or view\n{\n  create: \u003cstring: collection or view name\u003e [,\n  capped: \u003cbool: capped collection\u003e,\n  autoIndexId: \u003cbool: automatic creation of _id index\u003e,\n  idIndex: \u003cdocument: _id index specification\u003e,\n  size: \u003cint: size in bytes of the capped collection\u003e,\n  max: \u003cint: max number of documents in the capped collection\u003e,\n  storageEngine: \u003cdocument: storage engine configuration\u003e,\n  validator: \u003cdocument: validation rules\u003e,\n  validationLevel: \u003cstring: validation level\u003e,\n  validationAction: \u003cstring: validation action\u003e,\n  indexOptionDefaults: \u003cdocument: default configuration for indexes\u003e,\n  viewOn: \u003cstring: name of source collection or view\u003e,\n  pipeline: \u003carray\u003cobject\u003e: aggregation pipeline stage\u003e,\n  collation: \u003cdocument: default collation for the collection or view\u003e,\n  writeConcern: \u003cdocument: write concern expression for the operation\u003e]\n}",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "createIndexes": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "createRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "createUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "currentOp": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dataSize": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "determine data size for a set of data in a certain range\nexample: { dataSize:\"blog.posts\", keyPattern:{x:1}, min:{x:10}, max:{x:55} }\nmin and max parameters are optional. They must either both be included or both omitted\nkeyPattern is an optional parameter indicating an index pattern that would be usefulfor iterating over the min/max bounds. If keyPattern is omitted, it is inferred from the structure of min. \nnote: This command may take a while to run",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dbHash": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dbStats": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Get stats on a database. Not instantaneous. Slower for databases with large .ns files.\nExample: { dbStats:1, scale:1 }",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "delete": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "delete documents",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "distinct": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ distinct : 'collection name' , key : 'a.b' , query : {} }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "donorAbortMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Abort a migration",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "donorForgetMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Forget a migration",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "donorStartMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Start migrating databases whose names match the specified prefix to the specified replica set.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "driverOIDTest": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "drop": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "drop a collection\n{drop : \u003ccollectionName\u003e}",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "dropAllRolesFromDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dropAllUsersFromDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dropConnections": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Drop egress connections to specified host and port",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dropDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "drop (delete) this database",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "dropIndexes": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "drop indexes for a collection",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "dropRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dropUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "endSessions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "end a set of logical sessions",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "explain": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "explain database reads and writes",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "features": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "return build level feature settings",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "filemd5": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": " example: { filemd5 : ObjectId(aaaaaaa) , root : \"fs\" }",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "find": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "query for documents",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "findAndModify": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ findAndModify: \"collection\", query: {processed:false}, update: {$set: {processed:true}}, new: true}\n{ findAndModify: \"collection\", query: {processed:false}, remove: true, sort: {priority:-1}}\nEither update or remove is required, all other fields have default values.\nOutput is in the \"value\" field\n",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "flushRouterConfig": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Flushes the cached routing information for a single collection, entire database (and its collections) or all databases, which would cause full reload from the config server on the next access.\nUsage:\n{flushRouterConfig: 1} flushes all databases\n{flushRouterConfig: 'db'} flushes only the given database (and its collections)\n{flushRouterconfig: 'db.coll'} flushes only the given collection",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "fsync": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "http://dochub.mongodb.org/core/fsynccommand",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "fsyncUnlock": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getCmdLineOpts": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get argv",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getDatabaseVersion": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": " example: { getDatabaseVersion : 'foo'  } ",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getDefaultRWConcern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get the current read/write concern defaults being applied by this node",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getDiagnosticData": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get latest diagnostic data collection snapshot",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getFreeMonitoringStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Indicates free monitoring status",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getLastError": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "return error status of the last operation on this connection\noptions:\n  { fsync:true } - fsync before returning, or wait for journal commit if running with --journal\n  { j:true } - wait for journal commit if running with --journal\n  { w:n } - await replication to n servers (including self) before returning\n  { w:'majority' } - await replication to majority of set\n  { wtimeout:m} - timeout for w in m milliseconds",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getLog": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ getLog : '*' }  OR { getLog : 'global' }",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getMore": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "retrieve more results from an existing cursor",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "getParameter": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get administrative option(s)\nexample:\n{ getParameter:1, notablescan:1 }\nsupported:\n  AlwaysRecordTraffic\n  KeysRotationIntervalSec\n  ShardingTaskExecutorPoolHostTimeoutMS\n  ShardingTaskExecutorPoolMaxConnecting\n  ShardingTaskExecutorPoolMaxSize\n  ShardingTaskExecutorPoolMinSize\n  ShardingTaskExecutorPoolRefreshRequirementMS\n  ShardingTaskExecutorPoolRefreshTimeoutMS\n  ShardingTaskExecutorPoolReplicaSetMatching\n  TransactionRecordMinimumLifetimeMinutes\n  acceptApiVersion2\n  aggregateOperationResourceConsumptionMetrics\n  allowRolesFromX509Certificates\n  authSchemaVersion\n  authenticationMechanisms\n  authorizationManagerCacheSize\n  authorizationManagerPinnedUsers\n  authorizationManagerPinnedUsersRefreshIntervalMillis\n  automationServiceDescriptor\n  awsEC2InstanceMetadataUrl\n  awsECSInstanceMetadataUrl\n  bgSyncOplogFetcherBatchSize\n  changeSyncSourceThresholdMillis\n  clientCursorMonitorFrequencySecs\n  cloudFreeMonitoringEndpointURL\n  clusterAuthMode\n  collectionBulkLoaderBatchSizeInBytes\n  collectionClonerBatchSize\n  collectionClonerUsesExhaust\n  connPoolMaxConnsPerHost\n  connPoolMaxInUseConnsPerHost\n  connectTimeoutMs\n  coordinateCommitReturnImmediatelyAfterPersistingDecision\n  createRollbackDataFiles\n  cursorTimeoutMillis\n  deprecatedWireOpsWarningPeriodInSeconds\n  diagnosticDataCollectionDirectoryPath\n  diagnosticDataCollectionDirectorySizeMB\n  diagnosticDataCollectionEnableLatencyHistograms\n  diagnosticDataCollectionEnabled\n  diagnosticDataCollectionFileSizeMB\n  diagnosticDataCollectionPeriodMillis\n  diagnosticDataCollectionSamplesPerChunk\n  diagnosticDataCollectionSamplesPerInterimUpdate\n  diagnosticDataCollectionVerboseTCMalloc\n  disableJavaScriptJIT\n  disableLogicalSessionCacheRefresh\n  disableNonSSLConnectionLogging\n  disableNonTLSConnectionLogging\n  disableResumableRangeDeleter\n  disableSplitHorizonIPCheck\n  disabledSecureAllocatorDomains\n  documentUnitSizeBytes\n  enableDefaultWriteConcernUpdatesForInitiate\n  enableElectionHandoff\n  enableFinerGrainedCatalogCacheRefresh\n  enableFlowControl\n  enableIndexBuildCommitQuorum\n  enableLocalhostAuthBypass\n  enableOverrideClusterChainingSetting\n  enableReconfigRollbackCommittedWritesCheck\n  enableResumableIndexBuilds\n  enableSearchMeta\n  enableShardedIndexConsistencyCheck\n  enableTestCommands\n  enableTimeoutOfInactiveSessionCursors\n  enforceUserClusterSeparation\n  featureCompatibilityVersion\n  featureFlagBlender\n  featureFlagChangeStreamsOptimization\n  featureFlagDefaultReadConcernLocal\n  featureFlagDefaultWriteConcernMajority\n  featureFlagDotsAndDollars\n  featureFlagFryer\n  featureFlagLockFreeReads\n  featureFlagResharding\n  featureFlagRetryableFindAndModify\n  featureFlagSearchMeta\n  featureFlagShardedTimeSeries\n  featureFlagShardedTimeSeriesUpdateDelete\n  featureFlagShardingFullDDLSupport\n  featureFlagSpoon\n  featureFlagTenantMigrations\n  featureFlagTimeseriesCollection\n  featureFlagTimeseriesUpdatesAndDeletes\n  featureFlagToaster\n  featureFlagUseSecondaryDelaySecs\n  findChunksOnConfigTimeoutMS\n  fixedServiceExecutorRecursionLimit\n  fixedServiceExecutorThreadLimit\n  flowControlDecayConstant\n  flowControlFudgeFactor\n  flowControlMaxSamples\n  flowControlMinTicketsPerSecond\n  flowControlSamplePeriod\n  flowControlTargetLagSeconds\n  flowControlThresholdLagPercentage\n  flowControlTicketAdderConstant\n  flowControlTicketMultiplierConstant\n  flowControlWarnThresholdSeconds\n  forceRollbackViaRefetch\n  globalConnPoolIdleTimeoutMinutes\n  heapProfilingEnabled\n  heapProfilingSampleIntervalBytes\n  heartBeatFrequencyMs\n  honorSystemUmask\n  indexEntryUnitSizeBytes\n  initialServiceExecutorThreadingModel\n  initialSyncOplogBuffer\n  initialSyncOplogBufferPeekCacheSize\n  initialSyncOplogFetcherBatchSize\n  initialSyncSourceReadPreference\n  initialSyncTransientErrorRetryPeriodSeconds\n  internalDocumentSourceCursorBatchSizeBytes\n  internalDocumentSourceGroupMaxMemoryBytes\n  internalDocumentSourceLookupCacheSizeBytes\n  internalDocumentSourceSetWindowFieldsMaxMemoryBytes\n  internalGeoNearQuery2DMaxCoveringCells\n  internalGeoPredicateQuery2DMaxCoveringCells\n  internalIndexBuildBulkLoadYieldIterations\n  internalInsertMaxBatchSize\n  internalLookupStageIntermediateDocumentMaxSizeBytes\n  internalPipelineLengthLimit\n  internalProhibitShardOperationRetry\n  internalQueryAllowShardedLookup\n  internalQueryAlwaysMergeOnPrimaryShard\n  internalQueryAppendIdToSetWindowFieldsSort\n  internalQueryCacheDisableInactiveEntries\n  internalQueryCacheEvictionRatio\n  internalQueryCacheMaxEntriesPerCollection\n  internalQueryCacheMaxSizeBytesBeforeStripDebugInfo\n  internalQueryCacheSize\n  internalQueryCacheWorksGrowthCoefficient\n  internalQueryDefaultDOP\n  internalQueryDesugarWhereToFunction\n  internalQueryDisableExchange\n  internalQueryEnableCSTParser\n  internalQueryEnableLoggingV2OplogEntries\n  internalQueryEnableSlotBasedExecutionEngine\n  internalQueryEnumerationMaxIntersectPerAnd\n  internalQueryEnumerationMaxOrSolutions\n  internalQueryEnumerationPreferLockstepOrEnumeration\n  internalQueryExecYieldIterations\n  internalQueryExecYieldPeriodMS\n  internalQueryExplainSizeThresholdBytes\n  internalQueryFacetBufferSizeBytes\n  internalQueryFacetMaxOutputDocSizeBytes\n  internalQueryForceIntersectionPlans\n  internalQueryIgnoreUnknownJSONSchemaKeywords\n  internalQueryJavaScriptFnTimeoutMillis\n  internalQueryJavaScriptHeapSizeLimitMB\n  internalQueryMaxAddToSetBytes\n  internalQueryMaxBlockingSortMemoryUsageBytes\n  internalQueryMaxDocValidationErrorConsideredValues\n  internalQueryMaxJsEmitBytes\n  internalQueryMaxPushBytes\n  internalQueryMaxRangeBytes\n  internalQueryMaxScansToExplode\n  internalQueryPlanEvaluationCollFraction\n  internalQueryPlanEvaluationMaxResults\n  internalQueryPlanEvaluationWorks\n  internalQueryPlanOrChildrenIndependently\n  internalQueryPlannerEnableHashIntersection\n  internalQueryPlannerEnableIndexIntersection\n  internalQueryPlannerGenerateCoveredWholeIndexScans\n  internalQueryPlannerMaxIndexedSolutions\n  internalQueryProhibitBlockingMergeOnMongoS\n  internalQueryProhibitMergingOnMongoS\n  internalQueryS2GeoCoarsestLevel\n  internalQueryS2GeoFinestLevel\n  internalQueryS2GeoMaxCells\n  internalQuerySlotBasedExecutionMaxStaticIndexScanIntervals\n  internalValidateFeaturesAsMaster\n  internalValidateFeaturesAsPrimary\n  javascriptProtection\n  journalCommitInterval\n  jsHeapLimitMB\n  loadRoutingTableOnStartup\n  localLogicalSessionTimeoutMinutes\n  localThresholdMs\n  logComponentVerbosity\n  logLevel\n  logicalSessionRefreshMillis\n  maxAcceptableLogicalClockDriftSecs\n  maxBSONDepth\n  maxCatchUpPercentageBeforeBlockingWrites\n  maxIndexBuildDrainBatchSize\n  maxIndexBuildDrainMemoryUsageMegabytes\n  maxIndexBuildMemoryUsageMegabytes\n  maxLogSizeKB\n  maxNumActiveUserIndexBuilds\n  maxNumSyncSourceChangesPerHour\n  maxNumberOfTransactionOperationsInSingleOplogEntry\n  maxOplogTruncationPointsAfterStartup\n  maxOplogTruncationPointsDuringStartup\n  maxSessions\n  maxSyncSourceLagSecs\n  maxTenantMigrationDonorServiceThreadPoolSize\n  maxTenantMigrationRecipientThreadPoolSize\n  maxTimeMSForHedgedReads\n  maxTransactionLockRequestTimeoutMillis\n  maxValidateMBperSec\n  maxValidateMemoryUsageMB\n  metadataRefreshInTransactionMaxWaitBehindCritSecMS\n  migrateCloneInsertionBatchDelayMS\n  migrateCloneInsertionBatchSize\n  migrationLockAcquisitionMaxWaitMS\n  minNumChunksForSessionsCollection\n  minOplogEntriesPerThread\n  minOplogTruncationPoints\n  minSnapshotHistoryWindowInSeconds\n  mirrorReads\n  mongosShutdownTimeoutMillisForSignaledShutdown\n  notablescan\n  numInitialSyncAttempts\n  numInitialSyncConnectAttempts\n  numInitialSyncOplogFindAttempts\n  ocspCacheSize\n  ocspEnabled\n  ocspStaplingRefreshPeriodSecs\n  ocspValidationRefreshPeriodSecs\n  opensslCipherConfig\n  opensslCipherSuiteConfig\n  opensslDiffieHellmanParameters\n  operationMemoryPoolBlockInitialSizeKB\n  operationMemoryPoolBlockMaxSizeKB\n  oplogApplicationEnforcesSteadyStateConstraints\n  oplogFetcherInitialSyncMaxFetcherRestarts\n  oplogFetcherSteadyStateMaxFetcherRestarts\n  oplogFetcherUsesExhaust\n  oplogInitialFindMaxSeconds\n  oplogNetworkTimeoutBufferSeconds\n  oplogRetriedFindMaxSeconds\n  oplogSamplingLogIntervalSeconds\n  oplogTruncationPointSizeMB\n  orphanCleanupDelaySecs\n  periodicNoopIntervalSecs\n  priorityTakeoverFreshnessWindowSeconds\n  processUmask\n  profileOperationResourceConsumptionMetrics\n  quiet\n  rangeDeleterBatchDelayMS\n  rangeDeleterBatchSize\n  readHedgingMode\n  receiveChunkWaitForRangeDeleterTimeoutMS\n  recoverFromOplogAsStandalone\n  recoverToOplogTimestamp\n  remainingReshardingOperationTimeThresholdMillis\n  replBatchLimitBytes\n  replBatchLimitOperations\n  replElectionTimeoutOffsetLimitFraction\n  replWriterMinThreadCount\n  replWriterThreadCount\n  replicaSetMonitorProtocol\n  reportOpWriteConcernCountersInServerStatus\n  requireApiVersion\n  reservedServiceExecutorRecursionLimit\n  reshardingCollectionClonerBatchSizeInBytes\n  reshardingCoordinatorServiceMaxThreadCount\n  reshardingCriticalSectionTimeoutMillis\n  reshardingDonorServiceMaxThreadCount\n  reshardingMinimumOperationDurationMillis\n  reshardingOplogApplierMaxLockRequestTimeoutMillis\n  reshardingOplogBatchLimitBytes\n  reshardingOplogBatchLimitOperations\n  reshardingOplogBatchTaskCount\n  reshardingRecipientServiceMaxThreadCount\n  reshardingTxnClonerProgressBatchSize\n  resumableIndexBuildMajorityOpTimeTimeoutMillis\n  rewriteStateChangeErrors\n  roleGraphInvalidationIsFatal\n  rollbackRemoteOplogQueryBatchSize\n  rollbackTimeLimitSecs\n  saslHostName\n  saslServiceName\n  saslauthdPath\n  scramIterationCount\n  scramSHA256IterationCount\n  scriptingEngineInterruptIntervalMS\n  shardedIndexConsistencyCheckIntervalMS\n  shutdownTimeoutMillisForSignaledShutdown\n  skipCorruptDocumentsWhenCloning\n  skipShardingConfigurationChecks\n  skipShellCursorFinalize\n  sslMode\n  sslWithholdClientCertificate\n  startupAuthSchemaValidation\n  startupRecoveryForRestore\n  storeFindAndModifyImagesInSideCollection\n  suppressNoTLSPeerCertificateWarning\n  syncdelay\n  synchronousServiceExecutorRecursionLimit\n  takeUnstableCheckpointOnShutdown\n  taskExecutorPoolSize\n  tcmallocAggressiveMemoryDecommit\n  tcmallocEnableMarkThreadTemporarilyIdle\n  tcmallocMaxTotalThreadCacheBytes\n  tcmallocReleaseRate\n  tcpFastOpenClient\n  tcpFastOpenQueueSize\n  tcpFastOpenServer\n  tenantApplierBatchSizeBytes\n  tenantApplierBatchSizeOps\n  tenantApplierThreadCount\n  tenantMigrationBlockingStateTimeoutMS\n  tenantMigrationDisableX509Auth\n  tenantMigrationExcludeDonorHostTimeoutMS\n  tenantMigrationExternalKeysRemovalBufferSecs\n  tenantMigrationGarbageCollectionDelayMS\n  tenantMigrationOplogBufferPeekCacheSize\n  tenantMigrationOplogFetcherBatchSize\n  testingDiagnosticsEnabled\n  testingSnapshotBehaviorInIsolation\n  timeseriesBucketMaxCount\n  timeseriesBucketMaxSize\n  timeseriesBucketsCollectionClusterById\n  timeseriesIdleBucketExpiryMemoryUsageThreshold\n  tlsCATrusts\n  tlsMode\n  tlsOCSPStaplingTimeoutSecs\n  tlsOCSPVerifyTimeoutSecs\n  tlsWithholdClientCertificate\n  tlsX509ClusterAuthDNOverride\n  tlsX509ExpirationWarningThresholdDays\n  totalUnitWriteSizeBytes\n  traceExceptions\n  traceWriteConflictExceptions\n  trafficRecordingDirectory\n  transactionLifetimeLimitSeconds\n  transactionSizeLimitBytes\n  ttlMonitorEnabled\n  ttlMonitorSleepSecs\n  useReadOnceCursorsForIndexBuilds\n  waitForSecondaryBeforeNoopWriteMS\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartup\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartupWaitMS\n  watchdogPeriodSeconds\n  wiredTigerConcurrentReadTransactions\n  wiredTigerConcurrentWriteTransactions\n  wiredTigerCursorCacheSize\n  wiredTigerEngineRuntimeConfig\n  wiredTigerFileHandleCloseIdleTime\n  wiredTigerFileHandleCloseMinimum\n  wiredTigerFileHandleCloseScanInterval\n  wiredTigerMaxCacheOverflowSizeGB\n  wiredTigerSessionCloseIdleTimeSecs\n  writePeriodicNoops\n{ getParameter:'*' } to get everything\n",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getShardMap": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "lists the set of shards known to this instance",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getShardVersion": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": " example: { getShardVersion : 'alleyinsider.foo'  } ",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getnonce": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "grantPrivilegesToRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "grantRolesToRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "grantRolesToUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "hello": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Check if this server is primary for a replica set\n{ hello : 1 }",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "hostInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "returns information about the daemon's host",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "insert": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "insert documents",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "internalRenameIfOptionsAndIndexesMatch": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command to rename and check collection options",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "invalidateUserCache": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "isMaster": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Check if this server is primary for a replica set\n{ isMaster : 1 }",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "killAllSessions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "kill all logical sessions, for a user, and their operations",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "killAllSessionsByPattern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "kill logical sessions by pattern",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "killCursors": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Kill a list of cursor ids",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "killOp": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "killSessions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "kill a logical session and its operations",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "listCollections": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "list collections for this db",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "listCommands": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get a list of all db commands",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "listDatabases": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ listDatabases:1, [filter: \u003cfilterObject\u003e] [, nameOnly: true ] }\nlist databases on this server",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "listIndexes": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "list indexes for a collection",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "lockInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "show all lock info on the server",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "logRotate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "logout": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "de-authenticate",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "mapReduce": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Runs the mapReduce command. See http://dochub.mongodb.org/core/mapreduce for details.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "mergeChunks": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command to merge a contiguous range of chunks.\nUsage: { mergeChunks: \u003cns\u003e, epoch: \u003cepoch\u003e, bounds: [\u003cmin key\u003e, \u003cmax key\u003e] }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "moveChunk": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "ping": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "a way to check that the server is alive. responds immediately even if server is in a db lock.",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "planCacheClear": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Drops one or all plan cache entries in a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "planCacheClearFilters": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Clears index filter for a single query shape or, if the query shape is omitted, all filters for the collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "planCacheListFilters": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Displays index filters for all query shapes in a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "planCacheSetFilter": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Sets index filter for a query shape. Overrides existing filter.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "prepareTransaction": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Prepares a transaction on this shard; sent by a router or re-sent by the transaction commit coordinator for a cross-shard transaction",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "profile": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "controls the behaviour of the performance profiler, the fraction of eligible operations which are sampled for logging/profiling, and the threshold duration at which ops become eligible. See http://docs.mongodb.org/manual/reference/command/profile",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "reIndex": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "re-index a collection (can only be run on a standalone mongod)",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "recipientForgetMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Interrupts tenant migration data sync and marks that the recipient's durable state machine may be garbage collected.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "recipientSyncData": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal replica set command; instructs the recipient to sync data as part of a tenant migration.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "refreshSessions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "renew a set of logical sessions",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "renameCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": " example: { renameCollection: foo.a, to: bar.b }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "repairDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "This command has been removed. If you would like to compact your data, use the 'compact' command. If you would like to rebuild indexes, use the 'reIndex' command. If you need to recover data, please see the documentation for repairing your database offline: http://dochub.mongodb.org/core/repair",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetAbortPrimaryCatchUp": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ CmdReplSetAbortPrimaryCatchUp : 1 }\nAbort primary catch-up mode; immediately finish the transition to primary without fetching any further unreplicated writes from any other online nodes",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetFreeze": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ replSetFreeze : \u003cseconds\u003e }\n'freeze' state of member to the extent we can do that.  What this really means is that\nthis node will not attempt to become primary until the time period specified expires.\nYou can call again with {replSetFreeze:0} to unfreeze sooner.\nA process restart unfreezes the member also.\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetGetConfig": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Returns the current replica set configuration{ replSetGetConfig : 1 }\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetGetRBID": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetGetStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Report status of a replica set from the POV of this server\n{ replSetGetStatus : 1 }\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetHeartbeat": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetInitiate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Initiate/christen a replica set.\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetMaintenance": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ replSetMaintenance : bool }\nEnable or disable maintenance mode.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetReconfig": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Adjust configuration of a replica set\n{ replSetReconfig : config_object }\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetRequestVotes": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetResizeOplog": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Resize oplog using size (in MBs) and optionally, retention (in terms of hours)",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetStepDown": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ replSetStepDown : \u003cseconds\u003e }\nStep down as primary.  Will not try to reelect self for the specified time period (1 minute if no numeric secs value specified, or secs is 0).\n(If another member with same priority takes over in the meantime, it will stay primary.)\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetStepUp": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetSyncFrom": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ replSetSyncFrom : \"host:port\" }\nChange who this member is syncing from. Note: This will interrupt and restart an in-progress initial sync.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetUpdatePosition": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "revokePrivilegesFromRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "revokeRolesFromRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "revokeRolesFromUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "rolesInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "rotateCertificates": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Rotate certificates for new SSL connections",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "saslContinue": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Subsequent steps in a SASL authentication conversation.",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "saslStart": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "First step in a SASL authentication conversation.",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "serverStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "returns lots of administrative server statistics",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setDefaultRWConcern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "set the current read/write concern defaults (cluster-wide)",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setFeatureCompatibilityVersion": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Set the featureCompatibilityVersion used by this cluster. If set to '4.4', then features introduced in versions greater than '4.4' will be disabled If set to '4.9', then features introduced in '5.0' will be disabled. If set to '5.0', then '5.0' features are enabled, and all nodes in the cluster must be binary version 5.0. See https://docs.mongodb.com/master/release-notes/4.4-compatibility/#feature-compatibility.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setFreeMonitoring": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "enable or disable Free Monitoring",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setIndexCommitQuorum": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Resets the commitQuorum for the given index builds in a collection. Usage:\n{\n    setIndexCommitQuorum: \u003cstring\u003e collection name,\n    indexNames: array\u003cstring\u003e list of index names,\n    commitQuorum: \u003cstring|number|object\u003e option to define the required quorum for\n                  the index builds to commit\n}",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setParameter": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "set administrative option(s)\n{ setParameter:1, \u003cparam\u003e:\u003cvalue\u003e }\nsupported:\n  AlwaysRecordTraffic\n  KeysRotationIntervalSec\n  ShardingTaskExecutorPoolHostTimeoutMS\n  ShardingTaskExecutorPoolMaxConnecting\n  ShardingTaskExecutorPoolMaxSize\n  ShardingTaskExecutorPoolMinSize\n  ShardingTaskExecutorPoolRefreshRequirementMS\n  ShardingTaskExecutorPoolRefreshTimeoutMS\n  ShardingTaskExecutorPoolReplicaSetMatching\n  TransactionRecordMinimumLifetimeMinutes\n  acceptApiVersion2\n  aggregateOperationResourceConsumptionMetrics\n  allowRolesFromX509Certificates\n  authSchemaVersion\n  authenticationMechanisms\n  authorizationManagerCacheSize\n  authorizationManagerPinnedUsers\n  authorizationManagerPinnedUsersRefreshIntervalMillis\n  automationServiceDescriptor\n  awsEC2InstanceMetadataUrl\n  awsECSInstanceMetadataUrl\n  bgSyncOplogFetcherBatchSize\n  changeSyncSourceThresholdMillis\n  clientCursorMonitorFrequencySecs\n  cloudFreeMonitoringEndpointURL\n  clusterAuthMode\n  collectionBulkLoaderBatchSizeInBytes\n  collectionClonerBatchSize\n  collectionClonerUsesExhaust\n  connPoolMaxConnsPerHost\n  connPoolMaxInUseConnsPerHost\n  connectTimeoutMs\n  coordinateCommitReturnImmediatelyAfterPersistingDecision\n  createRollbackDataFiles\n  cursorTimeoutMillis\n  deprecatedWireOpsWarningPeriodInSeconds\n  diagnosticDataCollectionDirectoryPath\n  diagnosticDataCollectionDirectorySizeMB\n  diagnosticDataCollectionEnableLatencyHistograms\n  diagnosticDataCollectionEnabled\n  diagnosticDataCollectionFileSizeMB\n  diagnosticDataCollectionPeriodMillis\n  diagnosticDataCollectionSamplesPerChunk\n  diagnosticDataCollectionSamplesPerInterimUpdate\n  diagnosticDataCollectionVerboseTCMalloc\n  disableJavaScriptJIT\n  disableLogicalSessionCacheRefresh\n  disableNonSSLConnectionLogging\n  disableNonTLSConnectionLogging\n  disableResumableRangeDeleter\n  disableSplitHorizonIPCheck\n  disabledSecureAllocatorDomains\n  documentUnitSizeBytes\n  enableDefaultWriteConcernUpdatesForInitiate\n  enableElectionHandoff\n  enableFinerGrainedCatalogCacheRefresh\n  enableFlowControl\n  enableIndexBuildCommitQuorum\n  enableLocalhostAuthBypass\n  enableOverrideClusterChainingSetting\n  enableReconfigRollbackCommittedWritesCheck\n  enableResumableIndexBuilds\n  enableSearchMeta\n  enableShardedIndexConsistencyCheck\n  enableTestCommands\n  enableTimeoutOfInactiveSessionCursors\n  enforceUserClusterSeparation\n  featureCompatibilityVersion\n  featureFlagBlender\n  featureFlagChangeStreamsOptimization\n  featureFlagDefaultReadConcernLocal\n  featureFlagDefaultWriteConcernMajority\n  featureFlagDotsAndDollars\n  featureFlagFryer\n  featureFlagLockFreeReads\n  featureFlagResharding\n  featureFlagRetryableFindAndModify\n  featureFlagSearchMeta\n  featureFlagShardedTimeSeries\n  featureFlagShardedTimeSeriesUpdateDelete\n  featureFlagShardingFullDDLSupport\n  featureFlagSpoon\n  featureFlagTenantMigrations\n  featureFlagTimeseriesCollection\n  featureFlagTimeseriesUpdatesAndDeletes\n  featureFlagToaster\n  featureFlagUseSecondaryDelaySecs\n  findChunksOnConfigTimeoutMS\n  fixedServiceExecutorRecursionLimit\n  fixedServiceExecutorThreadLimit\n  flowControlDecayConstant\n  flowControlFudgeFactor\n  flowControlMaxSamples\n  flowControlMinTicketsPerSecond\n  flowControlSamplePeriod\n  flowControlTargetLagSeconds\n  flowControlThresholdLagPercentage\n  flowControlTicketAdderConstant\n  flowControlTicketMultiplierConstant\n  flowControlWarnThresholdSeconds\n  forceRollbackViaRefetch\n  globalConnPoolIdleTimeoutMinutes\n  heapProfilingEnabled\n  heapProfilingSampleIntervalBytes\n  heartBeatFrequencyMs\n  honorSystemUmask\n  indexEntryUnitSizeBytes\n  initialServiceExecutorThreadingModel\n  initialSyncOplogBuffer\n  initialSyncOplogBufferPeekCacheSize\n  initialSyncOplogFetcherBatchSize\n  initialSyncSourceReadPreference\n  initialSyncTransientErrorRetryPeriodSeconds\n  internalDocumentSourceCursorBatchSizeBytes\n  internalDocumentSourceGroupMaxMemoryBytes\n  internalDocumentSourceLookupCacheSizeBytes\n  internalDocumentSourceSetWindowFieldsMaxMemoryBytes\n  internalGeoNearQuery2DMaxCoveringCells\n  internalGeoPredicateQuery2DMaxCoveringCells\n  internalIndexBuildBulkLoadYieldIterations\n  internalInsertMaxBatchSize\n  internalLookupStageIntermediateDocumentMaxSizeBytes\n  internalPipelineLengthLimit\n  internalProhibitShardOperationRetry\n  internalQueryAllowShardedLookup\n  internalQueryAlwaysMergeOnPrimaryShard\n  internalQueryAppendIdToSetWindowFieldsSort\n  internalQueryCacheDisableInactiveEntries\n  internalQueryCacheEvictionRatio\n  internalQueryCacheMaxEntriesPerCollection\n  internalQueryCacheMaxSizeBytesBeforeStripDebugInfo\n  internalQueryCacheSize\n  internalQueryCacheWorksGrowthCoefficient\n  internalQueryDefaultDOP\n  internalQueryDesugarWhereToFunction\n  internalQueryDisableExchange\n  internalQueryEnableCSTParser\n  internalQueryEnableLoggingV2OplogEntries\n  internalQueryEnableSlotBasedExecutionEngine\n  internalQueryEnumerationMaxIntersectPerAnd\n  internalQueryEnumerationMaxOrSolutions\n  internalQueryEnumerationPreferLockstepOrEnumeration\n  internalQueryExecYieldIterations\n  internalQueryExecYieldPeriodMS\n  internalQueryExplainSizeThresholdBytes\n  internalQueryFacetBufferSizeBytes\n  internalQueryFacetMaxOutputDocSizeBytes\n  internalQueryForceIntersectionPlans\n  internalQueryIgnoreUnknownJSONSchemaKeywords\n  internalQueryJavaScriptFnTimeoutMillis\n  internalQueryJavaScriptHeapSizeLimitMB\n  internalQueryMaxAddToSetBytes\n  internalQueryMaxBlockingSortMemoryUsageBytes\n  internalQueryMaxDocValidationErrorConsideredValues\n  internalQueryMaxJsEmitBytes\n  internalQueryMaxPushBytes\n  internalQueryMaxRangeBytes\n  internalQueryMaxScansToExplode\n  internalQueryPlanEvaluationCollFraction\n  internalQueryPlanEvaluationMaxResults\n  internalQueryPlanEvaluationWorks\n  internalQueryPlanOrChildrenIndependently\n  internalQueryPlannerEnableHashIntersection\n  internalQueryPlannerEnableIndexIntersection\n  internalQueryPlannerGenerateCoveredWholeIndexScans\n  internalQueryPlannerMaxIndexedSolutions\n  internalQueryProhibitBlockingMergeOnMongoS\n  internalQueryProhibitMergingOnMongoS\n  internalQueryS2GeoCoarsestLevel\n  internalQueryS2GeoFinestLevel\n  internalQueryS2GeoMaxCells\n  internalQuerySlotBasedExecutionMaxStaticIndexScanIntervals\n  internalValidateFeaturesAsMaster\n  internalValidateFeaturesAsPrimary\n  javascriptProtection\n  journalCommitInterval\n  jsHeapLimitMB\n  loadRoutingTableOnStartup\n  localLogicalSessionTimeoutMinutes\n  localThresholdMs\n  logComponentVerbosity\n  logLevel\n  logicalSessionRefreshMillis\n  maxAcceptableLogicalClockDriftSecs\n  maxBSONDepth\n  maxCatchUpPercentageBeforeBlockingWrites\n  maxIndexBuildDrainBatchSize\n  maxIndexBuildDrainMemoryUsageMegabytes\n  maxIndexBuildMemoryUsageMegabytes\n  maxLogSizeKB\n  maxNumActiveUserIndexBuilds\n  maxNumSyncSourceChangesPerHour\n  maxNumberOfTransactionOperationsInSingleOplogEntry\n  maxOplogTruncationPointsAfterStartup\n  maxOplogTruncationPointsDuringStartup\n  maxSessions\n  maxSyncSourceLagSecs\n  maxTenantMigrationDonorServiceThreadPoolSize\n  maxTenantMigrationRecipientThreadPoolSize\n  maxTimeMSForHedgedReads\n  maxTransactionLockRequestTimeoutMillis\n  maxValidateMBperSec\n  maxValidateMemoryUsageMB\n  metadataRefreshInTransactionMaxWaitBehindCritSecMS\n  migrateCloneInsertionBatchDelayMS\n  migrateCloneInsertionBatchSize\n  migrationLockAcquisitionMaxWaitMS\n  minNumChunksForSessionsCollection\n  minOplogEntriesPerThread\n  minOplogTruncationPoints\n  minSnapshotHistoryWindowInSeconds\n  mirrorReads\n  mongosShutdownTimeoutMillisForSignaledShutdown\n  notablescan\n  numInitialSyncAttempts\n  numInitialSyncConnectAttempts\n  numInitialSyncOplogFindAttempts\n  ocspCacheSize\n  ocspEnabled\n  ocspStaplingRefreshPeriodSecs\n  ocspValidationRefreshPeriodSecs\n  opensslCipherConfig\n  opensslCipherSuiteConfig\n  opensslDiffieHellmanParameters\n  operationMemoryPoolBlockInitialSizeKB\n  operationMemoryPoolBlockMaxSizeKB\n  oplogApplicationEnforcesSteadyStateConstraints\n  oplogFetcherInitialSyncMaxFetcherRestarts\n  oplogFetcherSteadyStateMaxFetcherRestarts\n  oplogFetcherUsesExhaust\n  oplogInitialFindMaxSeconds\n  oplogNetworkTimeoutBufferSeconds\n  oplogRetriedFindMaxSeconds\n  oplogSamplingLogIntervalSeconds\n  oplogTruncationPointSizeMB\n  orphanCleanupDelaySecs\n  periodicNoopIntervalSecs\n  priorityTakeoverFreshnessWindowSeconds\n  processUmask\n  profileOperationResourceConsumptionMetrics\n  quiet\n  rangeDeleterBatchDelayMS\n  rangeDeleterBatchSize\n  readHedgingMode\n  receiveChunkWaitForRangeDeleterTimeoutMS\n  recoverFromOplogAsStandalone\n  recoverToOplogTimestamp\n  remainingReshardingOperationTimeThresholdMillis\n  replBatchLimitBytes\n  replBatchLimitOperations\n  replElectionTimeoutOffsetLimitFraction\n  replWriterMinThreadCount\n  replWriterThreadCount\n  replicaSetMonitorProtocol\n  reportOpWriteConcernCountersInServerStatus\n  requireApiVersion\n  reservedServiceExecutorRecursionLimit\n  reshardingCollectionClonerBatchSizeInBytes\n  reshardingCoordinatorServiceMaxThreadCount\n  reshardingCriticalSectionTimeoutMillis\n  reshardingDonorServiceMaxThreadCount\n  reshardingMinimumOperationDurationMillis\n  reshardingOplogApplierMaxLockRequestTimeoutMillis\n  reshardingOplogBatchLimitBytes\n  reshardingOplogBatchLimitOperations\n  reshardingOplogBatchTaskCount\n  reshardingRecipientServiceMaxThreadCount\n  reshardingTxnClonerProgressBatchSize\n  resumableIndexBuildMajorityOpTimeTimeoutMillis\n  rewriteStateChangeErrors\n  roleGraphInvalidationIsFatal\n  rollbackRemoteOplogQueryBatchSize\n  rollbackTimeLimitSecs\n  saslHostName\n  saslServiceName\n  saslauthdPath\n  scramIterationCount\n  scramSHA256IterationCount\n  scriptingEngineInterruptIntervalMS\n  shardedIndexConsistencyCheckIntervalMS\n  shutdownTimeoutMillisForSignaledShutdown\n  skipCorruptDocumentsWhenCloning\n  skipShardingConfigurationChecks\n  skipShellCursorFinalize\n  sslMode\n  sslWithholdClientCertificate\n  startupAuthSchemaValidation\n  startupRecoveryForRestore\n  storeFindAndModifyImagesInSideCollection\n  suppressNoTLSPeerCertificateWarning\n  syncdelay\n  synchronousServiceExecutorRecursionLimit\n  takeUnstableCheckpointOnShutdown\n  taskExecutorPoolSize\n  tcmallocAggressiveMemoryDecommit\n  tcmallocEnableMarkThreadTemporarilyIdle\n  tcmallocMaxTotalThreadCacheBytes\n  tcmallocReleaseRate\n  tcpFastOpenClient\n  tcpFastOpenQueueSize\n  tcpFastOpenServer\n  tenantApplierBatchSizeBytes\n  tenantApplierBatchSizeOps\n  tenantApplierThreadCount\n  tenantMigrationBlockingStateTimeoutMS\n  tenantMigrationDisableX509Auth\n  tenantMigrationExcludeDonorHostTimeoutMS\n  tenantMigrationExternalKeysRemovalBufferSecs\n  tenantMigrationGarbageCollectionDelayMS\n  tenantMigrationOplogBufferPeekCacheSize\n  tenantMigrationOplogFetcherBatchSize\n  testingDiagnosticsEnabled\n  testingSnapshotBehaviorInIsolation\n  timeseriesBucketMaxCount\n  timeseriesBucketMaxSize\n  timeseriesBucketsCollectionClusterById\n  timeseriesIdleBucketExpiryMemoryUsageThreshold\n  tlsCATrusts\n  tlsMode\n  tlsOCSPStaplingTimeoutSecs\n  tlsOCSPVerifyTimeoutSecs\n  tlsWithholdClientCertificate\n  tlsX509ClusterAuthDNOverride\n  tlsX509ExpirationWarningThresholdDays\n  totalUnitWriteSizeBytes\n  traceExceptions\n  traceWriteConflictExceptions\n  trafficRecordingDirectory\n  transactionLifetimeLimitSeconds\n  transactionSizeLimitBytes\n  ttlMonitorEnabled\n  ttlMonitorSleepSecs\n  useReadOnceCursorsForIndexBuilds\n  waitForSecondaryBeforeNoopWriteMS\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartup\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartupWaitMS\n  watchdogPeriodSeconds\n  wiredTigerConcurrentReadTransactions\n  wiredTigerConcurrentWriteTransactions\n  wiredTigerCursorCacheSize\n  wiredTigerEngineRuntimeConfig\n  wiredTigerFileHandleCloseIdleTime\n  wiredTigerFileHandleCloseMinimum\n  wiredTigerFileHandleCloseScanInterval\n  wiredTigerMaxCacheOverflowSizeGB\n  wiredTigerSessionCloseIdleTimeSecs\n  writePeriodicNoops\n",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setShardVersion": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "shardingState": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "shutdown": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Shuts down the database. Must be run against the admin database and either (1) run from localhost or (2) run while authenticated with the shutdown privilege. If the node is the primary of a replica set, waits up to 'timeoutSecs' for an electable node to be caught up before stepping down. If 'force' is false and no electable node was able to catch up, does not shut down. If the node is in state SECONDARY after the attempted stepdown, any remaining time in 'timeoutSecs' is used for quiesce mode, where the database continues to allow operations to run, but directs clients to route new operations to other replica set members.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "splitChunk": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal command usage only\nexample:\n { splitChunk:\"db.foo\" , keyPattern: {a:1} , min : {a:100} , max: {a:200} { splitKeys : [ {a:150} , ... ]}",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "splitVector": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command.\nexamples:\n  { splitVector : \"blog.post\" , keyPattern:{x:1} , min:{x:10} , max:{x:20}, maxChunkSize:200 }\n  maxChunkSize unit in MBs\n  May optionally specify 'maxSplitPoints' and 'maxChunkObjects' to avoid traversing the whole chunk\n  \n  { splitVector : \"blog.post\" , keyPattern:{x:1} , min:{x:10} , max:{x:20}, force: true }\n  'force' will produce one split point even if data is small; defaults to false\nNOTE: This command may take a while to run",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "startRecordingTraffic": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "startSession": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "start a logical session",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "stopRecordingTraffic": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "top": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "usage by collection, in micros ",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "update": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "update documents",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "updateRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "updateUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "usersInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "validate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Validate contents of a namespace by scanning its data structures for correctness.\nThis is a slow operation.\n\tAdd {full: true} option to do a more thorough check.\n\tAdd {background: true} to validate in the background.\n\tAdd {repair: true} to run repair mode.\nCannot specify both {full: true, background: true}.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "validateDBMetadata": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "validateDBMetadata checks that the stored metadata of a database/collection is valid within a particular API version. If 'db' parameter is specified, only runs validation against that database, if not the validation will be run againt all dbs. Similarly if 'collection' parameter is specified, the validation is only run against that collection, if not the validation is run against all collections.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "voteCommitIndexBuild": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal intra replica set command",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "waitForFailPoint": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "wait for a fail point to be entered a certain number of times",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "whatsmyuri": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{whatsmyuri:1}",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          }
         },




2021-12-16T21:39:59.793Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:162	Request header:
{
  "MessageLength": 52,
  "RequestID": 19,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:59.793Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "$db"
        ],
        "ismaster": true,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:59.794Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:175	Response header:
{
  "MessageLength": 190,
  "RequestID": 10,
  "ResponseTo": 19,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:59.795Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690799794
        },
        "minWireVersion": 13,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:59.797Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 304,
  "RequestID": 176,
  "ResponseTo": 19,
  "OpCode": "OP_MSG"
}
2021-12-16T21:39:59.798Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "topologyVersion",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "logicalSessionTimeoutMinutes",
          "connectionId",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "topologyVersion": {
          "$k": [
            "processId",
            "counter"
          ],
          "processId": {
            "$o": "61bbb0c97437c3a34c46c94d"
          },
          "counter": {
            "$l": "0"
          }
        },
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690799796
        },
        "logicalSessionTimeoutMinutes": 30,
        "connectionId": 43,
        "minWireVersion": 0,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:39:59.804Z	INFO	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 190,
-  "RequestID": 10,
+  "MessageLength": 304,
+  "RequestID": 176,
   "ResponseTo": 19,
@@ -14,2 +14,3 @@
           "ismaster",
+          "topologyVersion",
           "maxBsonObjectSize",
@@ -18,2 +19,4 @@
           "localTime",
+          "logicalSessionTimeoutMinutes",
+          "connectionId",
           "minWireVersion",
@@ -24,2 +27,14 @@
         "ismaster": true,
+        "topologyVersion": {
+          "$k": [
+            "processId",
+            "counter"
+          ],
+          "processId": {
+            "$o": "61bbb0c97437c3a34c46c94d"
+          },
+          "counter": {
+            "$l": "0"
+          }
+        },
         "maxBsonObjectSize": 16777216,
@@ -28,5 +43,7 @@
         "localTime": {
-          "$d": 1639690799794
+          "$d": 1639690799796
         },
-        "minWireVersion": 13,
+        "logicalSessionTimeoutMinutes": 30,
+        "connectionId": 43,
+        "minWireVersion": 0,
         "maxWireVersion": 13,




2021-12-16T21:40:06.893Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 	clientconn/conn.go:162	Request header:
{
  "MessageLength": 60,
  "RequestID": 20,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:40:06.894Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 	clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "listCommands",
          "$db"
        ],
        "listCommands": 1,
        "$db": "monila"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:40:06.894Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 	clientconn/conn.go:175	Response header:
{
  "MessageLength": 78,
  "RequestID": 8,
  "ResponseTo": 20,
  "OpCode": "OP_MSG"
}
2021-12-16T21:40:06.895Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 	clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "argv",
          "parsed",
          "ok"
        ],
        "argv": [
          "ferretdb"
        ],
        "parsed": {
          "$k": []
        },
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:40:06.938Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 	clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 71060,
  "RequestID": 177,
  "ResponseTo": 20,
  "OpCode": "OP_MSG"
}
2021-12-16T21:40:07.006Z	DEBUG	// 172.20.0.3:43490 -> 172.17.0.1:27017 	clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "commands",
          "ok"
        ],
        "commands": {
          "$k": [
            "_addShard",
            "_cloneCollectionOptionsFromPrimaryShard",
            "_configsvrAbortReshardCollection",
            "_configsvrAddShard",
            "_configsvrAddShardToZone",
            "_configsvrBalancerCollectionStatus",
            "_configsvrBalancerStart",
            "_configsvrBalancerStatus",
            "_configsvrBalancerStop",
            "_configsvrCleanupReshardCollection",
            "_configsvrClearJumboFlag",
            "_configsvrCommitChunkMerge",
            "_configsvrCommitChunkMigration",
            "_configsvrCommitChunkSplit",
            "_configsvrCommitChunksMerge",
            "_configsvrCommitMovePrimary",
            "_configsvrCommitReshardCollection",
            "_configsvrCreateDatabase",
            "_configsvrDropCollection",
            "_configsvrDropDatabase",
            "_configsvrEnableSharding",
            "_configsvrEnsureChunkVersionIsGreaterThan",
            "_configsvrMoveChunk",
            "_configsvrMovePrimary",
            "_configsvrRefineCollectionShardKey",
            "_configsvrRemoveChunks",
            "_configsvrRemoveShard",
            "_configsvrRemoveShardFromZone",
            "_configsvrRemoveTags",
            "_configsvrRenameCollectionMetadata",
            "_configsvrReshardCollection",
            "_configsvrSetAllowMigrations",
            "_configsvrShardCollection",
            "_configsvrUpdateZoneKeyRange",
            "_flushDatabaseCacheUpdates",
            "_flushDatabaseCacheUpdatesWithWriteConcern",
            "_flushReshardingStateChange",
            "_flushRoutingTableCacheUpdates",
            "_flushRoutingTableCacheUpdatesWithWriteConcern",
            "_getNextSessionMods",
            "_getUserCacheGeneration",
            "_isSelf",
            "_killOperations",
            "_mergeAuthzCollections",
            "_migrateClone",
            "_recvChunkAbort",
            "_recvChunkCommit",
            "_recvChunkStart",
            "_recvChunkStatus",
            "_shardsvrAbortReshardCollection",
            "_shardsvrCleanupReshardCollection",
            "_shardsvrCloneCatalogData",
            "_shardsvrCommitReshardCollection",
            "_shardsvrCreateCollection",
            "_shardsvrCreateCollectionParticipant",
            "_shardsvrDropCollection",
            "_shardsvrDropCollectionIfUUIDNotMatching",
            "_shardsvrDropCollectionParticipant",
            "_shardsvrDropDatabase",
            "_shardsvrDropDatabaseParticipant",
            "_shardsvrMovePrimary",
            "_shardsvrRefineCollectionShardKey",
            "_shardsvrRenameCollection",
            "_shardsvrRenameCollectionParticipant",
            "_shardsvrRenameCollectionParticipantUnblock",
            "_shardsvrReshardCollection",
            "_shardsvrReshardingOperationTime",
            "_shardsvrShardCollection",
            "_transferMods",
            "abortTransaction",
            "aggregate",
            "appendOplogNote",
            "applyOps",
            "authenticate",
            "autoSplitVector",
            "availableQueryOptions",
            "buildInfo",
            "checkShardingIndex",
            "cleanupOrphaned",
            "cloneCollectionAsCapped",
            "collMod",
            "collStats",
            "commitTransaction",
            "compact",
            "connPoolStats",
            "connPoolSync",
            "connectionStatus",
            "convertToCapped",
            "coordinateCommitTransaction",
            "count",
            "create",
            "createIndexes",
            "createRole",
            "createUser",
            "currentOp",
            "dataSize",
            "dbHash",
            "dbStats",
            "delete",
            "distinct",
            "donorAbortMigration",
            "donorForgetMigration",
            "donorStartMigration",
            "driverOIDTest",
            "drop",
            "dropAllRolesFromDatabase",
            "dropAllUsersFromDatabase",
            "dropConnections",
            "dropDatabase",
            "dropIndexes",
            "dropRole",
            "dropUser",
            "endSessions",
            "explain",
            "features",
            "filemd5",
            "find",
            "findAndModify",
            "flushRouterConfig",
            "fsync",
            "fsyncUnlock",
            "getCmdLineOpts",
            "getDatabaseVersion",
            "getDefaultRWConcern",
            "getDiagnosticData",
            "getFreeMonitoringStatus",
            "getLastError",
            "getLog",
            "getMore",
            "getParameter",
            "getShardMap",
            "getShardVersion",
            "getnonce",
            "grantPrivilegesToRole",
            "grantRolesToRole",
            "grantRolesToUser",
            "hello",
            "hostInfo",
            "insert",
            "internalRenameIfOptionsAndIndexesMatch",
            "invalidateUserCache",
            "isMaster",
            "killAllSessions",
            "killAllSessionsByPattern",
            "killCursors",
            "killOp",
            "killSessions",
            "listCollections",
            "listCommands",
            "listDatabases",
            "listIndexes",
            "lockInfo",
            "logRotate",
            "logout",
            "mapReduce",
            "mergeChunks",
            "moveChunk",
            "ping",
            "planCacheClear",
            "planCacheClearFilters",
            "planCacheListFilters",
            "planCacheSetFilter",
            "prepareTransaction",
            "profile",
            "reIndex",
            "recipientForgetMigration",
            "recipientSyncData",
            "refreshSessions",
            "renameCollection",
            "repairDatabase",
            "replSetAbortPrimaryCatchUp",
            "replSetFreeze",
            "replSetGetConfig",
            "replSetGetRBID",
            "replSetGetStatus",
            "replSetHeartbeat",
            "replSetInitiate",
            "replSetMaintenance",
            "replSetReconfig",
            "replSetRequestVotes",
            "replSetResizeOplog",
            "replSetStepDown",
            "replSetStepUp",
            "replSetSyncFrom",
            "replSetUpdatePosition",
            "revokePrivilegesFromRole",
            "revokeRolesFromRole",
            "revokeRolesFromUser",
            "rolesInfo",
            "rotateCertificates",
            "saslContinue",
            "saslStart",
            "serverStatus",
            "setDefaultRWConcern",
            "setFeatureCompatibilityVersion",
            "setFreeMonitoring",
            "setIndexCommitQuorum",
            "setParameter",
            "setShardVersion",
            "shardingState",
            "shutdown",
            "splitChunk",
            "splitVector",
            "startRecordingTraffic",
            "startSession",
            "stopRecordingTraffic",
            "top",
            "update",
            "updateRole",
            "updateUser",
            "usersInfo",
            "validate",
            "validateDBMetadata",
            "voteCommitIndexBuild",
            "waitForFailPoint",
            "whatsmyuri"
          ],
          "_addShard": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by shards. Do not call directly. Adds a new shard to a cluster.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_cloneCollectionOptionsFromPrimaryShard": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, do not call directly. Creates a collection on a shard with UUID existing on primary.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrAbortReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Aborts any in-progress resharding operations for this collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrAddShard": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and adds a new shard to the cluster.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrAddShardToZone": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and adds a new zone to the shard.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrBalancerCollectionStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Checks whether the chunks of a given collection are in a quiesced state or there are any which need to be moved because of (1) draining shards, (2) zone violation or (3) imbalance between shards.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrBalancerStart": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrBalancerStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrBalancerStop": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCleanupReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Aborts and cleans up any in-progress resharding operations for this collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrClearJumboFlag": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Clears the jumbo flag of the chunk specified.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitChunkMerge": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a MergeChunkRequest",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitChunkMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitChunkSplit": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a SplitChunkRequest.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitChunksMerge": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a MergeChunksRequest",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitMovePrimary": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCommitReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Allows a reshard operation to enter critical section ASAP.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrCreateDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Create a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrDropCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Drops a collection from a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrDropDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Drops a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrEnableSharding": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Enable sharding on a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrEnsureChunkVersionIsGreaterThan": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrMoveChunk": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Requests the balancer to move or rebalance a single chunk.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrMovePrimary": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Reassigns the primary shard of a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRefineCollectionShardKey": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Adds a suffix to the shard key of an existing collection ('refines the shard key').",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRemoveChunks": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes the chunks for the specified collectionUUID.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRemoveShard": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes a shard from the cluster.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRemoveShardFromZone": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and removes the shard from the zone.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRemoveTags": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes the zone tags for the specified ns.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrRenameCollectionMetadata": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Renames a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Reshards a collection on a new shard key.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrSetAllowMigrations": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Sets the allowMigrations flag on the specified collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrShardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Shards a collection. Requires key. Optional unique. Sharding must already be enabled for the database",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_configsvrUpdateZoneKeyRange": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and assigns a new range to a zone.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushDatabaseCacheUpdates": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command which waits for any pending routing table cache updates for a particular database to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushDatabaseCacheUpdatesWithWriteConcern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command which waits for any pending routing table cache updates for a particular database to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushReshardingStateChange": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command used by the resharding coordinator to flush state changes to the participant shards while the critical section is active.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushRoutingTableCacheUpdates": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command which waits for any pending routing table cache updates for a particular namespace to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_flushRoutingTableCacheUpdatesWithWriteConcern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command which waits for any pending routing table cache updates for a particular namespace to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_getNextSessionMods": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_getUserCacheGeneration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_isSelf": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ _isSelf : 1 } INTERNAL ONLY",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_killOperations": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command -- Kill operations on the target server by OperationKey.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_mergeAuthzCollections": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_migrateClone": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_recvChunkAbort": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_recvChunkCommit": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_recvChunkStart": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_recvChunkStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrAbortReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the shard server. Do not call directly. Aborts any in-progress resharding operations.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCleanupReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the shard server. Do not call directly. Aborts and cleans up any in-progress resharding operations for this collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCloneCatalogData": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCommitReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the shard server. Do not call directly. Commits an in-progress resharding operations",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCreateCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Creates a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrCreateCollectionParticipant": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Creates a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Drops a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropCollectionIfUUIDNotMatching": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command aimed to remove stale entries from the local collection catalog.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropCollectionParticipant": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by secondary sharding servers. Do not call directly. Participates in droping a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Drops a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrDropDatabaseParticipant": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by secondary sharding servers. Do not call directly. Participates in droping a database.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrMovePrimary": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrRefineCollectionShardKey": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Refines Collection shard key.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrRenameCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Renames a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrRenameCollectionParticipant": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Locally renames a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrRenameCollectionParticipantUnblock": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Releases the critical section of source and target collections.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrReshardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command. Do not call directly. Reshards a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrReshardingOperationTime": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command used by the resharding coordinator to query the elapsed and remaining time for the active resharding operation on participant shards.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_shardsvrShardCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "_transferMods": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "abortTransaction": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Aborts a transaction",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "aggregate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Runs the aggregation command. See http://dochub.mongodb.org/core/aggregation for more details.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "appendOplogNote": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Adds a no-op entry to the oplog",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "applyOps": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal (sharding)\n{ applyOps : [ ] , preCondition : [ { ns : ... , q : ... , res : ... } ] }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "authenticate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "autoSplitVector": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command returning the split points for a chunk, given the maximum chunk size.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "availableQueryOptions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "buildInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get version #, etc.\n{ buildinfo:1 }",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "checkShardingIndex": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command.\n",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "cleanupOrphaned": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "cloneCollectionAsCapped": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ cloneCollectionAsCapped:\u003cfromName\u003e, toCollection:\u003ctoName\u003e, size:\u003csizeInBytes\u003e }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "collMod": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Sets collection options.\nExample: { collMod: 'foo', viewOn: 'bar'} Example: { collMod: 'foo', index: {keyPattern: {a: 1}, expireAfterSeconds: 600} Example: { collMod: 'foo', index: {name: 'bar', expireAfterSeconds: 600} }\n",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "collStats": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ collStats:\"blog.posts\" , scale : 1 } scale divides sizes e.g. for KB use 1024\n    avgObjSize - in bytes",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "commitTransaction": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Commits a transaction",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "compact": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "compact collection\nwarning: this operation locks the database and is slow. you can cancel with killOp()\n{ compact : \u003ccollection_name\u003e, [force:\u003cbool\u003e] }\n  force - allows to run on a replica set primary\n",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "connPoolStats": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "stats about connections between servers in a replica set or sharded cluster.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "connPoolSync": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "connectionStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Returns connection-specific information such as logged-in users and their roles",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "convertToCapped": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ convertToCapped:\u003cfromCollectionName\u003e, size:\u003csizeInBytes\u003e }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "coordinateCommitTransaction": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Coordinates the commit for a transaction. Only called by mongos.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "count": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "count objects in collection",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "create": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "explicitly creates a collection or view\n{\n  create: \u003cstring: collection or view name\u003e [,\n  capped: \u003cbool: capped collection\u003e,\n  autoIndexId: \u003cbool: automatic creation of _id index\u003e,\n  idIndex: \u003cdocument: _id index specification\u003e,\n  size: \u003cint: size in bytes of the capped collection\u003e,\n  max: \u003cint: max number of documents in the capped collection\u003e,\n  storageEngine: \u003cdocument: storage engine configuration\u003e,\n  validator: \u003cdocument: validation rules\u003e,\n  validationLevel: \u003cstring: validation level\u003e,\n  validationAction: \u003cstring: validation action\u003e,\n  indexOptionDefaults: \u003cdocument: default configuration for indexes\u003e,\n  viewOn: \u003cstring: name of source collection or view\u003e,\n  pipeline: \u003carray\u003cobject\u003e: aggregation pipeline stage\u003e,\n  collation: \u003cdocument: default collation for the collection or view\u003e,\n  writeConcern: \u003cdocument: write concern expression for the operation\u003e]\n}",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "createIndexes": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "createRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "createUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "currentOp": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dataSize": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "determine data size for a set of data in a certain range\nexample: { dataSize:\"blog.posts\", keyPattern:{x:1}, min:{x:10}, max:{x:55} }\nmin and max parameters are optional. They must either both be included or both omitted\nkeyPattern is an optional parameter indicating an index pattern that would be usefulfor iterating over the min/max bounds. If keyPattern is omitted, it is inferred from the structure of min. \nnote: This command may take a while to run",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dbHash": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dbStats": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Get stats on a database. Not instantaneous. Slower for databases with large .ns files.\nExample: { dbStats:1, scale:1 }",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "delete": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "delete documents",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "distinct": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ distinct : 'collection name' , key : 'a.b' , query : {} }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "donorAbortMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Abort a migration",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "donorForgetMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Forget a migration",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "donorStartMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Start migrating databases whose names match the specified prefix to the specified replica set.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "driverOIDTest": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "drop": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "drop a collection\n{drop : \u003ccollectionName\u003e}",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "dropAllRolesFromDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dropAllUsersFromDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dropConnections": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Drop egress connections to specified host and port",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dropDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "drop (delete) this database",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "dropIndexes": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "drop indexes for a collection",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "dropRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "dropUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "endSessions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "end a set of logical sessions",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "explain": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "explain database reads and writes",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "features": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "return build level feature settings",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "filemd5": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": " example: { filemd5 : ObjectId(aaaaaaa) , root : \"fs\" }",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "find": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "query for documents",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "findAndModify": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ findAndModify: \"collection\", query: {processed:false}, update: {$set: {processed:true}}, new: true}\n{ findAndModify: \"collection\", query: {processed:false}, remove: true, sort: {priority:-1}}\nEither update or remove is required, all other fields have default values.\nOutput is in the \"value\" field\n",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "flushRouterConfig": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Flushes the cached routing information for a single collection, entire database (and its collections) or all databases, which would cause full reload from the config server on the next access.\nUsage:\n{flushRouterConfig: 1} flushes all databases\n{flushRouterConfig: 'db'} flushes only the given database (and its collections)\n{flushRouterconfig: 'db.coll'} flushes only the given collection",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "fsync": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "http://dochub.mongodb.org/core/fsynccommand",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "fsyncUnlock": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getCmdLineOpts": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get argv",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getDatabaseVersion": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": " example: { getDatabaseVersion : 'foo'  } ",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getDefaultRWConcern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get the current read/write concern defaults being applied by this node",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getDiagnosticData": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get latest diagnostic data collection snapshot",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getFreeMonitoringStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Indicates free monitoring status",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getLastError": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "return error status of the last operation on this connection\noptions:\n  { fsync:true } - fsync before returning, or wait for journal commit if running with --journal\n  { j:true } - wait for journal commit if running with --journal\n  { w:n } - await replication to n servers (including self) before returning\n  { w:'majority' } - await replication to majority of set\n  { wtimeout:m} - timeout for w in m milliseconds",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getLog": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ getLog : '*' }  OR { getLog : 'global' }",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getMore": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "retrieve more results from an existing cursor",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "getParameter": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get administrative option(s)\nexample:\n{ getParameter:1, notablescan:1 }\nsupported:\n  AlwaysRecordTraffic\n  KeysRotationIntervalSec\n  ShardingTaskExecutorPoolHostTimeoutMS\n  ShardingTaskExecutorPoolMaxConnecting\n  ShardingTaskExecutorPoolMaxSize\n  ShardingTaskExecutorPoolMinSize\n  ShardingTaskExecutorPoolRefreshRequirementMS\n  ShardingTaskExecutorPoolRefreshTimeoutMS\n  ShardingTaskExecutorPoolReplicaSetMatching\n  TransactionRecordMinimumLifetimeMinutes\n  acceptApiVersion2\n  aggregateOperationResourceConsumptionMetrics\n  allowRolesFromX509Certificates\n  authSchemaVersion\n  authenticationMechanisms\n  authorizationManagerCacheSize\n  authorizationManagerPinnedUsers\n  authorizationManagerPinnedUsersRefreshIntervalMillis\n  automationServiceDescriptor\n  awsEC2InstanceMetadataUrl\n  awsECSInstanceMetadataUrl\n  bgSyncOplogFetcherBatchSize\n  changeSyncSourceThresholdMillis\n  clientCursorMonitorFrequencySecs\n  cloudFreeMonitoringEndpointURL\n  clusterAuthMode\n  collectionBulkLoaderBatchSizeInBytes\n  collectionClonerBatchSize\n  collectionClonerUsesExhaust\n  connPoolMaxConnsPerHost\n  connPoolMaxInUseConnsPerHost\n  connectTimeoutMs\n  coordinateCommitReturnImmediatelyAfterPersistingDecision\n  createRollbackDataFiles\n  cursorTimeoutMillis\n  deprecatedWireOpsWarningPeriodInSeconds\n  diagnosticDataCollectionDirectoryPath\n  diagnosticDataCollectionDirectorySizeMB\n  diagnosticDataCollectionEnableLatencyHistograms\n  diagnosticDataCollectionEnabled\n  diagnosticDataCollectionFileSizeMB\n  diagnosticDataCollectionPeriodMillis\n  diagnosticDataCollectionSamplesPerChunk\n  diagnosticDataCollectionSamplesPerInterimUpdate\n  diagnosticDataCollectionVerboseTCMalloc\n  disableJavaScriptJIT\n  disableLogicalSessionCacheRefresh\n  disableNonSSLConnectionLogging\n  disableNonTLSConnectionLogging\n  disableResumableRangeDeleter\n  disableSplitHorizonIPCheck\n  disabledSecureAllocatorDomains\n  documentUnitSizeBytes\n  enableDefaultWriteConcernUpdatesForInitiate\n  enableElectionHandoff\n  enableFinerGrainedCatalogCacheRefresh\n  enableFlowControl\n  enableIndexBuildCommitQuorum\n  enableLocalhostAuthBypass\n  enableOverrideClusterChainingSetting\n  enableReconfigRollbackCommittedWritesCheck\n  enableResumableIndexBuilds\n  enableSearchMeta\n  enableShardedIndexConsistencyCheck\n  enableTestCommands\n  enableTimeoutOfInactiveSessionCursors\n  enforceUserClusterSeparation\n  featureCompatibilityVersion\n  featureFlagBlender\n  featureFlagChangeStreamsOptimization\n  featureFlagDefaultReadConcernLocal\n  featureFlagDefaultWriteConcernMajority\n  featureFlagDotsAndDollars\n  featureFlagFryer\n  featureFlagLockFreeReads\n  featureFlagResharding\n  featureFlagRetryableFindAndModify\n  featureFlagSearchMeta\n  featureFlagShardedTimeSeries\n  featureFlagShardedTimeSeriesUpdateDelete\n  featureFlagShardingFullDDLSupport\n  featureFlagSpoon\n  featureFlagTenantMigrations\n  featureFlagTimeseriesCollection\n  featureFlagTimeseriesUpdatesAndDeletes\n  featureFlagToaster\n  featureFlagUseSecondaryDelaySecs\n  findChunksOnConfigTimeoutMS\n  fixedServiceExecutorRecursionLimit\n  fixedServiceExecutorThreadLimit\n  flowControlDecayConstant\n  flowControlFudgeFactor\n  flowControlMaxSamples\n  flowControlMinTicketsPerSecond\n  flowControlSamplePeriod\n  flowControlTargetLagSeconds\n  flowControlThresholdLagPercentage\n  flowControlTicketAdderConstant\n  flowControlTicketMultiplierConstant\n  flowControlWarnThresholdSeconds\n  forceRollbackViaRefetch\n  globalConnPoolIdleTimeoutMinutes\n  heapProfilingEnabled\n  heapProfilingSampleIntervalBytes\n  heartBeatFrequencyMs\n  honorSystemUmask\n  indexEntryUnitSizeBytes\n  initialServiceExecutorThreadingModel\n  initialSyncOplogBuffer\n  initialSyncOplogBufferPeekCacheSize\n  initialSyncOplogFetcherBatchSize\n  initialSyncSourceReadPreference\n  initialSyncTransientErrorRetryPeriodSeconds\n  internalDocumentSourceCursorBatchSizeBytes\n  internalDocumentSourceGroupMaxMemoryBytes\n  internalDocumentSourceLookupCacheSizeBytes\n  internalDocumentSourceSetWindowFieldsMaxMemoryBytes\n  internalGeoNearQuery2DMaxCoveringCells\n  internalGeoPredicateQuery2DMaxCoveringCells\n  internalIndexBuildBulkLoadYieldIterations\n  internalInsertMaxBatchSize\n  internalLookupStageIntermediateDocumentMaxSizeBytes\n  internalPipelineLengthLimit\n  internalProhibitShardOperationRetry\n  internalQueryAllowShardedLookup\n  internalQueryAlwaysMergeOnPrimaryShard\n  internalQueryAppendIdToSetWindowFieldsSort\n  internalQueryCacheDisableInactiveEntries\n  internalQueryCacheEvictionRatio\n  internalQueryCacheMaxEntriesPerCollection\n  internalQueryCacheMaxSizeBytesBeforeStripDebugInfo\n  internalQueryCacheSize\n  internalQueryCacheWorksGrowthCoefficient\n  internalQueryDefaultDOP\n  internalQueryDesugarWhereToFunction\n  internalQueryDisableExchange\n  internalQueryEnableCSTParser\n  internalQueryEnableLoggingV2OplogEntries\n  internalQueryEnableSlotBasedExecutionEngine\n  internalQueryEnumerationMaxIntersectPerAnd\n  internalQueryEnumerationMaxOrSolutions\n  internalQueryEnumerationPreferLockstepOrEnumeration\n  internalQueryExecYieldIterations\n  internalQueryExecYieldPeriodMS\n  internalQueryExplainSizeThresholdBytes\n  internalQueryFacetBufferSizeBytes\n  internalQueryFacetMaxOutputDocSizeBytes\n  internalQueryForceIntersectionPlans\n  internalQueryIgnoreUnknownJSONSchemaKeywords\n  internalQueryJavaScriptFnTimeoutMillis\n  internalQueryJavaScriptHeapSizeLimitMB\n  internalQueryMaxAddToSetBytes\n  internalQueryMaxBlockingSortMemoryUsageBytes\n  internalQueryMaxDocValidationErrorConsideredValues\n  internalQueryMaxJsEmitBytes\n  internalQueryMaxPushBytes\n  internalQueryMaxRangeBytes\n  internalQueryMaxScansToExplode\n  internalQueryPlanEvaluationCollFraction\n  internalQueryPlanEvaluationMaxResults\n  internalQueryPlanEvaluationWorks\n  internalQueryPlanOrChildrenIndependently\n  internalQueryPlannerEnableHashIntersection\n  internalQueryPlannerEnableIndexIntersection\n  internalQueryPlannerGenerateCoveredWholeIndexScans\n  internalQueryPlannerMaxIndexedSolutions\n  internalQueryProhibitBlockingMergeOnMongoS\n  internalQueryProhibitMergingOnMongoS\n  internalQueryS2GeoCoarsestLevel\n  internalQueryS2GeoFinestLevel\n  internalQueryS2GeoMaxCells\n  internalQuerySlotBasedExecutionMaxStaticIndexScanIntervals\n  internalValidateFeaturesAsMaster\n  internalValidateFeaturesAsPrimary\n  javascriptProtection\n  journalCommitInterval\n  jsHeapLimitMB\n  loadRoutingTableOnStartup\n  localLogicalSessionTimeoutMinutes\n  localThresholdMs\n  logComponentVerbosity\n  logLevel\n  logicalSessionRefreshMillis\n  maxAcceptableLogicalClockDriftSecs\n  maxBSONDepth\n  maxCatchUpPercentageBeforeBlockingWrites\n  maxIndexBuildDrainBatchSize\n  maxIndexBuildDrainMemoryUsageMegabytes\n  maxIndexBuildMemoryUsageMegabytes\n  maxLogSizeKB\n  maxNumActiveUserIndexBuilds\n  maxNumSyncSourceChangesPerHour\n  maxNumberOfTransactionOperationsInSingleOplogEntry\n  maxOplogTruncationPointsAfterStartup\n  maxOplogTruncationPointsDuringStartup\n  maxSessions\n  maxSyncSourceLagSecs\n  maxTenantMigrationDonorServiceThreadPoolSize\n  maxTenantMigrationRecipientThreadPoolSize\n  maxTimeMSForHedgedReads\n  maxTransactionLockRequestTimeoutMillis\n  maxValidateMBperSec\n  maxValidateMemoryUsageMB\n  metadataRefreshInTransactionMaxWaitBehindCritSecMS\n  migrateCloneInsertionBatchDelayMS\n  migrateCloneInsertionBatchSize\n  migrationLockAcquisitionMaxWaitMS\n  minNumChunksForSessionsCollection\n  minOplogEntriesPerThread\n  minOplogTruncationPoints\n  minSnapshotHistoryWindowInSeconds\n  mirrorReads\n  mongosShutdownTimeoutMillisForSignaledShutdown\n  notablescan\n  numInitialSyncAttempts\n  numInitialSyncConnectAttempts\n  numInitialSyncOplogFindAttempts\n  ocspCacheSize\n  ocspEnabled\n  ocspStaplingRefreshPeriodSecs\n  ocspValidationRefreshPeriodSecs\n  opensslCipherConfig\n  opensslCipherSuiteConfig\n  opensslDiffieHellmanParameters\n  operationMemoryPoolBlockInitialSizeKB\n  operationMemoryPoolBlockMaxSizeKB\n  oplogApplicationEnforcesSteadyStateConstraints\n  oplogFetcherInitialSyncMaxFetcherRestarts\n  oplogFetcherSteadyStateMaxFetcherRestarts\n  oplogFetcherUsesExhaust\n  oplogInitialFindMaxSeconds\n  oplogNetworkTimeoutBufferSeconds\n  oplogRetriedFindMaxSeconds\n  oplogSamplingLogIntervalSeconds\n  oplogTruncationPointSizeMB\n  orphanCleanupDelaySecs\n  periodicNoopIntervalSecs\n  priorityTakeoverFreshnessWindowSeconds\n  processUmask\n  profileOperationResourceConsumptionMetrics\n  quiet\n  rangeDeleterBatchDelayMS\n  rangeDeleterBatchSize\n  readHedgingMode\n  receiveChunkWaitForRangeDeleterTimeoutMS\n  recoverFromOplogAsStandalone\n  recoverToOplogTimestamp\n  remainingReshardingOperationTimeThresholdMillis\n  replBatchLimitBytes\n  replBatchLimitOperations\n  replElectionTimeoutOffsetLimitFraction\n  replWriterMinThreadCount\n  replWriterThreadCount\n  replicaSetMonitorProtocol\n  reportOpWriteConcernCountersInServerStatus\n  requireApiVersion\n  reservedServiceExecutorRecursionLimit\n  reshardingCollectionClonerBatchSizeInBytes\n  reshardingCoordinatorServiceMaxThreadCount\n  reshardingCriticalSectionTimeoutMillis\n  reshardingDonorServiceMaxThreadCount\n  reshardingMinimumOperationDurationMillis\n  reshardingOplogApplierMaxLockRequestTimeoutMillis\n  reshardingOplogBatchLimitBytes\n  reshardingOplogBatchLimitOperations\n  reshardingOplogBatchTaskCount\n  reshardingRecipientServiceMaxThreadCount\n  reshardingTxnClonerProgressBatchSize\n  resumableIndexBuildMajorityOpTimeTimeoutMillis\n  rewriteStateChangeErrors\n  roleGraphInvalidationIsFatal\n  rollbackRemoteOplogQueryBatchSize\n  rollbackTimeLimitSecs\n  saslHostName\n  saslServiceName\n  saslauthdPath\n  scramIterationCount\n  scramSHA256IterationCount\n  scriptingEngineInterruptIntervalMS\n  shardedIndexConsistencyCheckIntervalMS\n  shutdownTimeoutMillisForSignaledShutdown\n  skipCorruptDocumentsWhenCloning\n  skipShardingConfigurationChecks\n  skipShellCursorFinalize\n  sslMode\n  sslWithholdClientCertificate\n  startupAuthSchemaValidation\n  startupRecoveryForRestore\n  storeFindAndModifyImagesInSideCollection\n  suppressNoTLSPeerCertificateWarning\n  syncdelay\n  synchronousServiceExecutorRecursionLimit\n  takeUnstableCheckpointOnShutdown\n  taskExecutorPoolSize\n  tcmallocAggressiveMemoryDecommit\n  tcmallocEnableMarkThreadTemporarilyIdle\n  tcmallocMaxTotalThreadCacheBytes\n  tcmallocReleaseRate\n  tcpFastOpenClient\n  tcpFastOpenQueueSize\n  tcpFastOpenServer\n  tenantApplierBatchSizeBytes\n  tenantApplierBatchSizeOps\n  tenantApplierThreadCount\n  tenantMigrationBlockingStateTimeoutMS\n  tenantMigrationDisableX509Auth\n  tenantMigrationExcludeDonorHostTimeoutMS\n  tenantMigrationExternalKeysRemovalBufferSecs\n  tenantMigrationGarbageCollectionDelayMS\n  tenantMigrationOplogBufferPeekCacheSize\n  tenantMigrationOplogFetcherBatchSize\n  testingDiagnosticsEnabled\n  testingSnapshotBehaviorInIsolation\n  timeseriesBucketMaxCount\n  timeseriesBucketMaxSize\n  timeseriesBucketsCollectionClusterById\n  timeseriesIdleBucketExpiryMemoryUsageThreshold\n  tlsCATrusts\n  tlsMode\n  tlsOCSPStaplingTimeoutSecs\n  tlsOCSPVerifyTimeoutSecs\n  tlsWithholdClientCertificate\n  tlsX509ClusterAuthDNOverride\n  tlsX509ExpirationWarningThresholdDays\n  totalUnitWriteSizeBytes\n  traceExceptions\n  traceWriteConflictExceptions\n  trafficRecordingDirectory\n  transactionLifetimeLimitSeconds\n  transactionSizeLimitBytes\n  ttlMonitorEnabled\n  ttlMonitorSleepSecs\n  useReadOnceCursorsForIndexBuilds\n  waitForSecondaryBeforeNoopWriteMS\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartup\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartupWaitMS\n  watchdogPeriodSeconds\n  wiredTigerConcurrentReadTransactions\n  wiredTigerConcurrentWriteTransactions\n  wiredTigerCursorCacheSize\n  wiredTigerEngineRuntimeConfig\n  wiredTigerFileHandleCloseIdleTime\n  wiredTigerFileHandleCloseMinimum\n  wiredTigerFileHandleCloseScanInterval\n  wiredTigerMaxCacheOverflowSizeGB\n  wiredTigerSessionCloseIdleTimeSecs\n  writePeriodicNoops\n{ getParameter:'*' } to get everything\n",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getShardMap": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "lists the set of shards known to this instance",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getShardVersion": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": " example: { getShardVersion : 'alleyinsider.foo'  } ",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "getnonce": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "grantPrivilegesToRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "grantRolesToRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "grantRolesToUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "hello": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Check if this server is primary for a replica set\n{ hello : 1 }",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "hostInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "returns information about the daemon's host",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "insert": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "insert documents",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "internalRenameIfOptionsAndIndexesMatch": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command to rename and check collection options",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "invalidateUserCache": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "isMaster": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Check if this server is primary for a replica set\n{ isMaster : 1 }",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "killAllSessions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "kill all logical sessions, for a user, and their operations",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "killAllSessionsByPattern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "kill logical sessions by pattern",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "killCursors": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Kill a list of cursor ids",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "killOp": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "killSessions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "kill a logical session and its operations",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "listCollections": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "list collections for this db",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "listCommands": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "get a list of all db commands",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "listDatabases": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ listDatabases:1, [filter: \u003cfilterObject\u003e] [, nameOnly: true ] }\nlist databases on this server",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "listIndexes": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "list indexes for a collection",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "lockInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "show all lock info on the server",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "logRotate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "logout": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "de-authenticate",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "mapReduce": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Runs the mapReduce command. See http://dochub.mongodb.org/core/mapreduce for details.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "mergeChunks": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command to merge a contiguous range of chunks.\nUsage: { mergeChunks: \u003cns\u003e, epoch: \u003cepoch\u003e, bounds: [\u003cmin key\u003e, \u003cmax key\u003e] }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "moveChunk": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "should not be calling this directly",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "ping": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "a way to check that the server is alive. responds immediately even if server is in a db lock.",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "planCacheClear": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Drops one or all plan cache entries in a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "planCacheClearFilters": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Clears index filter for a single query shape or, if the query shape is omitted, all filters for the collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "planCacheListFilters": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Displays index filters for all query shapes in a collection.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "planCacheSetFilter": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Sets index filter for a query shape. Overrides existing filter.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "prepareTransaction": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Prepares a transaction on this shard; sent by a router or re-sent by the transaction commit coordinator for a cross-shard transaction",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "profile": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "controls the behaviour of the performance profiler, the fraction of eligible operations which are sampled for logging/profiling, and the threshold duration at which ops become eligible. See http://docs.mongodb.org/manual/reference/command/profile",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "reIndex": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "re-index a collection (can only be run on a standalone mongod)",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "recipientForgetMigration": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Interrupts tenant migration data sync and marks that the recipient's durable state machine may be garbage collected.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "recipientSyncData": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal replica set command; instructs the recipient to sync data as part of a tenant migration.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "refreshSessions": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "renew a set of logical sessions",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "renameCollection": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": " example: { renameCollection: foo.a, to: bar.b }",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "repairDatabase": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "This command has been removed. If you would like to compact your data, use the 'compact' command. If you would like to rebuild indexes, use the 'reIndex' command. If you need to recover data, please see the documentation for repairing your database offline: http://dochub.mongodb.org/core/repair",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetAbortPrimaryCatchUp": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ CmdReplSetAbortPrimaryCatchUp : 1 }\nAbort primary catch-up mode; immediately finish the transition to primary without fetching any further unreplicated writes from any other online nodes",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetFreeze": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ replSetFreeze : \u003cseconds\u003e }\n'freeze' state of member to the extent we can do that.  What this really means is that\nthis node will not attempt to become primary until the time period specified expires.\nYou can call again with {replSetFreeze:0} to unfreeze sooner.\nA process restart unfreezes the member also.\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetGetConfig": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Returns the current replica set configuration{ replSetGetConfig : 1 }\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetGetRBID": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetGetStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Report status of a replica set from the POV of this server\n{ replSetGetStatus : 1 }\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetHeartbeat": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetInitiate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Initiate/christen a replica set.\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetMaintenance": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ replSetMaintenance : bool }\nEnable or disable maintenance mode.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetReconfig": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Adjust configuration of a replica set\n{ replSetReconfig : config_object }\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetRequestVotes": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetResizeOplog": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Resize oplog using size (in MBs) and optionally, retention (in terms of hours)",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetStepDown": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ replSetStepDown : \u003cseconds\u003e }\nStep down as primary.  Will not try to reelect self for the specified time period (1 minute if no numeric secs value specified, or secs is 0).\n(If another member with same priority takes over in the meantime, it will stay primary.)\nhttp://dochub.mongodb.org/core/replicasetcommands",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetStepUp": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetSyncFrom": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{ replSetSyncFrom : \"host:port\" }\nChange who this member is syncing from. Note: This will interrupt and restart an in-progress initial sync.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "replSetUpdatePosition": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "revokePrivilegesFromRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "revokeRolesFromRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "revokeRolesFromUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "rolesInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "rotateCertificates": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Rotate certificates for new SSL connections",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "saslContinue": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Subsequent steps in a SASL authentication conversation.",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "saslStart": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "First step in a SASL authentication conversation.",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "serverStatus": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "returns lots of administrative server statistics",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setDefaultRWConcern": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "set the current read/write concern defaults (cluster-wide)",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setFeatureCompatibilityVersion": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Set the featureCompatibilityVersion used by this cluster. If set to '4.4', then features introduced in versions greater than '4.4' will be disabled If set to '4.9', then features introduced in '5.0' will be disabled. If set to '5.0', then '5.0' features are enabled, and all nodes in the cluster must be binary version 5.0. See https://docs.mongodb.com/master/release-notes/4.4-compatibility/#feature-compatibility.",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setFreeMonitoring": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "enable or disable Free Monitoring",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setIndexCommitQuorum": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Resets the commitQuorum for the given index builds in a collection. Usage:\n{\n    setIndexCommitQuorum: \u003cstring\u003e collection name,\n    indexNames: array\u003cstring\u003e list of index names,\n    commitQuorum: \u003cstring|number|object\u003e option to define the required quorum for\n                  the index builds to commit\n}",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setParameter": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "set administrative option(s)\n{ setParameter:1, \u003cparam\u003e:\u003cvalue\u003e }\nsupported:\n  AlwaysRecordTraffic\n  KeysRotationIntervalSec\n  ShardingTaskExecutorPoolHostTimeoutMS\n  ShardingTaskExecutorPoolMaxConnecting\n  ShardingTaskExecutorPoolMaxSize\n  ShardingTaskExecutorPoolMinSize\n  ShardingTaskExecutorPoolRefreshRequirementMS\n  ShardingTaskExecutorPoolRefreshTimeoutMS\n  ShardingTaskExecutorPoolReplicaSetMatching\n  TransactionRecordMinimumLifetimeMinutes\n  acceptApiVersion2\n  aggregateOperationResourceConsumptionMetrics\n  allowRolesFromX509Certificates\n  authSchemaVersion\n  authenticationMechanisms\n  authorizationManagerCacheSize\n  authorizationManagerPinnedUsers\n  authorizationManagerPinnedUsersRefreshIntervalMillis\n  automationServiceDescriptor\n  awsEC2InstanceMetadataUrl\n  awsECSInstanceMetadataUrl\n  bgSyncOplogFetcherBatchSize\n  changeSyncSourceThresholdMillis\n  clientCursorMonitorFrequencySecs\n  cloudFreeMonitoringEndpointURL\n  clusterAuthMode\n  collectionBulkLoaderBatchSizeInBytes\n  collectionClonerBatchSize\n  collectionClonerUsesExhaust\n  connPoolMaxConnsPerHost\n  connPoolMaxInUseConnsPerHost\n  connectTimeoutMs\n  coordinateCommitReturnImmediatelyAfterPersistingDecision\n  createRollbackDataFiles\n  cursorTimeoutMillis\n  deprecatedWireOpsWarningPeriodInSeconds\n  diagnosticDataCollectionDirectoryPath\n  diagnosticDataCollectionDirectorySizeMB\n  diagnosticDataCollectionEnableLatencyHistograms\n  diagnosticDataCollectionEnabled\n  diagnosticDataCollectionFileSizeMB\n  diagnosticDataCollectionPeriodMillis\n  diagnosticDataCollectionSamplesPerChunk\n  diagnosticDataCollectionSamplesPerInterimUpdate\n  diagnosticDataCollectionVerboseTCMalloc\n  disableJavaScriptJIT\n  disableLogicalSessionCacheRefresh\n  disableNonSSLConnectionLogging\n  disableNonTLSConnectionLogging\n  disableResumableRangeDeleter\n  disableSplitHorizonIPCheck\n  disabledSecureAllocatorDomains\n  documentUnitSizeBytes\n  enableDefaultWriteConcernUpdatesForInitiate\n  enableElectionHandoff\n  enableFinerGrainedCatalogCacheRefresh\n  enableFlowControl\n  enableIndexBuildCommitQuorum\n  enableLocalhostAuthBypass\n  enableOverrideClusterChainingSetting\n  enableReconfigRollbackCommittedWritesCheck\n  enableResumableIndexBuilds\n  enableSearchMeta\n  enableShardedIndexConsistencyCheck\n  enableTestCommands\n  enableTimeoutOfInactiveSessionCursors\n  enforceUserClusterSeparation\n  featureCompatibilityVersion\n  featureFlagBlender\n  featureFlagChangeStreamsOptimization\n  featureFlagDefaultReadConcernLocal\n  featureFlagDefaultWriteConcernMajority\n  featureFlagDotsAndDollars\n  featureFlagFryer\n  featureFlagLockFreeReads\n  featureFlagResharding\n  featureFlagRetryableFindAndModify\n  featureFlagSearchMeta\n  featureFlagShardedTimeSeries\n  featureFlagShardedTimeSeriesUpdateDelete\n  featureFlagShardingFullDDLSupport\n  featureFlagSpoon\n  featureFlagTenantMigrations\n  featureFlagTimeseriesCollection\n  featureFlagTimeseriesUpdatesAndDeletes\n  featureFlagToaster\n  featureFlagUseSecondaryDelaySecs\n  findChunksOnConfigTimeoutMS\n  fixedServiceExecutorRecursionLimit\n  fixedServiceExecutorThreadLimit\n  flowControlDecayConstant\n  flowControlFudgeFactor\n  flowControlMaxSamples\n  flowControlMinTicketsPerSecond\n  flowControlSamplePeriod\n  flowControlTargetLagSeconds\n  flowControlThresholdLagPercentage\n  flowControlTicketAdderConstant\n  flowControlTicketMultiplierConstant\n  flowControlWarnThresholdSeconds\n  forceRollbackViaRefetch\n  globalConnPoolIdleTimeoutMinutes\n  heapProfilingEnabled\n  heapProfilingSampleIntervalBytes\n  heartBeatFrequencyMs\n  honorSystemUmask\n  indexEntryUnitSizeBytes\n  initialServiceExecutorThreadingModel\n  initialSyncOplogBuffer\n  initialSyncOplogBufferPeekCacheSize\n  initialSyncOplogFetcherBatchSize\n  initialSyncSourceReadPreference\n  initialSyncTransientErrorRetryPeriodSeconds\n  internalDocumentSourceCursorBatchSizeBytes\n  internalDocumentSourceGroupMaxMemoryBytes\n  internalDocumentSourceLookupCacheSizeBytes\n  internalDocumentSourceSetWindowFieldsMaxMemoryBytes\n  internalGeoNearQuery2DMaxCoveringCells\n  internalGeoPredicateQuery2DMaxCoveringCells\n  internalIndexBuildBulkLoadYieldIterations\n  internalInsertMaxBatchSize\n  internalLookupStageIntermediateDocumentMaxSizeBytes\n  internalPipelineLengthLimit\n  internalProhibitShardOperationRetry\n  internalQueryAllowShardedLookup\n  internalQueryAlwaysMergeOnPrimaryShard\n  internalQueryAppendIdToSetWindowFieldsSort\n  internalQueryCacheDisableInactiveEntries\n  internalQueryCacheEvictionRatio\n  internalQueryCacheMaxEntriesPerCollection\n  internalQueryCacheMaxSizeBytesBeforeStripDebugInfo\n  internalQueryCacheSize\n  internalQueryCacheWorksGrowthCoefficient\n  internalQueryDefaultDOP\n  internalQueryDesugarWhereToFunction\n  internalQueryDisableExchange\n  internalQueryEnableCSTParser\n  internalQueryEnableLoggingV2OplogEntries\n  internalQueryEnableSlotBasedExecutionEngine\n  internalQueryEnumerationMaxIntersectPerAnd\n  internalQueryEnumerationMaxOrSolutions\n  internalQueryEnumerationPreferLockstepOrEnumeration\n  internalQueryExecYieldIterations\n  internalQueryExecYieldPeriodMS\n  internalQueryExplainSizeThresholdBytes\n  internalQueryFacetBufferSizeBytes\n  internalQueryFacetMaxOutputDocSizeBytes\n  internalQueryForceIntersectionPlans\n  internalQueryIgnoreUnknownJSONSchemaKeywords\n  internalQueryJavaScriptFnTimeoutMillis\n  internalQueryJavaScriptHeapSizeLimitMB\n  internalQueryMaxAddToSetBytes\n  internalQueryMaxBlockingSortMemoryUsageBytes\n  internalQueryMaxDocValidationErrorConsideredValues\n  internalQueryMaxJsEmitBytes\n  internalQueryMaxPushBytes\n  internalQueryMaxRangeBytes\n  internalQueryMaxScansToExplode\n  internalQueryPlanEvaluationCollFraction\n  internalQueryPlanEvaluationMaxResults\n  internalQueryPlanEvaluationWorks\n  internalQueryPlanOrChildrenIndependently\n  internalQueryPlannerEnableHashIntersection\n  internalQueryPlannerEnableIndexIntersection\n  internalQueryPlannerGenerateCoveredWholeIndexScans\n  internalQueryPlannerMaxIndexedSolutions\n  internalQueryProhibitBlockingMergeOnMongoS\n  internalQueryProhibitMergingOnMongoS\n  internalQueryS2GeoCoarsestLevel\n  internalQueryS2GeoFinestLevel\n  internalQueryS2GeoMaxCells\n  internalQuerySlotBasedExecutionMaxStaticIndexScanIntervals\n  internalValidateFeaturesAsMaster\n  internalValidateFeaturesAsPrimary\n  javascriptProtection\n  journalCommitInterval\n  jsHeapLimitMB\n  loadRoutingTableOnStartup\n  localLogicalSessionTimeoutMinutes\n  localThresholdMs\n  logComponentVerbosity\n  logLevel\n  logicalSessionRefreshMillis\n  maxAcceptableLogicalClockDriftSecs\n  maxBSONDepth\n  maxCatchUpPercentageBeforeBlockingWrites\n  maxIndexBuildDrainBatchSize\n  maxIndexBuildDrainMemoryUsageMegabytes\n  maxIndexBuildMemoryUsageMegabytes\n  maxLogSizeKB\n  maxNumActiveUserIndexBuilds\n  maxNumSyncSourceChangesPerHour\n  maxNumberOfTransactionOperationsInSingleOplogEntry\n  maxOplogTruncationPointsAfterStartup\n  maxOplogTruncationPointsDuringStartup\n  maxSessions\n  maxSyncSourceLagSecs\n  maxTenantMigrationDonorServiceThreadPoolSize\n  maxTenantMigrationRecipientThreadPoolSize\n  maxTimeMSForHedgedReads\n  maxTransactionLockRequestTimeoutMillis\n  maxValidateMBperSec\n  maxValidateMemoryUsageMB\n  metadataRefreshInTransactionMaxWaitBehindCritSecMS\n  migrateCloneInsertionBatchDelayMS\n  migrateCloneInsertionBatchSize\n  migrationLockAcquisitionMaxWaitMS\n  minNumChunksForSessionsCollection\n  minOplogEntriesPerThread\n  minOplogTruncationPoints\n  minSnapshotHistoryWindowInSeconds\n  mirrorReads\n  mongosShutdownTimeoutMillisForSignaledShutdown\n  notablescan\n  numInitialSyncAttempts\n  numInitialSyncConnectAttempts\n  numInitialSyncOplogFindAttempts\n  ocspCacheSize\n  ocspEnabled\n  ocspStaplingRefreshPeriodSecs\n  ocspValidationRefreshPeriodSecs\n  opensslCipherConfig\n  opensslCipherSuiteConfig\n  opensslDiffieHellmanParameters\n  operationMemoryPoolBlockInitialSizeKB\n  operationMemoryPoolBlockMaxSizeKB\n  oplogApplicationEnforcesSteadyStateConstraints\n  oplogFetcherInitialSyncMaxFetcherRestarts\n  oplogFetcherSteadyStateMaxFetcherRestarts\n  oplogFetcherUsesExhaust\n  oplogInitialFindMaxSeconds\n  oplogNetworkTimeoutBufferSeconds\n  oplogRetriedFindMaxSeconds\n  oplogSamplingLogIntervalSeconds\n  oplogTruncationPointSizeMB\n  orphanCleanupDelaySecs\n  periodicNoopIntervalSecs\n  priorityTakeoverFreshnessWindowSeconds\n  processUmask\n  profileOperationResourceConsumptionMetrics\n  quiet\n  rangeDeleterBatchDelayMS\n  rangeDeleterBatchSize\n  readHedgingMode\n  receiveChunkWaitForRangeDeleterTimeoutMS\n  recoverFromOplogAsStandalone\n  recoverToOplogTimestamp\n  remainingReshardingOperationTimeThresholdMillis\n  replBatchLimitBytes\n  replBatchLimitOperations\n  replElectionTimeoutOffsetLimitFraction\n  replWriterMinThreadCount\n  replWriterThreadCount\n  replicaSetMonitorProtocol\n  reportOpWriteConcernCountersInServerStatus\n  requireApiVersion\n  reservedServiceExecutorRecursionLimit\n  reshardingCollectionClonerBatchSizeInBytes\n  reshardingCoordinatorServiceMaxThreadCount\n  reshardingCriticalSectionTimeoutMillis\n  reshardingDonorServiceMaxThreadCount\n  reshardingMinimumOperationDurationMillis\n  reshardingOplogApplierMaxLockRequestTimeoutMillis\n  reshardingOplogBatchLimitBytes\n  reshardingOplogBatchLimitOperations\n  reshardingOplogBatchTaskCount\n  reshardingRecipientServiceMaxThreadCount\n  reshardingTxnClonerProgressBatchSize\n  resumableIndexBuildMajorityOpTimeTimeoutMillis\n  rewriteStateChangeErrors\n  roleGraphInvalidationIsFatal\n  rollbackRemoteOplogQueryBatchSize\n  rollbackTimeLimitSecs\n  saslHostName\n  saslServiceName\n  saslauthdPath\n  scramIterationCount\n  scramSHA256IterationCount\n  scriptingEngineInterruptIntervalMS\n  shardedIndexConsistencyCheckIntervalMS\n  shutdownTimeoutMillisForSignaledShutdown\n  skipCorruptDocumentsWhenCloning\n  skipShardingConfigurationChecks\n  skipShellCursorFinalize\n  sslMode\n  sslWithholdClientCertificate\n  startupAuthSchemaValidation\n  startupRecoveryForRestore\n  storeFindAndModifyImagesInSideCollection\n  suppressNoTLSPeerCertificateWarning\n  syncdelay\n  synchronousServiceExecutorRecursionLimit\n  takeUnstableCheckpointOnShutdown\n  taskExecutorPoolSize\n  tcmallocAggressiveMemoryDecommit\n  tcmallocEnableMarkThreadTemporarilyIdle\n  tcmallocMaxTotalThreadCacheBytes\n  tcmallocReleaseRate\n  tcpFastOpenClient\n  tcpFastOpenQueueSize\n  tcpFastOpenServer\n  tenantApplierBatchSizeBytes\n  tenantApplierBatchSizeOps\n  tenantApplierThreadCount\n  tenantMigrationBlockingStateTimeoutMS\n  tenantMigrationDisableX509Auth\n  tenantMigrationExcludeDonorHostTimeoutMS\n  tenantMigrationExternalKeysRemovalBufferSecs\n  tenantMigrationGarbageCollectionDelayMS\n  tenantMigrationOplogBufferPeekCacheSize\n  tenantMigrationOplogFetcherBatchSize\n  testingDiagnosticsEnabled\n  testingSnapshotBehaviorInIsolation\n  timeseriesBucketMaxCount\n  timeseriesBucketMaxSize\n  timeseriesBucketsCollectionClusterById\n  timeseriesIdleBucketExpiryMemoryUsageThreshold\n  tlsCATrusts\n  tlsMode\n  tlsOCSPStaplingTimeoutSecs\n  tlsOCSPVerifyTimeoutSecs\n  tlsWithholdClientCertificate\n  tlsX509ClusterAuthDNOverride\n  tlsX509ExpirationWarningThresholdDays\n  totalUnitWriteSizeBytes\n  traceExceptions\n  traceWriteConflictExceptions\n  trafficRecordingDirectory\n  transactionLifetimeLimitSeconds\n  transactionSizeLimitBytes\n  ttlMonitorEnabled\n  ttlMonitorSleepSecs\n  useReadOnceCursorsForIndexBuilds\n  waitForSecondaryBeforeNoopWriteMS\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartup\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartupWaitMS\n  watchdogPeriodSeconds\n  wiredTigerConcurrentReadTransactions\n  wiredTigerConcurrentWriteTransactions\n  wiredTigerCursorCacheSize\n  wiredTigerEngineRuntimeConfig\n  wiredTigerFileHandleCloseIdleTime\n  wiredTigerFileHandleCloseMinimum\n  wiredTigerFileHandleCloseScanInterval\n  wiredTigerMaxCacheOverflowSizeGB\n  wiredTigerSessionCloseIdleTimeSecs\n  writePeriodicNoops\n",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "setShardVersion": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "shardingState": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "shutdown": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Shuts down the database. Must be run against the admin database and either (1) run from localhost or (2) run while authenticated with the shutdown privilege. If the node is the primary of a replica set, waits up to 'timeoutSecs' for an electable node to be caught up before stepping down. If 'force' is false and no electable node was able to catch up, does not shut down. If the node is in state SECONDARY after the attempted stepdown, any remaining time in 'timeoutSecs' is used for quiesce mode, where the database continues to allow operations to run, but directs clients to route new operations to other replica set members.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "splitChunk": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "internal command usage only\nexample:\n { splitChunk:\"db.foo\" , keyPattern: {a:1} , min : {a:100} , max: {a:200} { splitKeys : [ {a:150} , ... ]}",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "splitVector": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal command.\nexamples:\n  { splitVector : \"blog.post\" , keyPattern:{x:1} , min:{x:10} , max:{x:20}, maxChunkSize:200 }\n  maxChunkSize unit in MBs\n  May optionally specify 'maxSplitPoints' and 'maxChunkObjects' to avoid traversing the whole chunk\n  \n  { splitVector : \"blog.post\" , keyPattern:{x:1} , min:{x:10} , max:{x:20}, force: true }\n  'force' will produce one split point even if data is small; defaults to false\nNOTE: This command may take a while to run",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "startRecordingTraffic": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "startSession": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "start a logical session",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "stopRecordingTraffic": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "top": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "usage by collection, in micros ",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "update": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "update documents",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [
              "1"
            ],
            "deprecatedApiVersions": []
          },
          "updateRole": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "updateUser": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "usersInfo": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "secondaryOverrideOk",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "no help defined",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": false,
            "secondaryOverrideOk": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "validate": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Validate contents of a namespace by scanning its data structures for correctness.\nThis is a slow operation.\n\tAdd {full: true} option to do a more thorough check.\n\tAdd {background: true} to validate in the background.\n\tAdd {repair: true} to run repair mode.\nCannot specify both {full: true, background: true}.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "validateDBMetadata": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "validateDBMetadata checks that the stored metadata of a database/collection is valid within a particular API version. If 'db' parameter is specified, only runs validation against that database, if not the validation will be run againt all dbs. Similarly if 'collection' parameter is specified, the validation is only run against that collection, if not the validation is run against all collections.",
            "requiresAuth": true,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "voteCommitIndexBuild": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "Internal intra replica set command",
            "requiresAuth": true,
            "secondaryOk": false,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "waitForFailPoint": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "wait for a fail point to be entered a certain number of times",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": true,
            "apiVersions": [],
            "deprecatedApiVersions": []
          },
          "whatsmyuri": {
            "$k": [
              "help",
              "requiresAuth",
              "secondaryOk",
              "adminOnly",
              "apiVersions",
              "deprecatedApiVersions"
            ],
            "help": "{whatsmyuri:1}",
            "requiresAuth": false,
            "secondaryOk": true,
            "adminOnly": false,
            "apiVersions": [],
            "deprecatedApiVersions": []
          }
        },
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:40:07.070Z	INFO	// 172.20.0.3:43490 -> 172.17.0.1:27017 	clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 78,
-  "RequestID": 8,
+  "MessageLength": 71060,
+  "RequestID": 177,
   "ResponseTo": 20,
@@ -13,11 +13,3762 @@
         "$k": [
-          "argv",
-          "parsed",
+          "commands",
           "ok"
         ],
-        "argv": [
-          "ferretdb"
-        ],
-        "parsed": {
-          "$k": []
+        "commands": {
+          "$k": [
+            "_addShard",
+            "_cloneCollectionOptionsFromPrimaryShard",
+            "_configsvrAbortReshardCollection",
+            "_configsvrAddShard",
+            "_configsvrAddShardToZone",
+            "_configsvrBalancerCollectionStatus",
+            "_configsvrBalancerStart",
+            "_configsvrBalancerStatus",
+            "_configsvrBalancerStop",
+            "_configsvrCleanupReshardCollection",
+            "_configsvrClearJumboFlag",
+            "_configsvrCommitChunkMerge",
+            "_configsvrCommitChunkMigration",
+            "_configsvrCommitChunkSplit",
+            "_configsvrCommitChunksMerge",
+            "_configsvrCommitMovePrimary",
+            "_configsvrCommitReshardCollection",
+            "_configsvrCreateDatabase",
+            "_configsvrDropCollection",
+            "_configsvrDropDatabase",
+            "_configsvrEnableSharding",
+            "_configsvrEnsureChunkVersionIsGreaterThan",
+            "_configsvrMoveChunk",
+            "_configsvrMovePrimary",
+            "_configsvrRefineCollectionShardKey",
+            "_configsvrRemoveChunks",
+            "_configsvrRemoveShard",
+            "_configsvrRemoveShardFromZone",
+            "_configsvrRemoveTags",
+            "_configsvrRenameCollectionMetadata",
+            "_configsvrReshardCollection",
+            "_configsvrSetAllowMigrations",
+            "_configsvrShardCollection",
+            "_configsvrUpdateZoneKeyRange",
+            "_flushDatabaseCacheUpdates",
+            "_flushDatabaseCacheUpdatesWithWriteConcern",
+            "_flushReshardingStateChange",
+            "_flushRoutingTableCacheUpdates",
+            "_flushRoutingTableCacheUpdatesWithWriteConcern",
+            "_getNextSessionMods",
+            "_getUserCacheGeneration",
+            "_isSelf",
+            "_killOperations",
+            "_mergeAuthzCollections",
+            "_migrateClone",
+            "_recvChunkAbort",
+            "_recvChunkCommit",
+            "_recvChunkStart",
+            "_recvChunkStatus",
+            "_shardsvrAbortReshardCollection",
+            "_shardsvrCleanupReshardCollection",
+            "_shardsvrCloneCatalogData",
+            "_shardsvrCommitReshardCollection",
+            "_shardsvrCreateCollection",
+            "_shardsvrCreateCollectionParticipant",
+            "_shardsvrDropCollection",
+            "_shardsvrDropCollectionIfUUIDNotMatching",
+            "_shardsvrDropCollectionParticipant",
+            "_shardsvrDropDatabase",
+            "_shardsvrDropDatabaseParticipant",
+            "_shardsvrMovePrimary",
+            "_shardsvrRefineCollectionShardKey",
+            "_shardsvrRenameCollection",
+            "_shardsvrRenameCollectionParticipant",
+            "_shardsvrRenameCollectionParticipantUnblock",
+            "_shardsvrReshardCollection",
+            "_shardsvrReshardingOperationTime",
+            "_shardsvrShardCollection",
+            "_transferMods",
+            "abortTransaction",
+            "aggregate",
+            "appendOplogNote",
+            "applyOps",
+            "authenticate",
+            "autoSplitVector",
+            "availableQueryOptions",
+            "buildInfo",
+            "checkShardingIndex",
+            "cleanupOrphaned",
+            "cloneCollectionAsCapped",
+            "collMod",
+            "collStats",
+            "commitTransaction",
+            "compact",
+            "connPoolStats",
+            "connPoolSync",
+            "connectionStatus",
+            "convertToCapped",
+            "coordinateCommitTransaction",
+            "count",
+            "create",
+            "createIndexes",
+            "createRole",
+            "createUser",
+            "currentOp",
+            "dataSize",
+            "dbHash",
+            "dbStats",
+            "delete",
+            "distinct",
+            "donorAbortMigration",
+            "donorForgetMigration",
+            "donorStartMigration",
+            "driverOIDTest",
+            "drop",
+            "dropAllRolesFromDatabase",
+            "dropAllUsersFromDatabase",
+            "dropConnections",
+            "dropDatabase",
+            "dropIndexes",
+            "dropRole",
+            "dropUser",
+            "endSessions",
+            "explain",
+            "features",
+            "filemd5",
+            "find",
+            "findAndModify",
+            "flushRouterConfig",
+            "fsync",
+            "fsyncUnlock",
+            "getCmdLineOpts",
+            "getDatabaseVersion",
+            "getDefaultRWConcern",
+            "getDiagnosticData",
+            "getFreeMonitoringStatus",
+            "getLastError",
+            "getLog",
+            "getMore",
+            "getParameter",
+            "getShardMap",
+            "getShardVersion",
+            "getnonce",
+            "grantPrivilegesToRole",
+            "grantRolesToRole",
+            "grantRolesToUser",
+            "hello",
+            "hostInfo",
+            "insert",
+            "internalRenameIfOptionsAndIndexesMatch",
+            "invalidateUserCache",
+            "isMaster",
+            "killAllSessions",
+            "killAllSessionsByPattern",
+            "killCursors",
+            "killOp",
+            "killSessions",
+            "listCollections",
+            "listCommands",
+            "listDatabases",
+            "listIndexes",
+            "lockInfo",
+            "logRotate",
+            "logout",
+            "mapReduce",
+            "mergeChunks",
+            "moveChunk",
+            "ping",
+            "planCacheClear",
+            "planCacheClearFilters",
+            "planCacheListFilters",
+            "planCacheSetFilter",
+            "prepareTransaction",
+            "profile",
+            "reIndex",
+            "recipientForgetMigration",
+            "recipientSyncData",
+            "refreshSessions",
+            "renameCollection",
+            "repairDatabase",
+            "replSetAbortPrimaryCatchUp",
+            "replSetFreeze",
+            "replSetGetConfig",
+            "replSetGetRBID",
+            "replSetGetStatus",
+            "replSetHeartbeat",
+            "replSetInitiate",
+            "replSetMaintenance",
+            "replSetReconfig",
+            "replSetRequestVotes",
+            "replSetResizeOplog",
+            "replSetStepDown",
+            "replSetStepUp",
+            "replSetSyncFrom",
+            "replSetUpdatePosition",
+            "revokePrivilegesFromRole",
+            "revokeRolesFromRole",
+            "revokeRolesFromUser",
+            "rolesInfo",
+            "rotateCertificates",
+            "saslContinue",
+            "saslStart",
+            "serverStatus",
+            "setDefaultRWConcern",
+            "setFeatureCompatibilityVersion",
+            "setFreeMonitoring",
+            "setIndexCommitQuorum",
+            "setParameter",
+            "setShardVersion",
+            "shardingState",
+            "shutdown",
+            "splitChunk",
+            "splitVector",
+            "startRecordingTraffic",
+            "startSession",
+            "stopRecordingTraffic",
+            "top",
+            "update",
+            "updateRole",
+            "updateUser",
+            "usersInfo",
+            "validate",
+            "validateDBMetadata",
+            "voteCommitIndexBuild",
+            "waitForFailPoint",
+            "whatsmyuri"
+          ],
+          "_addShard": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by shards. Do not call directly. Adds a new shard to a cluster.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_cloneCollectionOptionsFromPrimaryShard": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, do not call directly. Creates a collection on a shard with UUID existing on primary.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrAbortReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Aborts any in-progress resharding operations for this collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrAddShard": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and adds a new shard to the cluster.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrAddShardToZone": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and adds a new zone to the shard.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrBalancerCollectionStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Checks whether the chunks of a given collection are in a quiesced state or there are any which need to be moved because of (1) draining shards, (2) zone violation or (3) imbalance between shards.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrBalancerStart": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrBalancerStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrBalancerStop": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCleanupReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Aborts and cleans up any in-progress resharding operations for this collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrClearJumboFlag": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Clears the jumbo flag of the chunk specified.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitChunkMerge": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a MergeChunkRequest",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitChunkMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitChunkSplit": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a SplitChunkRequest.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitChunksMerge": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a MergeChunksRequest",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitMovePrimary": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCommitReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Allows a reshard operation to enter critical section ASAP.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrCreateDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Create a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrDropCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Drops a collection from a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrDropDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Drops a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrEnableSharding": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Enable sharding on a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrEnsureChunkVersionIsGreaterThan": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrMoveChunk": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Requests the balancer to move or rebalance a single chunk.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrMovePrimary": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Reassigns the primary shard of a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRefineCollectionShardKey": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Adds a suffix to the shard key of an existing collection ('refines the shard key').",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRemoveChunks": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes the chunks for the specified collectionUUID.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRemoveShard": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes a shard from the cluster.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRemoveShardFromZone": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and removes the shard from the zone.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRemoveTags": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Removes the zone tags for the specified ns.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrRenameCollectionMetadata": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Renames a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Reshards a collection on a new shard key.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrSetAllowMigrations": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Sets the allowMigrations flag on the specified collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrShardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Shards a collection. Requires key. Optional unique. Sharding must already be enabled for the database",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_configsvrUpdateZoneKeyRange": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the sharding config server. Do not call directly. Validates and assigns a new range to a zone.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushDatabaseCacheUpdates": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command which waits for any pending routing table cache updates for a particular database to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushDatabaseCacheUpdatesWithWriteConcern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command which waits for any pending routing table cache updates for a particular database to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushReshardingStateChange": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command used by the resharding coordinator to flush state changes to the participant shards while the critical section is active.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushRoutingTableCacheUpdates": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command which waits for any pending routing table cache updates for a particular namespace to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_flushRoutingTableCacheUpdatesWithWriteConcern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command which waits for any pending routing table cache updates for a particular namespace to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_getNextSessionMods": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_getUserCacheGeneration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_isSelf": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ _isSelf : 1 } INTERNAL ONLY",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_killOperations": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command -- Kill operations on the target server by OperationKey.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_mergeAuthzCollections": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_migrateClone": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_recvChunkAbort": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_recvChunkCommit": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_recvChunkStart": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_recvChunkStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrAbortReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the shard server. Do not call directly. Aborts any in-progress resharding operations.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCleanupReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the shard server. Do not call directly. Aborts and cleans up any in-progress resharding operations for this collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCloneCatalogData": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCommitReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the shard server. Do not call directly. Commits an in-progress resharding operations",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCreateCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Creates a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrCreateCollectionParticipant": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Creates a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Drops a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropCollectionIfUUIDNotMatching": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command aimed to remove stale entries from the local collection catalog.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropCollectionParticipant": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by secondary sharding servers. Do not call directly. Participates in droping a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Drops a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrDropDatabaseParticipant": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by secondary sharding servers. Do not call directly. Participates in droping a database.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrMovePrimary": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrRefineCollectionShardKey": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command, which is exported by the primary sharding server. Do not call directly. Refines Collection shard key.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrRenameCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Renames a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrRenameCollectionParticipant": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Locally renames a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrRenameCollectionParticipantUnblock": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Releases the critical section of source and target collections.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrReshardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command. Do not call directly. Reshards a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrReshardingOperationTime": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command used by the resharding coordinator to query the elapsed and remaining time for the active resharding operation on participant shards.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_shardsvrShardCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "_transferMods": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "abortTransaction": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Aborts a transaction",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "aggregate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Runs the aggregation command. See http://dochub.mongodb.org/core/aggregation for more details.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "appendOplogNote": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Adds a no-op entry to the oplog",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "applyOps": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal (sharding)\n{ applyOps : [ ] , preCondition : [ { ns : ... , q : ... , res : ... } ] }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "authenticate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "autoSplitVector": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command returning the split points for a chunk, given the maximum chunk size.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "availableQueryOptions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "buildInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get version #, etc.\n{ buildinfo:1 }",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "checkShardingIndex": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command.\n",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "cleanupOrphaned": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "cloneCollectionAsCapped": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ cloneCollectionAsCapped:\u003cfromName\u003e, toCollection:\u003ctoName\u003e, size:\u003csizeInBytes\u003e }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "collMod": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Sets collection options.\nExample: { collMod: 'foo', viewOn: 'bar'} Example: { collMod: 'foo', index: {keyPattern: {a: 1}, expireAfterSeconds: 600} Example: { collMod: 'foo', index: {name: 'bar', expireAfterSeconds: 600} }\n",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "collStats": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ collStats:\"blog.posts\" , scale : 1 } scale divides sizes e.g. for KB use 1024\n    avgObjSize - in bytes",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "commitTransaction": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Commits a transaction",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "compact": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "compact collection\nwarning: this operation locks the database and is slow. you can cancel with killOp()\n{ compact : \u003ccollection_name\u003e, [force:\u003cbool\u003e] }\n  force - allows to run on a replica set primary\n",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "connPoolStats": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "stats about connections between servers in a replica set or sharded cluster.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "connPoolSync": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "connectionStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Returns connection-specific information such as logged-in users and their roles",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "convertToCapped": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ convertToCapped:\u003cfromCollectionName\u003e, size:\u003csizeInBytes\u003e }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "coordinateCommitTransaction": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Coordinates the commit for a transaction. Only called by mongos.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "count": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "count objects in collection",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "create": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "explicitly creates a collection or view\n{\n  create: \u003cstring: collection or view name\u003e [,\n  capped: \u003cbool: capped collection\u003e,\n  autoIndexId: \u003cbool: automatic creation of _id index\u003e,\n  idIndex: \u003cdocument: _id index specification\u003e,\n  size: \u003cint: size in bytes of the capped collection\u003e,\n  max: \u003cint: max number of documents in the capped collection\u003e,\n  storageEngine: \u003cdocument: storage engine configuration\u003e,\n  validator: \u003cdocument: validation rules\u003e,\n  validationLevel: \u003cstring: validation level\u003e,\n  validationAction: \u003cstring: validation action\u003e,\n  indexOptionDefaults: \u003cdocument: default configuration for indexes\u003e,\n  viewOn: \u003cstring: name of source collection or view\u003e,\n  pipeline: \u003carray\u003cobject\u003e: aggregation pipeline stage\u003e,\n  collation: \u003cdocument: default collation for the collection or view\u003e,\n  writeConcern: \u003cdocument: write concern expression for the operation\u003e]\n}",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "createIndexes": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "createRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "createUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "currentOp": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dataSize": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "determine data size for a set of data in a certain range\nexample: { dataSize:\"blog.posts\", keyPattern:{x:1}, min:{x:10}, max:{x:55} }\nmin and max parameters are optional. They must either both be included or both omitted\nkeyPattern is an optional parameter indicating an index pattern that would be usefulfor iterating over the min/max bounds. If keyPattern is omitted, it is inferred from the structure of min. \nnote: This command may take a while to run",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dbHash": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dbStats": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Get stats on a database. Not instantaneous. Slower for databases with large .ns files.\nExample: { dbStats:1, scale:1 }",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "delete": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "delete documents",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "distinct": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ distinct : 'collection name' , key : 'a.b' , query : {} }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "donorAbortMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Abort a migration",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "donorForgetMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Forget a migration",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "donorStartMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Start migrating databases whose names match the specified prefix to the specified replica set.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "driverOIDTest": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "drop": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "drop a collection\n{drop : \u003ccollectionName\u003e}",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "dropAllRolesFromDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dropAllUsersFromDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dropConnections": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Drop egress connections to specified host and port",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dropDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "drop (delete) this database",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "dropIndexes": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "drop indexes for a collection",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "dropRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "dropUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "endSessions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "end a set of logical sessions",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "explain": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "explain database reads and writes",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "features": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "return build level feature settings",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "filemd5": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": " example: { filemd5 : ObjectId(aaaaaaa) , root : \"fs\" }",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "find": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "query for documents",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "findAndModify": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ findAndModify: \"collection\", query: {processed:false}, update: {$set: {processed:true}}, new: true}\n{ findAndModify: \"collection\", query: {processed:false}, remove: true, sort: {priority:-1}}\nEither update or remove is required, all other fields have default values.\nOutput is in the \"value\" field\n",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "flushRouterConfig": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Flushes the cached routing information for a single collection, entire database (and its collections) or all databases, which would cause full reload from the config server on the next access.\nUsage:\n{flushRouterConfig: 1} flushes all databases\n{flushRouterConfig: 'db'} flushes only the given database (and its collections)\n{flushRouterconfig: 'db.coll'} flushes only the given collection",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "fsync": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "http://dochub.mongodb.org/core/fsynccommand",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "fsyncUnlock": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getCmdLineOpts": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get argv",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getDatabaseVersion": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": " example: { getDatabaseVersion : 'foo'  } ",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getDefaultRWConcern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get the current read/write concern defaults being applied by this node",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getDiagnosticData": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get latest diagnostic data collection snapshot",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getFreeMonitoringStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Indicates free monitoring status",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getLastError": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "return error status of the last operation on this connection\noptions:\n  { fsync:true } - fsync before returning, or wait for journal commit if running with --journal\n  { j:true } - wait for journal commit if running with --journal\n  { w:n } - await replication to n servers (including self) before returning\n  { w:'majority' } - await replication to majority of set\n  { wtimeout:m} - timeout for w in m milliseconds",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getLog": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ getLog : '*' }  OR { getLog : 'global' }",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getMore": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "retrieve more results from an existing cursor",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "getParameter": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get administrative option(s)\nexample:\n{ getParameter:1, notablescan:1 }\nsupported:\n  AlwaysRecordTraffic\n  KeysRotationIntervalSec\n  ShardingTaskExecutorPoolHostTimeoutMS\n  ShardingTaskExecutorPoolMaxConnecting\n  ShardingTaskExecutorPoolMaxSize\n  ShardingTaskExecutorPoolMinSize\n  ShardingTaskExecutorPoolRefreshRequirementMS\n  ShardingTaskExecutorPoolRefreshTimeoutMS\n  ShardingTaskExecutorPoolReplicaSetMatching\n  TransactionRecordMinimumLifetimeMinutes\n  acceptApiVersion2\n  aggregateOperationResourceConsumptionMetrics\n  allowRolesFromX509Certificates\n  authSchemaVersion\n  authenticationMechanisms\n  authorizationManagerCacheSize\n  authorizationManagerPinnedUsers\n  authorizationManagerPinnedUsersRefreshIntervalMillis\n  automationServiceDescriptor\n  awsEC2InstanceMetadataUrl\n  awsECSInstanceMetadataUrl\n  bgSyncOplogFetcherBatchSize\n  changeSyncSourceThresholdMillis\n  clientCursorMonitorFrequencySecs\n  cloudFreeMonitoringEndpointURL\n  clusterAuthMode\n  collectionBulkLoaderBatchSizeInBytes\n  collectionClonerBatchSize\n  collectionClonerUsesExhaust\n  connPoolMaxConnsPerHost\n  connPoolMaxInUseConnsPerHost\n  connectTimeoutMs\n  coordinateCommitReturnImmediatelyAfterPersistingDecision\n  createRollbackDataFiles\n  cursorTimeoutMillis\n  deprecatedWireOpsWarningPeriodInSeconds\n  diagnosticDataCollectionDirectoryPath\n  diagnosticDataCollectionDirectorySizeMB\n  diagnosticDataCollectionEnableLatencyHistograms\n  diagnosticDataCollectionEnabled\n  diagnosticDataCollectionFileSizeMB\n  diagnosticDataCollectionPeriodMillis\n  diagnosticDataCollectionSamplesPerChunk\n  diagnosticDataCollectionSamplesPerInterimUpdate\n  diagnosticDataCollectionVerboseTCMalloc\n  disableJavaScriptJIT\n  disableLogicalSessionCacheRefresh\n  disableNonSSLConnectionLogging\n  disableNonTLSConnectionLogging\n  disableResumableRangeDeleter\n  disableSplitHorizonIPCheck\n  disabledSecureAllocatorDomains\n  documentUnitSizeBytes\n  enableDefaultWriteConcernUpdatesForInitiate\n  enableElectionHandoff\n  enableFinerGrainedCatalogCacheRefresh\n  enableFlowControl\n  enableIndexBuildCommitQuorum\n  enableLocalhostAuthBypass\n  enableOverrideClusterChainingSetting\n  enableReconfigRollbackCommittedWritesCheck\n  enableResumableIndexBuilds\n  enableSearchMeta\n  enableShardedIndexConsistencyCheck\n  enableTestCommands\n  enableTimeoutOfInactiveSessionCursors\n  enforceUserClusterSeparation\n  featureCompatibilityVersion\n  featureFlagBlender\n  featureFlagChangeStreamsOptimization\n  featureFlagDefaultReadConcernLocal\n  featureFlagDefaultWriteConcernMajority\n  featureFlagDotsAndDollars\n  featureFlagFryer\n  featureFlagLockFreeReads\n  featureFlagResharding\n  featureFlagRetryableFindAndModify\n  featureFlagSearchMeta\n  featureFlagShardedTimeSeries\n  featureFlagShardedTimeSeriesUpdateDelete\n  featureFlagShardingFullDDLSupport\n  featureFlagSpoon\n  featureFlagTenantMigrations\n  featureFlagTimeseriesCollection\n  featureFlagTimeseriesUpdatesAndDeletes\n  featureFlagToaster\n  featureFlagUseSecondaryDelaySecs\n  findChunksOnConfigTimeoutMS\n  fixedServiceExecutorRecursionLimit\n  fixedServiceExecutorThreadLimit\n  flowControlDecayConstant\n  flowControlFudgeFactor\n  flowControlMaxSamples\n  flowControlMinTicketsPerSecond\n  flowControlSamplePeriod\n  flowControlTargetLagSeconds\n  flowControlThresholdLagPercentage\n  flowControlTicketAdderConstant\n  flowControlTicketMultiplierConstant\n  flowControlWarnThresholdSeconds\n  forceRollbackViaRefetch\n  globalConnPoolIdleTimeoutMinutes\n  heapProfilingEnabled\n  heapProfilingSampleIntervalBytes\n  heartBeatFrequencyMs\n  honorSystemUmask\n  indexEntryUnitSizeBytes\n  initialServiceExecutorThreadingModel\n  initialSyncOplogBuffer\n  initialSyncOplogBufferPeekCacheSize\n  initialSyncOplogFetcherBatchSize\n  initialSyncSourceReadPreference\n  initialSyncTransientErrorRetryPeriodSeconds\n  internalDocumentSourceCursorBatchSizeBytes\n  internalDocumentSourceGroupMaxMemoryBytes\n  internalDocumentSourceLookupCacheSizeBytes\n  internalDocumentSourceSetWindowFieldsMaxMemoryBytes\n  internalGeoNearQuery2DMaxCoveringCells\n  internalGeoPredicateQuery2DMaxCoveringCells\n  internalIndexBuildBulkLoadYieldIterations\n  internalInsertMaxBatchSize\n  internalLookupStageIntermediateDocumentMaxSizeBytes\n  internalPipelineLengthLimit\n  internalProhibitShardOperationRetry\n  internalQueryAllowShardedLookup\n  internalQueryAlwaysMergeOnPrimaryShard\n  internalQueryAppendIdToSetWindowFieldsSort\n  internalQueryCacheDisableInactiveEntries\n  internalQueryCacheEvictionRatio\n  internalQueryCacheMaxEntriesPerCollection\n  internalQueryCacheMaxSizeBytesBeforeStripDebugInfo\n  internalQueryCacheSize\n  internalQueryCacheWorksGrowthCoefficient\n  internalQueryDefaultDOP\n  internalQueryDesugarWhereToFunction\n  internalQueryDisableExchange\n  internalQueryEnableCSTParser\n  internalQueryEnableLoggingV2OplogEntries\n  internalQueryEnableSlotBasedExecutionEngine\n  internalQueryEnumerationMaxIntersectPerAnd\n  internalQueryEnumerationMaxOrSolutions\n  internalQueryEnumerationPreferLockstepOrEnumeration\n  internalQueryExecYieldIterations\n  internalQueryExecYieldPeriodMS\n  internalQueryExplainSizeThresholdBytes\n  internalQueryFacetBufferSizeBytes\n  internalQueryFacetMaxOutputDocSizeBytes\n  internalQueryForceIntersectionPlans\n  internalQueryIgnoreUnknownJSONSchemaKeywords\n  internalQueryJavaScriptFnTimeoutMillis\n  internalQueryJavaScriptHeapSizeLimitMB\n  internalQueryMaxAddToSetBytes\n  internalQueryMaxBlockingSortMemoryUsageBytes\n  internalQueryMaxDocValidationErrorConsideredValues\n  internalQueryMaxJsEmitBytes\n  internalQueryMaxPushBytes\n  internalQueryMaxRangeBytes\n  internalQueryMaxScansToExplode\n  internalQueryPlanEvaluationCollFraction\n  internalQueryPlanEvaluationMaxResults\n  internalQueryPlanEvaluationWorks\n  internalQueryPlanOrChildrenIndependently\n  internalQueryPlannerEnableHashIntersection\n  internalQueryPlannerEnableIndexIntersection\n  internalQueryPlannerGenerateCoveredWholeIndexScans\n  internalQueryPlannerMaxIndexedSolutions\n  internalQueryProhibitBlockingMergeOnMongoS\n  internalQueryProhibitMergingOnMongoS\n  internalQueryS2GeoCoarsestLevel\n  internalQueryS2GeoFinestLevel\n  internalQueryS2GeoMaxCells\n  internalQuerySlotBasedExecutionMaxStaticIndexScanIntervals\n  internalValidateFeaturesAsMaster\n  internalValidateFeaturesAsPrimary\n  javascriptProtection\n  journalCommitInterval\n  jsHeapLimitMB\n  loadRoutingTableOnStartup\n  localLogicalSessionTimeoutMinutes\n  localThresholdMs\n  logComponentVerbosity\n  logLevel\n  logicalSessionRefreshMillis\n  maxAcceptableLogicalClockDriftSecs\n  maxBSONDepth\n  maxCatchUpPercentageBeforeBlockingWrites\n  maxIndexBuildDrainBatchSize\n  maxIndexBuildDrainMemoryUsageMegabytes\n  maxIndexBuildMemoryUsageMegabytes\n  maxLogSizeKB\n  maxNumActiveUserIndexBuilds\n  maxNumSyncSourceChangesPerHour\n  maxNumberOfTransactionOperationsInSingleOplogEntry\n  maxOplogTruncationPointsAfterStartup\n  maxOplogTruncationPointsDuringStartup\n  maxSessions\n  maxSyncSourceLagSecs\n  maxTenantMigrationDonorServiceThreadPoolSize\n  maxTenantMigrationRecipientThreadPoolSize\n  maxTimeMSForHedgedReads\n  maxTransactionLockRequestTimeoutMillis\n  maxValidateMBperSec\n  maxValidateMemoryUsageMB\n  metadataRefreshInTransactionMaxWaitBehindCritSecMS\n  migrateCloneInsertionBatchDelayMS\n  migrateCloneInsertionBatchSize\n  migrationLockAcquisitionMaxWaitMS\n  minNumChunksForSessionsCollection\n  minOplogEntriesPerThread\n  minOplogTruncationPoints\n  minSnapshotHistoryWindowInSeconds\n  mirrorReads\n  mongosShutdownTimeoutMillisForSignaledShutdown\n  notablescan\n  numInitialSyncAttempts\n  numInitialSyncConnectAttempts\n  numInitialSyncOplogFindAttempts\n  ocspCacheSize\n  ocspEnabled\n  ocspStaplingRefreshPeriodSecs\n  ocspValidationRefreshPeriodSecs\n  opensslCipherConfig\n  opensslCipherSuiteConfig\n  opensslDiffieHellmanParameters\n  operationMemoryPoolBlockInitialSizeKB\n  operationMemoryPoolBlockMaxSizeKB\n  oplogApplicationEnforcesSteadyStateConstraints\n  oplogFetcherInitialSyncMaxFetcherRestarts\n  oplogFetcherSteadyStateMaxFetcherRestarts\n  oplogFetcherUsesExhaust\n  oplogInitialFindMaxSeconds\n  oplogNetworkTimeoutBufferSeconds\n  oplogRetriedFindMaxSeconds\n  oplogSamplingLogIntervalSeconds\n  oplogTruncationPointSizeMB\n  orphanCleanupDelaySecs\n  periodicNoopIntervalSecs\n  priorityTakeoverFreshnessWindowSeconds\n  processUmask\n  profileOperationResourceConsumptionMetrics\n  quiet\n  rangeDeleterBatchDelayMS\n  rangeDeleterBatchSize\n  readHedgingMode\n  receiveChunkWaitForRangeDeleterTimeoutMS\n  recoverFromOplogAsStandalone\n  recoverToOplogTimestamp\n  remainingReshardingOperationTimeThresholdMillis\n  replBatchLimitBytes\n  replBatchLimitOperations\n  replElectionTimeoutOffsetLimitFraction\n  replWriterMinThreadCount\n  replWriterThreadCount\n  replicaSetMonitorProtocol\n  reportOpWriteConcernCountersInServerStatus\n  requireApiVersion\n  reservedServiceExecutorRecursionLimit\n  reshardingCollectionClonerBatchSizeInBytes\n  reshardingCoordinatorServiceMaxThreadCount\n  reshardingCriticalSectionTimeoutMillis\n  reshardingDonorServiceMaxThreadCount\n  reshardingMinimumOperationDurationMillis\n  reshardingOplogApplierMaxLockRequestTimeoutMillis\n  reshardingOplogBatchLimitBytes\n  reshardingOplogBatchLimitOperations\n  reshardingOplogBatchTaskCount\n  reshardingRecipientServiceMaxThreadCount\n  reshardingTxnClonerProgressBatchSize\n  resumableIndexBuildMajorityOpTimeTimeoutMillis\n  rewriteStateChangeErrors\n  roleGraphInvalidationIsFatal\n  rollbackRemoteOplogQueryBatchSize\n  rollbackTimeLimitSecs\n  saslHostName\n  saslServiceName\n  saslauthdPath\n  scramIterationCount\n  scramSHA256IterationCount\n  scriptingEngineInterruptIntervalMS\n  shardedIndexConsistencyCheckIntervalMS\n  shutdownTimeoutMillisForSignaledShutdown\n  skipCorruptDocumentsWhenCloning\n  skipShardingConfigurationChecks\n  skipShellCursorFinalize\n  sslMode\n  sslWithholdClientCertificate\n  startupAuthSchemaValidation\n  startupRecoveryForRestore\n  storeFindAndModifyImagesInSideCollection\n  suppressNoTLSPeerCertificateWarning\n  syncdelay\n  synchronousServiceExecutorRecursionLimit\n  takeUnstableCheckpointOnShutdown\n  taskExecutorPoolSize\n  tcmallocAggressiveMemoryDecommit\n  tcmallocEnableMarkThreadTemporarilyIdle\n  tcmallocMaxTotalThreadCacheBytes\n  tcmallocReleaseRate\n  tcpFastOpenClient\n  tcpFastOpenQueueSize\n  tcpFastOpenServer\n  tenantApplierBatchSizeBytes\n  tenantApplierBatchSizeOps\n  tenantApplierThreadCount\n  tenantMigrationBlockingStateTimeoutMS\n  tenantMigrationDisableX509Auth\n  tenantMigrationExcludeDonorHostTimeoutMS\n  tenantMigrationExternalKeysRemovalBufferSecs\n  tenantMigrationGarbageCollectionDelayMS\n  tenantMigrationOplogBufferPeekCacheSize\n  tenantMigrationOplogFetcherBatchSize\n  testingDiagnosticsEnabled\n  testingSnapshotBehaviorInIsolation\n  timeseriesBucketMaxCount\n  timeseriesBucketMaxSize\n  timeseriesBucketsCollectionClusterById\n  timeseriesIdleBucketExpiryMemoryUsageThreshold\n  tlsCATrusts\n  tlsMode\n  tlsOCSPStaplingTimeoutSecs\n  tlsOCSPVerifyTimeoutSecs\n  tlsWithholdClientCertificate\n  tlsX509ClusterAuthDNOverride\n  tlsX509ExpirationWarningThresholdDays\n  totalUnitWriteSizeBytes\n  traceExceptions\n  traceWriteConflictExceptions\n  trafficRecordingDirectory\n  transactionLifetimeLimitSeconds\n  transactionSizeLimitBytes\n  ttlMonitorEnabled\n  ttlMonitorSleepSecs\n  useReadOnceCursorsForIndexBuilds\n  waitForSecondaryBeforeNoopWriteMS\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartup\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartupWaitMS\n  watchdogPeriodSeconds\n  wiredTigerConcurrentReadTransactions\n  wiredTigerConcurrentWriteTransactions\n  wiredTigerCursorCacheSize\n  wiredTigerEngineRuntimeConfig\n  wiredTigerFileHandleCloseIdleTime\n  wiredTigerFileHandleCloseMinimum\n  wiredTigerFileHandleCloseScanInterval\n  wiredTigerMaxCacheOverflowSizeGB\n  wiredTigerSessionCloseIdleTimeSecs\n  writePeriodicNoops\n{ getParameter:'*' } to get everything\n",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getShardMap": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "lists the set of shards known to this instance",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getShardVersion": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": " example: { getShardVersion : 'alleyinsider.foo'  } ",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "getnonce": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "grantPrivilegesToRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "grantRolesToRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "grantRolesToUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "hello": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Check if this server is primary for a replica set\n{ hello : 1 }",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "hostInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "returns information about the daemon's host",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "insert": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "insert documents",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "internalRenameIfOptionsAndIndexesMatch": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command to rename and check collection options",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "invalidateUserCache": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "isMaster": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Check if this server is primary for a replica set\n{ isMaster : 1 }",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "killAllSessions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "kill all logical sessions, for a user, and their operations",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "killAllSessionsByPattern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "kill logical sessions by pattern",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "killCursors": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Kill a list of cursor ids",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "killOp": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "killSessions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "kill a logical session and its operations",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "listCollections": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "list collections for this db",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "listCommands": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "get a list of all db commands",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "listDatabases": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ listDatabases:1, [filter: \u003cfilterObject\u003e] [, nameOnly: true ] }\nlist databases on this server",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "listIndexes": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "list indexes for a collection",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "lockInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "show all lock info on the server",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "logRotate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "logout": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "de-authenticate",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "mapReduce": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Runs the mapReduce command. See http://dochub.mongodb.org/core/mapreduce for details.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "mergeChunks": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command to merge a contiguous range of chunks.\nUsage: { mergeChunks: \u003cns\u003e, epoch: \u003cepoch\u003e, bounds: [\u003cmin key\u003e, \u003cmax key\u003e] }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "moveChunk": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "should not be calling this directly",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "ping": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "a way to check that the server is alive. responds immediately even if server is in a db lock.",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "planCacheClear": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Drops one or all plan cache entries in a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "planCacheClearFilters": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Clears index filter for a single query shape or, if the query shape is omitted, all filters for the collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "planCacheListFilters": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Displays index filters for all query shapes in a collection.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "planCacheSetFilter": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Sets index filter for a query shape. Overrides existing filter.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "prepareTransaction": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Prepares a transaction on this shard; sent by a router or re-sent by the transaction commit coordinator for a cross-shard transaction",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "profile": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "controls the behaviour of the performance profiler, the fraction of eligible operations which are sampled for logging/profiling, and the threshold duration at which ops become eligible. See http://docs.mongodb.org/manual/reference/command/profile",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "reIndex": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "re-index a collection (can only be run on a standalone mongod)",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "recipientForgetMigration": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Interrupts tenant migration data sync and marks that the recipient's durable state machine may be garbage collected.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "recipientSyncData": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal replica set command; instructs the recipient to sync data as part of a tenant migration.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "refreshSessions": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "renew a set of logical sessions",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "renameCollection": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": " example: { renameCollection: foo.a, to: bar.b }",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "repairDatabase": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "This command has been removed. If you would like to compact your data, use the 'compact' command. If you would like to rebuild indexes, use the 'reIndex' command. If you need to recover data, please see the documentation for repairing your database offline: http://dochub.mongodb.org/core/repair",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetAbortPrimaryCatchUp": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ CmdReplSetAbortPrimaryCatchUp : 1 }\nAbort primary catch-up mode; immediately finish the transition to primary without fetching any further unreplicated writes from any other online nodes",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetFreeze": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ replSetFreeze : \u003cseconds\u003e }\n'freeze' state of member to the extent we can do that.  What this really means is that\nthis node will not attempt to become primary until the time period specified expires.\nYou can call again with {replSetFreeze:0} to unfreeze sooner.\nA process restart unfreezes the member also.\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetGetConfig": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Returns the current replica set configuration{ replSetGetConfig : 1 }\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetGetRBID": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetGetStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Report status of a replica set from the POV of this server\n{ replSetGetStatus : 1 }\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetHeartbeat": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetInitiate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Initiate/christen a replica set.\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetMaintenance": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ replSetMaintenance : bool }\nEnable or disable maintenance mode.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetReconfig": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Adjust configuration of a replica set\n{ replSetReconfig : config_object }\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetRequestVotes": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetResizeOplog": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Resize oplog using size (in MBs) and optionally, retention (in terms of hours)",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetStepDown": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ replSetStepDown : \u003cseconds\u003e }\nStep down as primary.  Will not try to reelect self for the specified time period (1 minute if no numeric secs value specified, or secs is 0).\n(If another member with same priority takes over in the meantime, it will stay primary.)\nhttp://dochub.mongodb.org/core/replicasetcommands",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetStepUp": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetSyncFrom": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{ replSetSyncFrom : \"host:port\" }\nChange who this member is syncing from. Note: This will interrupt and restart an in-progress initial sync.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "replSetUpdatePosition": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "revokePrivilegesFromRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "revokeRolesFromRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "revokeRolesFromUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "rolesInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "rotateCertificates": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Rotate certificates for new SSL connections",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "saslContinue": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Subsequent steps in a SASL authentication conversation.",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "saslStart": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "First step in a SASL authentication conversation.",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "serverStatus": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "returns lots of administrative server statistics",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setDefaultRWConcern": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "set the current read/write concern defaults (cluster-wide)",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setFeatureCompatibilityVersion": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Set the featureCompatibilityVersion used by this cluster. If set to '4.4', then features introduced in versions greater than '4.4' will be disabled If set to '4.9', then features introduced in '5.0' will be disabled. If set to '5.0', then '5.0' features are enabled, and all nodes in the cluster must be binary version 5.0. See https://docs.mongodb.com/master/release-notes/4.4-compatibility/#feature-compatibility.",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setFreeMonitoring": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "enable or disable Free Monitoring",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setIndexCommitQuorum": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Resets the commitQuorum for the given index builds in a collection. Usage:\n{\n    setIndexCommitQuorum: \u003cstring\u003e collection name,\n    indexNames: array\u003cstring\u003e list of index names,\n    commitQuorum: \u003cstring|number|object\u003e option to define the required quorum for\n                  the index builds to commit\n}",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setParameter": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "set administrative option(s)\n{ setParameter:1, \u003cparam\u003e:\u003cvalue\u003e }\nsupported:\n  AlwaysRecordTraffic\n  KeysRotationIntervalSec\n  ShardingTaskExecutorPoolHostTimeoutMS\n  ShardingTaskExecutorPoolMaxConnecting\n  ShardingTaskExecutorPoolMaxSize\n  ShardingTaskExecutorPoolMinSize\n  ShardingTaskExecutorPoolRefreshRequirementMS\n  ShardingTaskExecutorPoolRefreshTimeoutMS\n  ShardingTaskExecutorPoolReplicaSetMatching\n  TransactionRecordMinimumLifetimeMinutes\n  acceptApiVersion2\n  aggregateOperationResourceConsumptionMetrics\n  allowRolesFromX509Certificates\n  authSchemaVersion\n  authenticationMechanisms\n  authorizationManagerCacheSize\n  authorizationManagerPinnedUsers\n  authorizationManagerPinnedUsersRefreshIntervalMillis\n  automationServiceDescriptor\n  awsEC2InstanceMetadataUrl\n  awsECSInstanceMetadataUrl\n  bgSyncOplogFetcherBatchSize\n  changeSyncSourceThresholdMillis\n  clientCursorMonitorFrequencySecs\n  cloudFreeMonitoringEndpointURL\n  clusterAuthMode\n  collectionBulkLoaderBatchSizeInBytes\n  collectionClonerBatchSize\n  collectionClonerUsesExhaust\n  connPoolMaxConnsPerHost\n  connPoolMaxInUseConnsPerHost\n  connectTimeoutMs\n  coordinateCommitReturnImmediatelyAfterPersistingDecision\n  createRollbackDataFiles\n  cursorTimeoutMillis\n  deprecatedWireOpsWarningPeriodInSeconds\n  diagnosticDataCollectionDirectoryPath\n  diagnosticDataCollectionDirectorySizeMB\n  diagnosticDataCollectionEnableLatencyHistograms\n  diagnosticDataCollectionEnabled\n  diagnosticDataCollectionFileSizeMB\n  diagnosticDataCollectionPeriodMillis\n  diagnosticDataCollectionSamplesPerChunk\n  diagnosticDataCollectionSamplesPerInterimUpdate\n  diagnosticDataCollectionVerboseTCMalloc\n  disableJavaScriptJIT\n  disableLogicalSessionCacheRefresh\n  disableNonSSLConnectionLogging\n  disableNonTLSConnectionLogging\n  disableResumableRangeDeleter\n  disableSplitHorizonIPCheck\n  disabledSecureAllocatorDomains\n  documentUnitSizeBytes\n  enableDefaultWriteConcernUpdatesForInitiate\n  enableElectionHandoff\n  enableFinerGrainedCatalogCacheRefresh\n  enableFlowControl\n  enableIndexBuildCommitQuorum\n  enableLocalhostAuthBypass\n  enableOverrideClusterChainingSetting\n  enableReconfigRollbackCommittedWritesCheck\n  enableResumableIndexBuilds\n  enableSearchMeta\n  enableShardedIndexConsistencyCheck\n  enableTestCommands\n  enableTimeoutOfInactiveSessionCursors\n  enforceUserClusterSeparation\n  featureCompatibilityVersion\n  featureFlagBlender\n  featureFlagChangeStreamsOptimization\n  featureFlagDefaultReadConcernLocal\n  featureFlagDefaultWriteConcernMajority\n  featureFlagDotsAndDollars\n  featureFlagFryer\n  featureFlagLockFreeReads\n  featureFlagResharding\n  featureFlagRetryableFindAndModify\n  featureFlagSearchMeta\n  featureFlagShardedTimeSeries\n  featureFlagShardedTimeSeriesUpdateDelete\n  featureFlagShardingFullDDLSupport\n  featureFlagSpoon\n  featureFlagTenantMigrations\n  featureFlagTimeseriesCollection\n  featureFlagTimeseriesUpdatesAndDeletes\n  featureFlagToaster\n  featureFlagUseSecondaryDelaySecs\n  findChunksOnConfigTimeoutMS\n  fixedServiceExecutorRecursionLimit\n  fixedServiceExecutorThreadLimit\n  flowControlDecayConstant\n  flowControlFudgeFactor\n  flowControlMaxSamples\n  flowControlMinTicketsPerSecond\n  flowControlSamplePeriod\n  flowControlTargetLagSeconds\n  flowControlThresholdLagPercentage\n  flowControlTicketAdderConstant\n  flowControlTicketMultiplierConstant\n  flowControlWarnThresholdSeconds\n  forceRollbackViaRefetch\n  globalConnPoolIdleTimeoutMinutes\n  heapProfilingEnabled\n  heapProfilingSampleIntervalBytes\n  heartBeatFrequencyMs\n  honorSystemUmask\n  indexEntryUnitSizeBytes\n  initialServiceExecutorThreadingModel\n  initialSyncOplogBuffer\n  initialSyncOplogBufferPeekCacheSize\n  initialSyncOplogFetcherBatchSize\n  initialSyncSourceReadPreference\n  initialSyncTransientErrorRetryPeriodSeconds\n  internalDocumentSourceCursorBatchSizeBytes\n  internalDocumentSourceGroupMaxMemoryBytes\n  internalDocumentSourceLookupCacheSizeBytes\n  internalDocumentSourceSetWindowFieldsMaxMemoryBytes\n  internalGeoNearQuery2DMaxCoveringCells\n  internalGeoPredicateQuery2DMaxCoveringCells\n  internalIndexBuildBulkLoadYieldIterations\n  internalInsertMaxBatchSize\n  internalLookupStageIntermediateDocumentMaxSizeBytes\n  internalPipelineLengthLimit\n  internalProhibitShardOperationRetry\n  internalQueryAllowShardedLookup\n  internalQueryAlwaysMergeOnPrimaryShard\n  internalQueryAppendIdToSetWindowFieldsSort\n  internalQueryCacheDisableInactiveEntries\n  internalQueryCacheEvictionRatio\n  internalQueryCacheMaxEntriesPerCollection\n  internalQueryCacheMaxSizeBytesBeforeStripDebugInfo\n  internalQueryCacheSize\n  internalQueryCacheWorksGrowthCoefficient\n  internalQueryDefaultDOP\n  internalQueryDesugarWhereToFunction\n  internalQueryDisableExchange\n  internalQueryEnableCSTParser\n  internalQueryEnableLoggingV2OplogEntries\n  internalQueryEnableSlotBasedExecutionEngine\n  internalQueryEnumerationMaxIntersectPerAnd\n  internalQueryEnumerationMaxOrSolutions\n  internalQueryEnumerationPreferLockstepOrEnumeration\n  internalQueryExecYieldIterations\n  internalQueryExecYieldPeriodMS\n  internalQueryExplainSizeThresholdBytes\n  internalQueryFacetBufferSizeBytes\n  internalQueryFacetMaxOutputDocSizeBytes\n  internalQueryForceIntersectionPlans\n  internalQueryIgnoreUnknownJSONSchemaKeywords\n  internalQueryJavaScriptFnTimeoutMillis\n  internalQueryJavaScriptHeapSizeLimitMB\n  internalQueryMaxAddToSetBytes\n  internalQueryMaxBlockingSortMemoryUsageBytes\n  internalQueryMaxDocValidationErrorConsideredValues\n  internalQueryMaxJsEmitBytes\n  internalQueryMaxPushBytes\n  internalQueryMaxRangeBytes\n  internalQueryMaxScansToExplode\n  internalQueryPlanEvaluationCollFraction\n  internalQueryPlanEvaluationMaxResults\n  internalQueryPlanEvaluationWorks\n  internalQueryPlanOrChildrenIndependently\n  internalQueryPlannerEnableHashIntersection\n  internalQueryPlannerEnableIndexIntersection\n  internalQueryPlannerGenerateCoveredWholeIndexScans\n  internalQueryPlannerMaxIndexedSolutions\n  internalQueryProhibitBlockingMergeOnMongoS\n  internalQueryProhibitMergingOnMongoS\n  internalQueryS2GeoCoarsestLevel\n  internalQueryS2GeoFinestLevel\n  internalQueryS2GeoMaxCells\n  internalQuerySlotBasedExecutionMaxStaticIndexScanIntervals\n  internalValidateFeaturesAsMaster\n  internalValidateFeaturesAsPrimary\n  javascriptProtection\n  journalCommitInterval\n  jsHeapLimitMB\n  loadRoutingTableOnStartup\n  localLogicalSessionTimeoutMinutes\n  localThresholdMs\n  logComponentVerbosity\n  logLevel\n  logicalSessionRefreshMillis\n  maxAcceptableLogicalClockDriftSecs\n  maxBSONDepth\n  maxCatchUpPercentageBeforeBlockingWrites\n  maxIndexBuildDrainBatchSize\n  maxIndexBuildDrainMemoryUsageMegabytes\n  maxIndexBuildMemoryUsageMegabytes\n  maxLogSizeKB\n  maxNumActiveUserIndexBuilds\n  maxNumSyncSourceChangesPerHour\n  maxNumberOfTransactionOperationsInSingleOplogEntry\n  maxOplogTruncationPointsAfterStartup\n  maxOplogTruncationPointsDuringStartup\n  maxSessions\n  maxSyncSourceLagSecs\n  maxTenantMigrationDonorServiceThreadPoolSize\n  maxTenantMigrationRecipientThreadPoolSize\n  maxTimeMSForHedgedReads\n  maxTransactionLockRequestTimeoutMillis\n  maxValidateMBperSec\n  maxValidateMemoryUsageMB\n  metadataRefreshInTransactionMaxWaitBehindCritSecMS\n  migrateCloneInsertionBatchDelayMS\n  migrateCloneInsertionBatchSize\n  migrationLockAcquisitionMaxWaitMS\n  minNumChunksForSessionsCollection\n  minOplogEntriesPerThread\n  minOplogTruncationPoints\n  minSnapshotHistoryWindowInSeconds\n  mirrorReads\n  mongosShutdownTimeoutMillisForSignaledShutdown\n  notablescan\n  numInitialSyncAttempts\n  numInitialSyncConnectAttempts\n  numInitialSyncOplogFindAttempts\n  ocspCacheSize\n  ocspEnabled\n  ocspStaplingRefreshPeriodSecs\n  ocspValidationRefreshPeriodSecs\n  opensslCipherConfig\n  opensslCipherSuiteConfig\n  opensslDiffieHellmanParameters\n  operationMemoryPoolBlockInitialSizeKB\n  operationMemoryPoolBlockMaxSizeKB\n  oplogApplicationEnforcesSteadyStateConstraints\n  oplogFetcherInitialSyncMaxFetcherRestarts\n  oplogFetcherSteadyStateMaxFetcherRestarts\n  oplogFetcherUsesExhaust\n  oplogInitialFindMaxSeconds\n  oplogNetworkTimeoutBufferSeconds\n  oplogRetriedFindMaxSeconds\n  oplogSamplingLogIntervalSeconds\n  oplogTruncationPointSizeMB\n  orphanCleanupDelaySecs\n  periodicNoopIntervalSecs\n  priorityTakeoverFreshnessWindowSeconds\n  processUmask\n  profileOperationResourceConsumptionMetrics\n  quiet\n  rangeDeleterBatchDelayMS\n  rangeDeleterBatchSize\n  readHedgingMode\n  receiveChunkWaitForRangeDeleterTimeoutMS\n  recoverFromOplogAsStandalone\n  recoverToOplogTimestamp\n  remainingReshardingOperationTimeThresholdMillis\n  replBatchLimitBytes\n  replBatchLimitOperations\n  replElectionTimeoutOffsetLimitFraction\n  replWriterMinThreadCount\n  replWriterThreadCount\n  replicaSetMonitorProtocol\n  reportOpWriteConcernCountersInServerStatus\n  requireApiVersion\n  reservedServiceExecutorRecursionLimit\n  reshardingCollectionClonerBatchSizeInBytes\n  reshardingCoordinatorServiceMaxThreadCount\n  reshardingCriticalSectionTimeoutMillis\n  reshardingDonorServiceMaxThreadCount\n  reshardingMinimumOperationDurationMillis\n  reshardingOplogApplierMaxLockRequestTimeoutMillis\n  reshardingOplogBatchLimitBytes\n  reshardingOplogBatchLimitOperations\n  reshardingOplogBatchTaskCount\n  reshardingRecipientServiceMaxThreadCount\n  reshardingTxnClonerProgressBatchSize\n  resumableIndexBuildMajorityOpTimeTimeoutMillis\n  rewriteStateChangeErrors\n  roleGraphInvalidationIsFatal\n  rollbackRemoteOplogQueryBatchSize\n  rollbackTimeLimitSecs\n  saslHostName\n  saslServiceName\n  saslauthdPath\n  scramIterationCount\n  scramSHA256IterationCount\n  scriptingEngineInterruptIntervalMS\n  shardedIndexConsistencyCheckIntervalMS\n  shutdownTimeoutMillisForSignaledShutdown\n  skipCorruptDocumentsWhenCloning\n  skipShardingConfigurationChecks\n  skipShellCursorFinalize\n  sslMode\n  sslWithholdClientCertificate\n  startupAuthSchemaValidation\n  startupRecoveryForRestore\n  storeFindAndModifyImagesInSideCollection\n  suppressNoTLSPeerCertificateWarning\n  syncdelay\n  synchronousServiceExecutorRecursionLimit\n  takeUnstableCheckpointOnShutdown\n  taskExecutorPoolSize\n  tcmallocAggressiveMemoryDecommit\n  tcmallocEnableMarkThreadTemporarilyIdle\n  tcmallocMaxTotalThreadCacheBytes\n  tcmallocReleaseRate\n  tcpFastOpenClient\n  tcpFastOpenQueueSize\n  tcpFastOpenServer\n  tenantApplierBatchSizeBytes\n  tenantApplierBatchSizeOps\n  tenantApplierThreadCount\n  tenantMigrationBlockingStateTimeoutMS\n  tenantMigrationDisableX509Auth\n  tenantMigrationExcludeDonorHostTimeoutMS\n  tenantMigrationExternalKeysRemovalBufferSecs\n  tenantMigrationGarbageCollectionDelayMS\n  tenantMigrationOplogBufferPeekCacheSize\n  tenantMigrationOplogFetcherBatchSize\n  testingDiagnosticsEnabled\n  testingSnapshotBehaviorInIsolation\n  timeseriesBucketMaxCount\n  timeseriesBucketMaxSize\n  timeseriesBucketsCollectionClusterById\n  timeseriesIdleBucketExpiryMemoryUsageThreshold\n  tlsCATrusts\n  tlsMode\n  tlsOCSPStaplingTimeoutSecs\n  tlsOCSPVerifyTimeoutSecs\n  tlsWithholdClientCertificate\n  tlsX509ClusterAuthDNOverride\n  tlsX509ExpirationWarningThresholdDays\n  totalUnitWriteSizeBytes\n  traceExceptions\n  traceWriteConflictExceptions\n  trafficRecordingDirectory\n  transactionLifetimeLimitSeconds\n  transactionSizeLimitBytes\n  ttlMonitorEnabled\n  ttlMonitorSleepSecs\n  useReadOnceCursorsForIndexBuilds\n  waitForSecondaryBeforeNoopWriteMS\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartup\n  warmMinConnectionsInShardingTaskExecutorPoolOnStartupWaitMS\n  watchdogPeriodSeconds\n  wiredTigerConcurrentReadTransactions\n  wiredTigerConcurrentWriteTransactions\n  wiredTigerCursorCacheSize\n  wiredTigerEngineRuntimeConfig\n  wiredTigerFileHandleCloseIdleTime\n  wiredTigerFileHandleCloseMinimum\n  wiredTigerFileHandleCloseScanInterval\n  wiredTigerMaxCacheOverflowSizeGB\n  wiredTigerSessionCloseIdleTimeSecs\n  writePeriodicNoops\n",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "setShardVersion": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "shardingState": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "shutdown": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Shuts down the database. Must be run against the admin database and either (1) run from localhost or (2) run while authenticated with the shutdown privilege. If the node is the primary of a replica set, waits up to 'timeoutSecs' for an electable node to be caught up before stepping down. If 'force' is false and no electable node was able to catch up, does not shut down. If the node is in state SECONDARY after the attempted stepdown, any remaining time in 'timeoutSecs' is used for quiesce mode, where the database continues to allow operations to run, but directs clients to route new operations to other replica set members.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "splitChunk": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "internal command usage only\nexample:\n { splitChunk:\"db.foo\" , keyPattern: {a:1} , min : {a:100} , max: {a:200} { splitKeys : [ {a:150} , ... ]}",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "splitVector": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal command.\nexamples:\n  { splitVector : \"blog.post\" , keyPattern:{x:1} , min:{x:10} , max:{x:20}, maxChunkSize:200 }\n  maxChunkSize unit in MBs\n  May optionally specify 'maxSplitPoints' and 'maxChunkObjects' to avoid traversing the whole chunk\n  \n  { splitVector : \"blog.post\" , keyPattern:{x:1} , min:{x:10} , max:{x:20}, force: true }\n  'force' will produce one split point even if data is small; defaults to false\nNOTE: This command may take a while to run",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "startRecordingTraffic": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "startSession": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "start a logical session",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "stopRecordingTraffic": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "top": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "usage by collection, in micros ",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "update": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "update documents",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [
+              "1"
+            ],
+            "deprecatedApiVersions": []
+          },
+          "updateRole": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "updateUser": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "usersInfo": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "secondaryOverrideOk",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "no help defined",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": false,
+            "secondaryOverrideOk": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "validate": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Validate contents of a namespace by scanning its data structures for correctness.\nThis is a slow operation.\n\tAdd {full: true} option to do a more thorough check.\n\tAdd {background: true} to validate in the background.\n\tAdd {repair: true} to run repair mode.\nCannot specify both {full: true, background: true}.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "validateDBMetadata": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "validateDBMetadata checks that the stored metadata of a database/collection is valid within a particular API version. If 'db' parameter is specified, only runs validation against that database, if not the validation will be run againt all dbs. Similarly if 'collection' parameter is specified, the validation is only run against that collection, if not the validation is run against all collections.",
+            "requiresAuth": true,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "voteCommitIndexBuild": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "Internal intra replica set command",
+            "requiresAuth": true,
+            "secondaryOk": false,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "waitForFailPoint": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "wait for a fail point to be entered a certain number of times",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": true,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          },
+          "whatsmyuri": {
+            "$k": [
+              "help",
+              "requiresAuth",
+              "secondaryOk",
+              "adminOnly",
+              "apiVersions",
+              "deprecatedApiVersions"
+            ],
+            "help": "{whatsmyuri:1}",
+            "requiresAuth": false,
+            "secondaryOk": true,
+            "adminOnly": false,
+            "apiVersions": [],
+            "deprecatedApiVersions": []
+          }
         },




2021-12-16T21:40:09.806Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:162	Request header:
{
  "MessageLength": 52,
  "RequestID": 21,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:40:09.807Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "$db"
        ],
        "ismaster": true,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:40:09.807Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:175	Response header:
{
  "MessageLength": 190,
  "RequestID": 11,
  "ResponseTo": 21,
  "OpCode": "OP_MSG"
}
2021-12-16T21:40:09.808Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690809807
        },
        "minWireVersion": 13,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:40:09.809Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 304,
  "RequestID": 178,
  "ResponseTo": 21,
  "OpCode": "OP_MSG"
}
2021-12-16T21:40:09.811Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "topologyVersion",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "logicalSessionTimeoutMinutes",
          "connectionId",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "topologyVersion": {
          "$k": [
            "processId",
            "counter"
          ],
          "processId": {
            "$o": "61bbb0c97437c3a34c46c94d"
          },
          "counter": {
            "$l": "0"
          }
        },
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690809809
        },
        "logicalSessionTimeoutMinutes": 30,
        "connectionId": 43,
        "minWireVersion": 0,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:40:09.814Z	INFO	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 190,
-  "RequestID": 11,
+  "MessageLength": 304,
+  "RequestID": 178,
   "ResponseTo": 21,
@@ -14,2 +14,3 @@
           "ismaster",
+          "topologyVersion",
           "maxBsonObjectSize",
@@ -18,2 +19,4 @@
           "localTime",
+          "logicalSessionTimeoutMinutes",
+          "connectionId",
           "minWireVersion",
@@ -24,2 +27,14 @@
         "ismaster": true,
+        "topologyVersion": {
+          "$k": [
+            "processId",
+            "counter"
+          ],
+          "processId": {
+            "$o": "61bbb0c97437c3a34c46c94d"
+          },
+          "counter": {
+            "$l": "0"
+          }
+        },
         "maxBsonObjectSize": 16777216,
@@ -28,5 +43,7 @@
         "localTime": {
-          "$d": 1639690809807
+          "$d": 1639690809809
         },
-        "minWireVersion": 13,
+        "logicalSessionTimeoutMinutes": 30,
+        "connectionId": 43,
+        "minWireVersion": 0,
         "maxWireVersion": 13,




2021-12-16T21:40:19.823Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:162	Request header:
{
  "MessageLength": 52,
  "RequestID": 22,
  "ResponseTo": 0,
  "OpCode": "OP_MSG"
}
2021-12-16T21:40:19.823Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:163	Request message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "$db"
        ],
        "ismaster": true,
        "$db": "admin"
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:40:19.824Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:175	Response header:
{
  "MessageLength": 190,
  "RequestID": 12,
  "ResponseTo": 22,
  "OpCode": "OP_MSG"
}
2021-12-16T21:40:19.825Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:176	Response message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690819823
        },
        "minWireVersion": 13,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:40:19.826Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:196	Proxy header:
{
  "MessageLength": 304,
  "RequestID": 179,
  "ResponseTo": 22,
  "OpCode": "OP_MSG"
}
2021-12-16T21:40:19.827Z	DEBUG	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:197	Proxy message:
{
  "Checksum": 0,
  "FlagBits": [],
  "Sections": [
    {
      "Document": {
        "$k": [
          "ismaster",
          "topologyVersion",
          "maxBsonObjectSize",
          "maxMessageSizeBytes",
          "maxWriteBatchSize",
          "localTime",
          "logicalSessionTimeoutMinutes",
          "connectionId",
          "minWireVersion",
          "maxWireVersion",
          "readOnly",
          "ok"
        ],
        "ismaster": true,
        "topologyVersion": {
          "$k": [
            "processId",
            "counter"
          ],
          "processId": {
            "$o": "61bbb0c97437c3a34c46c94d"
          },
          "counter": {
            "$l": "0"
          }
        },
        "maxBsonObjectSize": 16777216,
        "maxMessageSizeBytes": 48000000,
        "maxWriteBatchSize": 100000,
        "localTime": {
          "$d": 1639690819825
        },
        "logicalSessionTimeoutMinutes": 30,
        "connectionId": 43,
        "minWireVersion": 0,
        "maxWireVersion": 13,
        "readOnly": false,
        "ok": {
          "$f": 1
        }
      },
      "Kind": 0
    }
  ]
}



2021-12-16T21:40:19.831Z	INFO	// 172.20.0.3:43484 -> 172.17.0.1:27017 	clientconn/conn.go:218	Diff:
--- res
+++ proxy
@@ -1,4 +1,4 @@
 {
-  "MessageLength": 190,
-  "RequestID": 12,
+  "MessageLength": 304,
+  "RequestID": 179,
   "ResponseTo": 22,
@@ -14,2 +14,3 @@
           "ismaster",
+          "topologyVersion",
           "maxBsonObjectSize",
@@ -18,2 +19,4 @@
           "localTime",
+          "logicalSessionTimeoutMinutes",
+          "connectionId",
           "minWireVersion",
@@ -24,2 +27,14 @@
         "ismaster": true,
+        "topologyVersion": {
+          "$k": [
+            "processId",
+            "counter"
+          ],
+          "processId": {
+            "$o": "61bbb0c97437c3a34c46c94d"
+          },
+          "counter": {
+            "$l": "0"
+          }
+        },
         "maxBsonObjectSize": 16777216,
@@ -28,5 +43,7 @@
         "localTime": {
-          "$d": 1639690819823
+          "$d": 1639690819825
         },
-        "minWireVersion": 13,
+        "logicalSessionTimeoutMinutes": 30,
+        "connectionId": 43,
+        "minWireVersion": 0,
         "maxWireVersion": 13,





