// Code generated by "genwrap -debug -schemas=documentdb_api,documentdb_api_catalog,documentdb_api_internal,documentdb_core"; DO NOT EDIT.

package documentdb_api_internal

import (
	"context"
	"log/slog"
	"time"

	"github.com/FerretDB/wire/wirebson"
	"github.com/jackc/pgx/v5"
	"go.opentelemetry.io/otel"
	oteltrace "go.opentelemetry.io/otel/trace"

	"github.com/FerretDB/FerretDB/v2/internal/mongoerrors"
)

// AggregationSupport is a wrapper for
//
//	[Comment] documentdb_api_internal.aggregation_support_18883.
func AggregationSupport(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.aggregation_support", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.aggregation_support([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.aggregation_support", l)
	}
	return
}

// AuthenticateWithScramSha256 is a wrapper for
//
//	[Comment] documentdb_api_internal.authenticate_with_scram_sha256_19164.
func AuthenticateWithScramSha256(ctx context.Context, conn *pgx.Conn, l *slog.Logger, userName string, authMsg string, clientProof string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.authenticate_with_scram_sha256", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.authenticate_with_scram_sha256([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.authenticate_with_scram_sha256", l)
	}
	return
}

// BsonAddToSet is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_add_to_set_18989.
func BsonAddToSet(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_add_to_set", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_add_to_set([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_add_to_set", l)
	}
	return
}

// BsonAddToSetFinal is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_add_to_set_final_18946.
func BsonAddToSetFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_add_to_set_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_add_to_set_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_add_to_set_final", l)
	}
	return
}

// BsonAddToSetTransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_add_to_set_transition_18945.
func BsonAddToSetTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_add_to_set_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_add_to_set_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_add_to_set_transition", l)
	}
	return
}

// BsonArrayAggMinvtransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_array_agg_minvtransition_18889.
func BsonArrayAggMinvtransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ string, _ bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_array_agg_minvtransition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_array_agg_minvtransition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_array_agg_minvtransition", l)
	}
	return
}

// BsonConstFill is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_const_fill_18908.
func BsonConstFill(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_const_fill", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_const_fill([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_const_fill", l)
	}
	return
}

// BsonCovariancePopFinal is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_covariance_pop_final_18893.
func BsonCovariancePopFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_covariance_pop_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_covariance_pop_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_covariance_pop_final", l)
	}
	return
}

// BsonCovariancePopSampCombine is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_covariance_pop_samp_combine_18891.
func BsonCovariancePopSampCombine(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_covariance_pop_samp_combine", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_covariance_pop_samp_combine([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_covariance_pop_samp_combine", l)
	}
	return
}

// BsonCovariancePopSampInvtransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_covariance_pop_samp_invtransition_18892.
func BsonCovariancePopSampInvtransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_covariance_pop_samp_invtransition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_covariance_pop_samp_invtransition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_covariance_pop_samp_invtransition", l)
	}
	return
}

// BsonCovariancePopSampTransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_covariance_pop_samp_transition_18890.
func BsonCovariancePopSampTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_covariance_pop_samp_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_covariance_pop_samp_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_covariance_pop_samp_transition", l)
	}
	return
}

// BsonCovarianceSampFinal is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_covariance_samp_final_18894.
func BsonCovarianceSampFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_covariance_samp_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_covariance_samp_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_covariance_samp_final", l)
	}
	return
}

// BsonDenseRank is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dense_rank_18896.
func BsonDenseRank(ctx context.Context, conn *pgx.Conn, l *slog.Logger) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dense_rank", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dense_rank([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dense_rank", l)
	}
	return
}

// BsonDensifyFull is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_densify_full_19022.
func BsonDensifyFull(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_densify_full", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_densify_full([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_densify_full", l)
	}
	return
}

// BsonDensifyPartition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_densify_partition_19021.
func BsonDensifyPartition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_densify_partition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_densify_partition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_densify_partition", l)
	}
	return
}

// BsonDensifyRange is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_densify_range_19020.
func BsonDensifyRange(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_densify_range", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_densify_range([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_densify_range", l)
	}
	return
}

// BsonDerivativeTransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_derivative_transition_18902.
func BsonDerivativeTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ wirebson.RawDocument, _ int64) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_derivative_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_derivative_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_derivative_transition", l)
	}
	return
}

// BsonDistinctArrayAggFinal is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_distinct_array_agg_final_19017.
func BsonDistinctArrayAggFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_distinct_array_agg_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_distinct_array_agg_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_distinct_array_agg_final", l)
	}
	return
}

// BsonDistinctArrayAggTransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_distinct_array_agg_transition_19016.
func BsonDistinctArrayAggTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_distinct_array_agg_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_distinct_array_agg_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_distinct_array_agg_transition", l)
	}
	return
}

// BsonDocumentAddScoreField is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_document_add_score_field_19130.
func BsonDocumentAddScoreField(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ float64) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_document_add_score_field", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_document_add_score_field([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_document_add_score_field", l)
	}
	return
}

// BsonDocumentNumber is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_document_number_18900.
func BsonDocumentNumber(ctx context.Context, conn *pgx.Conn, l *slog.Logger) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_document_number", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_document_number([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_document_number", l)
	}
	return
}

// BsonDollarAddFields is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_add_fields_18593.
func BsonDollarAddFields(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, pathSpec wirebson.RawDocument, letVariableSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_add_fields", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_add_fields([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_add_fields", l)
	}
	return
}

// BsonDollarExpr is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_expr_18579.
func BsonDollarExpr(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_expr", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_expr([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_expr", l)
	}
	return
}

// BsonDollarExtractMergeFilter is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_extract_merge_filter_19030.
func BsonDollarExtractMergeFilter(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_extract_merge_filter", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_extract_merge_filter([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_extract_merge_filter", l)
	}
	return
}

// BsonDollarInverseMatch is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_inverse_match_19023.
func BsonDollarInverseMatch(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, spec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_inverse_match", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_inverse_match([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_inverse_match", l)
	}
	return
}

// BsonDollarLookupExpressionEvalMerge is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_lookup_expression_eval_merge_18601.
func BsonDollarLookupExpressionEvalMerge(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, pathSpec wirebson.RawDocument, variableSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_lookup_expression_eval_merge", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_lookup_expression_eval_merge([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_lookup_expression_eval_merge", l)
	}
	return
}

// BsonDollarLookupExtractFilterArray is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_lookup_extract_filter_array_19012.
func BsonDollarLookupExtractFilterArray(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_lookup_extract_filter_array", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_lookup_extract_filter_array([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_lookup_extract_filter_array", l)
	}
	return
}

// BsonDollarLookupExtractFilterExpression is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_lookup_extract_filter_expression_19010.
func BsonDollarLookupExtractFilterExpression(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_lookup_extract_filter_expression", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_lookup_extract_filter_expression([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_lookup_extract_filter_expression", l)
	}
	return
}

// BsonDollarLookupFilterSupport is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_lookup_filter_support_19013.
func BsonDollarLookupFilterSupport(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_lookup_filter_support", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_lookup_filter_support([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_lookup_filter_support", l)
	}
	return
}

// BsonDollarLookupJoinFilter is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_lookup_join_filter_19014.
func BsonDollarLookupJoinFilter(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument, _ string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_lookup_join_filter", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_lookup_join_filter([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_lookup_join_filter", l)
	}
	return
}

// BsonDollarLookupProject is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_lookup_project_19015.
func BsonDollarLookupProject(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}, _ string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_lookup_project", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_lookup_project([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_lookup_project", l)
	}
	return
}

// BsonDollarMergeAddObjectId is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_merge_add_object_id_19027.
func BsonDollarMergeAddObjectId(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_merge_add_object_id", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_merge_add_object_id([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_merge_add_object_id", l)
	}
	return
}

// BsonDollarMergeDocuments is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_merge_documents_18599.
func BsonDollarMergeDocuments(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, pathSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_merge_documents", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_merge_documents([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_merge_documents", l)
	}
	return
}

// BsonDollarMergeDocumentsAtPath is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_merge_documents_at_path_18600.
func BsonDollarMergeDocumentsAtPath(ctx context.Context, conn *pgx.Conn, l *slog.Logger, leftdocument wirebson.RawDocument, rightdocument wirebson.RawDocument, fieldpath string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_merge_documents_at_path", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_merge_documents_at_path([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_merge_documents_at_path", l)
	}
	return
}

// BsonDollarMergeFailWhenNotMatched is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_merge_fail_when_not_matched_19028.
func BsonDollarMergeFailWhenNotMatched(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_merge_fail_when_not_matched", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_merge_fail_when_not_matched([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_merge_fail_when_not_matched", l)
	}
	return
}

// BsonDollarMergeFilterSupport is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_merge_filter_support_19025.
func BsonDollarMergeFilterSupport(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_merge_filter_support", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_merge_filter_support([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_merge_filter_support", l)
	}
	return
}

// BsonDollarMergeGenerateObjectId is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_merge_generate_object_id_19029.
func BsonDollarMergeGenerateObjectId(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_merge_generate_object_id", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_merge_generate_object_id([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_merge_generate_object_id", l)
	}
	return
}

// BsonDollarMergeHandleWhenMatched is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_merge_handle_when_matched_19024.
func BsonDollarMergeHandleWhenMatched(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_merge_handle_when_matched", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_merge_handle_when_matched([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_merge_handle_when_matched", l)
	}
	return
}

// BsonDollarMergeJoin is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_merge_join_19026.
func BsonDollarMergeJoin(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument, _ string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_merge_join", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_merge_join([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_merge_join", l)
	}
	return
}

// BsonDollarNotGt is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_not_gt_18610.
func BsonDollarNotGt(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_not_gt", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_not_gt([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_not_gt", l)
	}
	return
}

// BsonDollarNotGte is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_not_gte_18611.
func BsonDollarNotGte(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_not_gte", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_not_gte([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_not_gte", l)
	}
	return
}

// BsonDollarNotLt is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_not_lt_18612.
func BsonDollarNotLt(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_not_lt", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_not_lt([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_not_lt", l)
	}
	return
}

// BsonDollarNotLte is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_not_lte_18613.
func BsonDollarNotLte(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_not_lte", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_not_lte([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_not_lte", l)
	}
	return
}

// BsonDollarProject is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_project_18589.
func BsonDollarProject(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, pathSpec wirebson.RawDocument, variableSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_project", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_project([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_project", l)
	}
	return
}

// BsonDollarProjectFind is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_project_find_18591.
func BsonDollarProjectFind(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, pathSpec wirebson.RawDocument, querySpec wirebson.RawDocument, letVariableSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_project_find", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_project_find([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_project_find", l)
	}
	return
}

// BsonDollarRange is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_range_18562.
func BsonDollarRange(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_range", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_range([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_range", l)
	}
	return
}

// BsonDollarRedact is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_redact_19033.
func BsonDollarRedact(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument, _ string, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_redact", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_redact([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_redact", l)
	}
	return
}

// BsonDollarReplaceRoot is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_replace_root_18597.
func BsonDollarReplaceRoot(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, pathSpec wirebson.RawDocument, variableSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_replace_root", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_replace_root([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_replace_root", l)
	}
	return
}

// BsonDollarSelectivity is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_selectivity_18609.
func BsonDollarSelectivity(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_selectivity", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_selectivity([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_selectivity", l)
	}
	return
}

// BsonDollarText is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_dollar_text_18584.
func BsonDollarText(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_dollar_text", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_dollar_text([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_dollar_text", l)
	}
	return
}

// BsonExpMovingAvg is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_exp_moving_avg_18897.
func BsonExpMovingAvg(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument, _ bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_exp_moving_avg", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_exp_moving_avg([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_exp_moving_avg", l)
	}
	return
}

// BsonExpressionGet is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_expression_get_18603.
func BsonExpressionGet(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, expressionSpec wirebson.RawDocument, isnullonempty bool, variableSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_expression_get", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_expression_get([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_expression_get", l)
	}
	return
}

// BsonExpressionMap is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_expression_map_18605.
func BsonExpressionMap(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, sourcearrayname string, expressionSpec wirebson.RawDocument, isnullonempty bool, variableSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_expression_map", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_expression_map([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_expression_map", l)
	}
	return
}

// BsonExpressionPartitionByFieldsGet is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_expression_partition_by_fields_get_18608.
func BsonExpressionPartitionByFieldsGet(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, expressionSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_expression_partition_by_fields_get", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_expression_partition_by_fields_get([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_expression_partition_by_fields_get", l)
	}
	return
}

// BsonExpressionPartitionGet is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_expression_partition_get_18606.
func BsonExpressionPartitionGet(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, expressionSpec wirebson.RawDocument, isnullonempty bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_expression_partition_get", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_expression_partition_get([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_expression_partition_get", l)
	}
	return
}

// BsonExpressionPartitionGet18607 is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_expression_partition_get_18607.
func BsonExpressionPartitionGet18607(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, expressionSpec wirebson.RawDocument, isnullonempty bool, variableSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_expression_partition_get", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_expression_partition_get([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_expression_partition_get", l)
	}
	return
}

// BsonExtractVector is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_extract_vector_19128.
func BsonExtractVector(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, path string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_extract_vector", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_extract_vector([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_extract_vector", l)
	}
	return
}

// BsonFirstTransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_first_transition_18954.
func BsonFirstTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_first_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_first_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_first_transition", l)
	}
	return
}

// BsonFirstTransitionOnSorted is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_first_transition_on_sorted_18962.
func BsonFirstTransitionOnSorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_first_transition_on_sorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_first_transition_on_sorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_first_transition_on_sorted", l)
	}
	return
}

// BsonFirstnTransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_firstn_transition_18956.
func BsonFirstnTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ int64, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_firstn_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_firstn_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_firstn_transition", l)
	}
	return
}

// BsonFirstnTransitionOnSorted is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_firstn_transition_on_sorted_18964.
func BsonFirstnTransitionOnSorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ int64, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_firstn_transition_on_sorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_firstn_transition_on_sorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_firstn_transition_on_sorted", l)
	}
	return
}

// BsonGeonearWithinRange is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_geonear_within_range_18668.
func BsonGeonearWithinRange(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_geonear_within_range", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_geonear_within_range([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_geonear_within_range", l)
	}
	return
}

// BsonIntegralDerivativeFinal is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_integral_derivative_final_18904.
func BsonIntegralDerivativeFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_integral_derivative_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_integral_derivative_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_integral_derivative_final", l)
	}
	return
}

// BsonIntegralTransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_integral_transition_18903.
func BsonIntegralTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ wirebson.RawDocument, _ int64) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_integral_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_integral_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_integral_transition", l)
	}
	return
}

// BsonLastTransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_last_transition_18955.
func BsonLastTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_last_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_last_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_last_transition", l)
	}
	return
}

// BsonLastTransitionOnSorted is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_last_transition_on_sorted_18963.
func BsonLastTransitionOnSorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_last_transition_on_sorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_last_transition_on_sorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_last_transition_on_sorted", l)
	}
	return
}

// BsonLastnTransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_lastn_transition_18957.
func BsonLastnTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ int64, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_lastn_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_lastn_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_lastn_transition", l)
	}
	return
}

// BsonLastnTransitionOnSorted is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_lastn_transition_on_sorted_18965.
func BsonLastnTransitionOnSorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ int64, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_lastn_transition_on_sorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_lastn_transition_on_sorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_lastn_transition_on_sorted", l)
	}
	return
}

// BsonLinearFill is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_linear_fill_18898.
func BsonLinearFill(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_linear_fill", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_linear_fill([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_linear_fill", l)
	}
	return
}

// BsonLocfFill is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_locf_fill_18899.
func BsonLocfFill(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_locf_fill", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_locf_fill([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_locf_fill", l)
	}
	return
}

// BsonMaxminnCombine is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_maxminn_combine_18961.
func BsonMaxminnCombine(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_maxminn_combine", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_maxminn_combine([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_maxminn_combine", l)
	}
	return
}

// BsonMaxminnFinal is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_maxminn_final_18960.
func BsonMaxminnFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_maxminn_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_maxminn_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_maxminn_final", l)
	}
	return
}

// BsonMaxnTransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_maxn_transition_18958.
func BsonMaxnTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_maxn_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_maxn_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_maxn_transition", l)
	}
	return
}

// BsonMergeObjects is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_merge_objects_18991.
func BsonMergeObjects(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ int64, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_merge_objects", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_merge_objects([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_merge_objects", l)
	}
	return
}

// BsonMergeObjectsFinal is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_merge_objects_final_18949.
func BsonMergeObjectsFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_merge_objects_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_merge_objects_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_merge_objects_final", l)
	}
	return
}

// BsonMergeObjectsOnSorted is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_merge_objects_on_sorted_18990.
func BsonMergeObjectsOnSorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_merge_objects_on_sorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_merge_objects_on_sorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_merge_objects_on_sorted", l)
	}
	return
}

// BsonMergeObjectsTransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_merge_objects_transition_18948.
func BsonMergeObjectsTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ int64, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_merge_objects_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_merge_objects_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_merge_objects_transition", l)
	}
	return
}

// BsonMergeObjectsTransitionOnSorted is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_merge_objects_transition_on_sorted_18947.
func BsonMergeObjectsTransitionOnSorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_merge_objects_transition_on_sorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_merge_objects_transition_on_sorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_merge_objects_transition_on_sorted", l)
	}
	return
}

// BsonMinnTransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_minn_transition_18959.
func BsonMinnTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_minn_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_minn_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_minn_transition", l)
	}
	return
}

// BsonOrderbyPartition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_orderby_partition_18583.
func BsonOrderbyPartition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument, _ bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_orderby_partition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_orderby_partition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_orderby_partition", l)
	}
	return
}

// BsonQueryToTsquery is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_query_to_tsquery_18587.
func BsonQueryToTsquery(ctx context.Context, conn *pgx.Conn, l *slog.Logger, query wirebson.RawDocument, textsearch string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_query_to_tsquery", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_query_to_tsquery([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_query_to_tsquery", l)
	}
	return
}

// BsonRank is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_rank_18895.
func BsonRank(ctx context.Context, conn *pgx.Conn, l *slog.Logger) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_rank", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_rank([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_rank", l)
	}
	return
}

// BsonSearchParam is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_search_param_19129.
func BsonSearchParam(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_search_param", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_search_param([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_search_param", l)
	}
	return
}

// BsonShift is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_shift_18901.
func BsonShift(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_shift", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_shift([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_shift", l)
	}
	return
}

// BsonStdDevPopFinal is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_std_dev_pop_final_18952.
func BsonStdDevPopFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_std_dev_pop_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_std_dev_pop_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_std_dev_pop_final", l)
	}
	return
}

// BsonStdDevPopSampCombine is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_std_dev_pop_samp_combine_18951.
func BsonStdDevPopSampCombine(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_std_dev_pop_samp_combine", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_std_dev_pop_samp_combine([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_std_dev_pop_samp_combine", l)
	}
	return
}

// BsonStdDevPopSampTransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_std_dev_pop_samp_transition_18950.
func BsonStdDevPopSampTransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_std_dev_pop_samp_transition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_std_dev_pop_samp_transition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_std_dev_pop_samp_transition", l)
	}
	return
}

// BsonStdDevPopSampWinfuncInvtransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_std_dev_pop_samp_winfunc_invtransition_18905.
func BsonStdDevPopSampWinfuncInvtransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_std_dev_pop_samp_winfunc_invtransition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_std_dev_pop_samp_winfunc_invtransition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_std_dev_pop_samp_winfunc_invtransition", l)
	}
	return
}

// BsonStdDevPopWinfuncFinal is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_std_dev_pop_winfunc_final_18906.
func BsonStdDevPopWinfuncFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_std_dev_pop_winfunc_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_std_dev_pop_winfunc_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_std_dev_pop_winfunc_final", l)
	}
	return
}

// BsonStdDevSampFinal is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_std_dev_samp_final_18953.
func BsonStdDevSampFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_std_dev_samp_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_std_dev_samp_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_std_dev_samp_final", l)
	}
	return
}

// BsonStdDevSampWinfuncFinal is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_std_dev_samp_winfunc_final_18907.
func BsonStdDevSampWinfuncFinal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_std_dev_samp_winfunc_final", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_std_dev_samp_winfunc_final([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_std_dev_samp_winfunc_final", l)
	}
	return
}

// BsonSumAvgMinvtransition is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_sum_avg_minvtransition_18888.
func BsonSumAvgMinvtransition(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_sum_avg_minvtransition", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_sum_avg_minvtransition([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_sum_avg_minvtransition", l)
	}
	return
}

// BsonTextMetaQual is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_text_meta_qual_18586.
func BsonTextMetaQual(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}, _ struct{}, _ bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_text_meta_qual", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_text_meta_qual([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_text_meta_qual", l)
	}
	return
}

// BsonTextTsquery is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_text_tsquery_18585.
func BsonTextTsquery(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_text_tsquery", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_text_tsquery([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_text_tsquery", l)
	}
	return
}

// BsonUniqueExclusionIndexEqual is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_unique_exclusion_index_equal_18722.
func BsonUniqueExclusionIndexEqual(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_unique_exclusion_index_equal", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_unique_exclusion_index_equal([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_unique_exclusion_index_equal", l)
	}
	return
}

// BsonUniqueIndexEqual is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_unique_index_equal_18734.
func BsonUniqueIndexEqual(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_unique_index_equal", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_unique_index_equal([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_unique_index_equal", l)
	}
	return
}

// BsonUniqueShardPathEqual is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_unique_shard_path_equal_18729.
func BsonUniqueShardPathEqual(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_unique_shard_path_equal", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_unique_shard_path_equal([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_unique_shard_path_equal", l)
	}
	return
}

// BsonUpdateDocument is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_update_document_19102.
func BsonUpdateDocument(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, updateSpec wirebson.RawDocument, querySpec wirebson.RawDocument, arrayfilters wirebson.RawDocument, buildupdatedesc bool, newdocument wirebson.RawDocument, updatedesc wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_update_document", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_update_document([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_update_document", l)
	}
	return
}

// BsonUpdateReturnedValue is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_update_returned_value_19106.
func BsonUpdateReturnedValue(ctx context.Context, conn *pgx.Conn, l *slog.Logger, shardKeyId int64) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_update_returned_value", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_update_returned_value([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_update_returned_value", l)
	}
	return
}

// BsonValueDollarAll is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_all_18626.
func BsonValueDollarAll(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_all", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_all([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_all", l)
	}
	return
}

// BsonValueDollarBitsAllClear is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_bits_all_clear_18629.
func BsonValueDollarBitsAllClear(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_bits_all_clear", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_bits_all_clear([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_bits_all_clear", l)
	}
	return
}

// BsonValueDollarBitsAllSet is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_bits_all_set_18631.
func BsonValueDollarBitsAllSet(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_bits_all_set", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_bits_all_set([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_bits_all_set", l)
	}
	return
}

// BsonValueDollarBitsAnyClear is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_bits_any_clear_18630.
func BsonValueDollarBitsAnyClear(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_bits_any_clear", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_bits_any_clear([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_bits_any_clear", l)
	}
	return
}

// BsonValueDollarBitsAnySet is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_bits_any_set_18632.
func BsonValueDollarBitsAnySet(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_bits_any_set", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_bits_any_set([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_bits_any_set", l)
	}
	return
}

// BsonValueDollarElemmatch is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_elemmatch_18625.
func BsonValueDollarElemmatch(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_elemmatch", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_elemmatch([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_elemmatch", l)
	}
	return
}

// BsonValueDollarEq is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_eq_18614.
func BsonValueDollarEq(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_eq", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_eq([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_eq", l)
	}
	return
}

// BsonValueDollarExists is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_exists_18624.
func BsonValueDollarExists(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_exists", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_exists([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_exists", l)
	}
	return
}

// BsonValueDollarGt is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_gt_18615.
func BsonValueDollarGt(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_gt", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_gt([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_gt", l)
	}
	return
}

// BsonValueDollarGte is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_gte_18616.
func BsonValueDollarGte(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_gte", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_gte([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_gte", l)
	}
	return
}

// BsonValueDollarIn is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_in_18621.
func BsonValueDollarIn(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_in", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_in([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_in", l)
	}
	return
}

// BsonValueDollarLt is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_lt_18617.
func BsonValueDollarLt(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_lt", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_lt([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_lt", l)
	}
	return
}

// BsonValueDollarLte is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_lte_18618.
func BsonValueDollarLte(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_lte", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_lte([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_lte", l)
	}
	return
}

// BsonValueDollarMod is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_mod_18628.
func BsonValueDollarMod(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_mod", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_mod([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_mod", l)
	}
	return
}

// BsonValueDollarNe is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_ne_18623.
func BsonValueDollarNe(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_ne", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_ne([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_ne", l)
	}
	return
}

// BsonValueDollarNin is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_nin_18622.
func BsonValueDollarNin(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_nin", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_nin([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_nin", l)
	}
	return
}

// BsonValueDollarRegex is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_regex_18627.
func BsonValueDollarRegex(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_regex", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_regex([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_regex", l)
	}
	return
}

// BsonValueDollarSize is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_size_18619.
func BsonValueDollarSize(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_size", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_size([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_size", l)
	}
	return
}

// BsonValueDollarType is a wrapper for
//
//	[Comment] documentdb_api_internal.bson_value_dollar_type_18620.
func BsonValueDollarType(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bson_value_dollar_type", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bson_value_dollar_type([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bson_value_dollar_type", l)
	}
	return
}

// Bsoncovariancepop is a wrapper for
//
//	[Comment] documentdb_api_internal.bsoncovariancepop_18909.
func Bsoncovariancepop(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsoncovariancepop", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsoncovariancepop([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsoncovariancepop", l)
	}
	return
}

// Bsoncovariancesamp is a wrapper for
//
//	[Comment] documentdb_api_internal.bsoncovariancesamp_18910.
func Bsoncovariancesamp(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsoncovariancesamp", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsoncovariancesamp([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsoncovariancesamp", l)
	}
	return
}

// Bsonderivative is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonderivative_18911.
func Bsonderivative(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument, _ int64) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonderivative", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonderivative([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonderivative", l)
	}
	return
}

// Bsonfirst is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonfirst_18994.
func Bsonfirst(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonfirst", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonfirst([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonfirst", l)
	}
	return
}

// Bsonfirstn is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonfirstn_18996.
func Bsonfirstn(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ int64, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonfirstn", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonfirstn([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonfirstn", l)
	}
	return
}

// Bsonfirstnonsorted is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonfirstnonsorted_19002.
func Bsonfirstnonsorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ int64, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonfirstnonsorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonfirstnonsorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonfirstnonsorted", l)
	}
	return
}

// Bsonfirstonsorted is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonfirstonsorted_19000.
func Bsonfirstonsorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonfirstonsorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonfirstonsorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonfirstonsorted", l)
	}
	return
}

// Bsonintegral is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonintegral_18912.
func Bsonintegral(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument, _ int64) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonintegral", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonintegral([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonintegral", l)
	}
	return
}

// Bsonlast is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonlast_18995.
func Bsonlast(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonlast", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonlast([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonlast", l)
	}
	return
}

// Bsonlastn is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonlastn_18997.
func Bsonlastn(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ int64, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonlastn", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonlastn([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonlastn", l)
	}
	return
}

// Bsonlastnonsorted is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonlastnonsorted_19003.
func Bsonlastnonsorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ int64, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonlastnonsorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonlastnonsorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonlastnonsorted", l)
	}
	return
}

// Bsonlastonsorted is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonlastonsorted_19001.
func Bsonlastonsorted(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonlastonsorted", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonlastonsorted([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonlastonsorted", l)
	}
	return
}

// Bsonmaxn is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonmaxn_18998.
func Bsonmaxn(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonmaxn", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonmaxn([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonmaxn", l)
	}
	return
}

// Bsonmedian is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonmedian_19005.
func Bsonmedian(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonmedian", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonmedian([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonmedian", l)
	}
	return
}

// Bsonminn is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonminn_18999.
func Bsonminn(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonminn", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonminn([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonminn", l)
	}
	return
}

// Bsonpercentile is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonpercentile_19004.
func Bsonpercentile(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonpercentile", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonpercentile([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonpercentile", l)
	}
	return
}

// Bsonstddevpop is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonstddevpop_18992.
func Bsonstddevpop(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonstddevpop", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonstddevpop([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonstddevpop", l)
	}
	return
}

// Bsonstddevsamp is a wrapper for
//
//	[Comment] documentdb_api_internal.bsonstddevsamp_18993.
func Bsonstddevsamp(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.bsonstddevsamp", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.bsonstddevsamp([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.bsonstddevsamp", l)
	}
	return
}

// BuildIndexConcurrently is a wrapper for
//
//	[Comment] documentdb_api_internal.build_index_concurrently_19091.
func BuildIndexConcurrently(ctx context.Context, conn *pgx.Conn, l *slog.Logger, jobIndex struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.build_index_concurrently", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "CALL documentdb_api_internal.build_index_concurrently([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.build_index_concurrently", l)
	}
	return
}

// CheckBuildIndexStatus is a wrapper for
//
//	[Comment] documentdb_api_internal.check_build_index_status_19092.
func CheckBuildIndexStatus(ctx context.Context, conn *pgx.Conn, l *slog.Logger, arg wirebson.RawDocument, retValue wirebson.RawDocument, ok bool, complete bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.check_build_index_status", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.check_build_index_status([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.check_build_index_status", l)
	}
	return
}

// CheckBuildIndexStatusInternal is a wrapper for
//
//	[Comment] documentdb_api_internal.check_build_index_status_internal_19094.
func CheckBuildIndexStatusInternal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, arg wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.check_build_index_status_internal", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.check_build_index_status_internal([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.check_build_index_status_internal", l)
	}
	return
}

// CollStatsAggregation is a wrapper for
//
//	[Comment] documentdb_api_internal.coll_stats_aggregation_19135.
func CollStatsAggregation(ctx context.Context, conn *pgx.Conn, l *slog.Logger, databaseName string, collectionName string, collstatsSpec wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.coll_stats_aggregation", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.coll_stats_aggregation([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.coll_stats_aggregation", l)
	}
	return
}

// CollStatsWorker is a wrapper for
//
//	[Comment] documentdb_api_internal.coll_stats_worker_19134.
func CollStatsWorker(ctx context.Context, conn *pgx.Conn, l *slog.Logger, databaseName string, collectionName string, scale float64) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.coll_stats_worker", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.coll_stats_worker([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.coll_stats_worker", l)
	}
	return
}

// CollectionUpdateTrigger is a wrapper for
//
//	[Comment] documentdb_api_internal.collection_update_trigger_19036.
func CollectionUpdateTrigger(ctx context.Context, conn *pgx.Conn, l *slog.Logger) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.collection_update_trigger", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.collection_update_trigger([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.collection_update_trigger", l)
	}
	return
}

// CommandFeatureCounterStats is a wrapper for
//
//	[Comment] documentdb_api_internal.command_feature_counter_stats_19125.
func CommandFeatureCounterStats(ctx context.Context, conn *pgx.Conn, l *slog.Logger, resetStatsAfterRead bool, featureName string, usageCount struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.command_feature_counter_stats", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.command_feature_counter_stats([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.command_feature_counter_stats", l)
	}
	return
}

// CreateBuiltinIdIndex is a wrapper for
//
//	[Comment] documentdb_api_internal.create_builtin_id_index_19086.
func CreateBuiltinIdIndex(ctx context.Context, conn *pgx.Conn, l *slog.Logger, collectionId int64, registerIdIndex bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.create_builtin_id_index", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.create_builtin_id_index([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.create_builtin_id_index", l)
	}
	return
}

// CreateIndexesBackgroundInternal is a wrapper for
//
//	[Comment] documentdb_api_internal.create_indexes_background_internal_19095.
func CreateIndexesBackgroundInternal(ctx context.Context, conn *pgx.Conn, l *slog.Logger, databaseName string, arg wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.create_indexes_background_internal", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.create_indexes_background_internal([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.create_indexes_background_internal", l)
	}
	return
}

// CreateIndexesNonConcurrently is a wrapper for
//
//	[Comment] documentdb_api_internal.create_indexes_non_concurrently_19085.
func CreateIndexesNonConcurrently(ctx context.Context, conn *pgx.Conn, l *slog.Logger, databaseName string, arg wirebson.RawDocument, skipCheckCollectionCreate bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.create_indexes_non_concurrently", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.create_indexes_non_concurrently([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.create_indexes_non_concurrently", l)
	}
	return
}

// CurrentCursorState is a wrapper for
//
//	[Comment] documentdb_api_internal.current_cursor_state_19118.
func CurrentCursorState(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.current_cursor_state", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.current_cursor_state([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.current_cursor_state", l)
	}
	return
}

// CursorState is a wrapper for
//
//	[Comment] documentdb_api_internal.cursor_state_19119.
func CursorState(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.cursor_state", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.cursor_state([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.cursor_state", l)
	}
	return
}

// DbStatsWorker is a wrapper for
//
//	[Comment] documentdb_api_internal.db_stats_worker_19137.
func DbStatsWorker(ctx context.Context, conn *pgx.Conn, l *slog.Logger, collectionIds struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.db_stats_worker", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.db_stats_worker([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.db_stats_worker", l)
	}
	return
}

// DeleteExpiredRows is a wrapper for
//
//	[Comment] documentdb_api_internal.delete_expired_rows_19127.
func DeleteExpiredRows(ctx context.Context, conn *pgx.Conn, l *slog.Logger, batchSize struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.delete_expired_rows", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "CALL documentdb_api_internal.delete_expired_rows([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.delete_expired_rows", l)
	}
	return
}

// DeleteExpiredRowsForIndex is a wrapper for
//
//	[Comment] documentdb_api_internal.delete_expired_rows_for_index_19126.
func DeleteExpiredRowsForIndex(ctx context.Context, conn *pgx.Conn, l *slog.Logger, collectionId int64, indexId int64, indexKey wirebson.RawDocument, indexPfe wirebson.RawDocument, currentDatetime int64, indexExpiry struct{}, ttlBatchSize struct{}, shardId int64) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.delete_expired_rows_for_index", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.delete_expired_rows_for_index([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.delete_expired_rows_for_index", l)
	}
	return
}

// DeleteOne is a wrapper for
//
//	[Comment] documentdb_api_internal.delete_one_19108.
func DeleteOne(ctx context.Context, conn *pgx.Conn, l *slog.Logger, collectionId int64, shardKeyValue int64, query wirebson.RawDocument, sort wirebson.RawDocument, returnDocument bool, returnFields wirebson.RawDocument, transactionId string, oIsRowDeleted bool, oResultDeletedDocument wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.delete_one", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.delete_one([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.delete_one", l)
	}
	return
}

// DeleteWorker is a wrapper for
//
//	[Comment] documentdb_api_internal.delete_worker_19109.
func DeleteWorker(ctx context.Context, conn *pgx.Conn, l *slog.Logger, collectionId int64, shardKeyValue int64, shardOid struct{}, updateInternalSpec wirebson.RawDocument, updateInternalDocs []byte, transactionId string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.delete_worker", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.delete_worker([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.delete_worker", l)
	}
	return
}

// DocumentdbCoreBsonToBson is a wrapper for
//
//	[Comment] documentdb_api_internal.documentdb_core_bson_to_bson_19019.
func DocumentdbCoreBsonToBson(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.documentdb_core_bson_to_bson", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.documentdb_core_bson_to_bson([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.documentdb_core_bson_to_bson", l)
	}
	return
}

// DocumentdbGetNextCollectionId is a wrapper for
//
//	[Comment] documentdb_api_internal.documentdb_get_next_collection_id_19034.
func DocumentdbGetNextCollectionId(ctx context.Context, conn *pgx.Conn, l *slog.Logger) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.documentdb_get_next_collection_id", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.documentdb_get_next_collection_id([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.documentdb_get_next_collection_id", l)
	}
	return
}

// DocumentdbGetNextCollectionIndexId is a wrapper for
//
//	[Comment] documentdb_api_internal.documentdb_get_next_collection_index_id_19056.
func DocumentdbGetNextCollectionIndexId(ctx context.Context, conn *pgx.Conn, l *slog.Logger) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.documentdb_get_next_collection_index_id", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.documentdb_get_next_collection_index_id([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.documentdb_get_next_collection_index_id", l)
	}
	return
}

// EmptyDataTable is a wrapper for
//
//	[Comment] documentdb_api_internal.empty_data_table_19031.
func EmptyDataTable(ctx context.Context, conn *pgx.Conn, l *slog.Logger, shardKeyValue int64, objectID wirebson.RawDocument, document wirebson.RawDocument, creationTime struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.empty_data_table", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.empty_data_table([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.empty_data_table", l)
	}
	return
}

// EnsureValidDbColl is a wrapper for
//
//	[Comment] documentdb_api_internal.ensure_valid_db_coll_19035.
func EnsureValidDbColl(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ string, _ string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.ensure_valid_db_coll", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.ensure_valid_db_coll([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.ensure_valid_db_coll", l)
	}
	return
}

// GenerateUniqueShardDocument is a wrapper for
//
//	[Comment] documentdb_api_internal.generate_unique_shard_document_18728.
func GenerateUniqueShardDocument(ctx context.Context, conn *pgx.Conn, l *slog.Logger, document wirebson.RawDocument, shardKeyValue int64, uniqueSpec wirebson.RawDocument, sparse bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.generate_unique_shard_document", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.generate_unique_shard_document([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.generate_unique_shard_document", l)
	}
	return
}

// GetShardKeyValue is a wrapper for
//
//	[Comment] documentdb_api_internal.get_shard_key_value_19074.
func GetShardKeyValue(ctx context.Context, conn *pgx.Conn, l *slog.Logger, shardKey wirebson.RawDocument, collectionId int64, document wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.get_shard_key_value", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.get_shard_key_value([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.get_shard_key_value", l)
	}
	return
}

// GinBsonExclusionConsistent is a wrapper for
//
//	[Comment] documentdb_api_internal.gin_bson_exclusion_consistent_18726.
func GinBsonExclusionConsistent(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.gin_bson_exclusion_consistent", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.gin_bson_exclusion_consistent([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.gin_bson_exclusion_consistent", l)
	}
	return
}

// GinBsonExclusionExtractQuery is a wrapper for
//
//	[Comment] documentdb_api_internal.gin_bson_exclusion_extract_query_18725.
func GinBsonExclusionExtractQuery(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.gin_bson_exclusion_extract_query", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.gin_bson_exclusion_extract_query([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.gin_bson_exclusion_extract_query", l)
	}
	return
}

// GinBsonExclusionExtractValue is a wrapper for
//
//	[Comment] documentdb_api_internal.gin_bson_exclusion_extract_value_18723.
func GinBsonExclusionExtractValue(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.gin_bson_exclusion_extract_value", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.gin_bson_exclusion_extract_value([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.gin_bson_exclusion_extract_value", l)
	}
	return
}

// GinBsonExclusionOptions is a wrapper for
//
//	[Comment] documentdb_api_internal.gin_bson_exclusion_options_18724.
func GinBsonExclusionOptions(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.gin_bson_exclusion_options", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.gin_bson_exclusion_options([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.gin_bson_exclusion_options", l)
	}
	return
}

// GinBsonHashedConsistent is a wrapper for
//
//	[Comment] documentdb_api_internal.gin_bson_hashed_consistent_18863.
func GinBsonHashedConsistent(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.gin_bson_hashed_consistent", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.gin_bson_hashed_consistent([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.gin_bson_hashed_consistent", l)
	}
	return
}

// GinBsonHashedExtractQuery is a wrapper for
//
//	[Comment] documentdb_api_internal.gin_bson_hashed_extract_query_18862.
func GinBsonHashedExtractQuery(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.gin_bson_hashed_extract_query", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.gin_bson_hashed_extract_query([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.gin_bson_hashed_extract_query", l)
	}
	return
}

// GinBsonHashedExtractValue is a wrapper for
//
//	[Comment] documentdb_api_internal.gin_bson_hashed_extract_value_18860.
func GinBsonHashedExtractValue(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.gin_bson_hashed_extract_value", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.gin_bson_hashed_extract_value([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.gin_bson_hashed_extract_value", l)
	}
	return
}

// GinBsonHashedOptions is a wrapper for
//
//	[Comment] documentdb_api_internal.gin_bson_hashed_options_18861.
func GinBsonHashedOptions(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.gin_bson_hashed_options", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.gin_bson_hashed_options([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.gin_bson_hashed_options", l)
	}
	return
}

// GinBsonUniqueShardConsistent is a wrapper for
//
//	[Comment] documentdb_api_internal.gin_bson_unique_shard_consistent_18733.
func GinBsonUniqueShardConsistent(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.gin_bson_unique_shard_consistent", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.gin_bson_unique_shard_consistent([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.gin_bson_unique_shard_consistent", l)
	}
	return
}

// GinBsonUniqueShardExtractQuery is a wrapper for
//
//	[Comment] documentdb_api_internal.gin_bson_unique_shard_extract_query_18731.
func GinBsonUniqueShardExtractQuery(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.gin_bson_unique_shard_extract_query", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.gin_bson_unique_shard_extract_query([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.gin_bson_unique_shard_extract_query", l)
	}
	return
}

// GinBsonUniqueShardExtractValue is a wrapper for
//
//	[Comment] documentdb_api_internal.gin_bson_unique_shard_extract_value_18730.
func GinBsonUniqueShardExtractValue(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.gin_bson_unique_shard_extract_value", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.gin_bson_unique_shard_extract_value([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.gin_bson_unique_shard_extract_value", l)
	}
	return
}

// GinBsonUniqueShardPreConsistent is a wrapper for
//
//	[Comment] documentdb_api_internal.gin_bson_unique_shard_pre_consistent_18732.
func GinBsonUniqueShardPreConsistent(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}, _ wirebson.RawDocument, _ struct{}, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.gin_bson_unique_shard_pre_consistent", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.gin_bson_unique_shard_pre_consistent([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.gin_bson_unique_shard_pre_consistent", l)
	}
	return
}

// IndexBuildIsInProgress is a wrapper for
//
//	[Comment] documentdb_api_internal.index_build_is_in_progress_19088.
func IndexBuildIsInProgress(ctx context.Context, conn *pgx.Conn, l *slog.Logger, indexId struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.index_build_is_in_progress", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.index_build_is_in_progress([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.index_build_is_in_progress", l)
	}
	return
}

// IndexSpecAsBson is a wrapper for
//
//	[Comment] documentdb_api_internal.index_spec_as_bson_19089.
func IndexSpecAsBson(ctx context.Context, conn *pgx.Conn, l *slog.Logger, indexSpec struct{}, forGetIndexes bool, namespacename string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.index_spec_as_bson", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.index_spec_as_bson([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.index_spec_as_bson", l)
	}
	return
}

// IndexSpecOptionsAreEquivalent is a wrapper for
//
//	[Comment] documentdb_api_internal.index_spec_options_are_equivalent_19090.
func IndexSpecOptionsAreEquivalent(ctx context.Context, conn *pgx.Conn, l *slog.Logger, leftIndexSpec struct{}, rightIndexSpec struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.index_spec_options_are_equivalent", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.index_spec_options_are_equivalent([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.index_spec_options_are_equivalent", l)
	}
	return
}

// IndexStatsAggregation is a wrapper for
//
//	[Comment] documentdb_api_internal.index_stats_aggregation_19138.
func IndexStatsAggregation(ctx context.Context, conn *pgx.Conn, l *slog.Logger, databaseName string, collectionName string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.index_stats_aggregation", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.index_stats_aggregation([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.index_stats_aggregation", l)
	}
	return
}

// IndexStatsWorker is a wrapper for
//
//	[Comment] documentdb_api_internal.index_stats_worker_19139.
func IndexStatsWorker(ctx context.Context, conn *pgx.Conn, l *slog.Logger, databaseName string, collectionName string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.index_stats_worker", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.index_stats_worker([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.index_stats_worker", l)
	}
	return
}

// InsertOne is a wrapper for
//
//	[Comment] documentdb_api_internal.insert_one_19099.
func InsertOne(ctx context.Context, conn *pgx.Conn, l *slog.Logger, collectionId int64, shardKeyValue int64, document wirebson.RawDocument, transactionId string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.insert_one", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.insert_one([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.insert_one", l)
	}
	return
}

// InsertWorker is a wrapper for
//
//	[Comment] documentdb_api_internal.insert_worker_19100.
func InsertWorker(ctx context.Context, conn *pgx.Conn, l *slog.Logger, collectionId int64, shardKeyValue int64, shardOid struct{}, insertInternalSpec wirebson.RawDocument, insertInternalDocs []byte, transactionId string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.insert_worker", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.insert_worker([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.insert_worker", l)
	}
	return
}

// InvalidateCollectionCache is a wrapper for
//
//	[Comment] documentdb_api_internal.invalidate_collection_cache_19037.
func InvalidateCollectionCache(ctx context.Context, conn *pgx.Conn, l *slog.Logger) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.invalidate_collection_cache", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.invalidate_collection_cache([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.invalidate_collection_cache", l)
	}
	return
}

// RecordIdIndex is a wrapper for
//
//	[Comment] documentdb_api_internal.record_id_index_19087.
func RecordIdIndex(ctx context.Context, conn *pgx.Conn, l *slog.Logger, collectionId int64) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.record_id_index", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.record_id_index([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.record_id_index", l)
	}
	return
}

// RumBsonSinglePathExtractTsvector is a wrapper for
//
//	[Comment] documentdb_api_internal.rum_bson_single_path_extract_tsvector_18782.
func RumBsonSinglePathExtractTsvector(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ wirebson.RawDocument, _ struct{}, _ struct{}, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.rum_bson_single_path_extract_tsvector", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.rum_bson_single_path_extract_tsvector([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.rum_bson_single_path_extract_tsvector", l)
	}
	return
}

// RumBsonTextPathOptions is a wrapper for
//
//	[Comment] documentdb_api_internal.rum_bson_text_path_options_18783.
func RumBsonTextPathOptions(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.rum_bson_text_path_options", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.rum_bson_text_path_options([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.rum_bson_text_path_options", l)
	}
	return
}

// ScheduleBackgroundIndexBuildWorkers is a wrapper for
//
//	[Comment] documentdb_api_internal.schedule_background_index_build_workers_19096.
func ScheduleBackgroundIndexBuildWorkers(ctx context.Context, conn *pgx.Conn, l *slog.Logger, maxNumActiveUserIndexBuilds struct{}, userIndexBuildSchedule struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.schedule_background_index_build_workers", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.schedule_background_index_build_workers([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.schedule_background_index_build_workers", l)
	}
	return
}

// SchemaValidationAgainstUpdate is a wrapper for
//
//	[Comment] documentdb_api_internal.schema_validation_against_update_19124.
func SchemaValidationAgainstUpdate(ctx context.Context, conn *pgx.Conn, l *slog.Logger, evalState struct{}, targetDocument wirebson.RawDocument, sourceDocument wirebson.RawDocument, isModerate bool) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.schema_validation_against_update", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.schema_validation_against_update([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.schema_validation_against_update", l)
	}
	return
}

// ScramSha256GetSaltAndIterations is a wrapper for
//
//	[Comment] documentdb_api_internal.scram_sha256_get_salt_and_iterations_19165.
func ScramSha256GetSaltAndIterations(ctx context.Context, conn *pgx.Conn, l *slog.Logger, userName string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.scram_sha256_get_salt_and_iterations", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.scram_sha256_get_salt_and_iterations([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.scram_sha256_get_salt_and_iterations", l)
	}
	return
}

// TdigestAddDouble is a wrapper for
//
//	[Comment] documentdb_api_internal.tdigest_add_double_18966.
func TdigestAddDouble(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.tdigest_add_double", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.tdigest_add_double([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.tdigest_add_double", l)
	}
	return
}

// TdigestAddDoubleArray is a wrapper for
//
//	[Comment] documentdb_api_internal.tdigest_add_double_array_18967.
func TdigestAddDoubleArray(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ wirebson.RawDocument, _ struct{}, _ wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.tdigest_add_double_array", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.tdigest_add_double_array([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.tdigest_add_double_array", l)
	}
	return
}

// TdigestArrayPercentiles is a wrapper for
//
//	[Comment] documentdb_api_internal.tdigest_array_percentiles_18969.
func TdigestArrayPercentiles(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.tdigest_array_percentiles", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.tdigest_array_percentiles([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.tdigest_array_percentiles", l)
	}
	return
}

// TdigestCombine is a wrapper for
//
//	[Comment] documentdb_api_internal.tdigest_combine_18970.
func TdigestCombine(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.tdigest_combine", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.tdigest_combine([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.tdigest_combine", l)
	}
	return
}

// TdigestDeserial is a wrapper for
//
//	[Comment] documentdb_api_internal.tdigest_deserial_18972.
func TdigestDeserial(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.tdigest_deserial", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.tdigest_deserial([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.tdigest_deserial", l)
	}
	return
}

// TdigestPercentile is a wrapper for
//
//	[Comment] documentdb_api_internal.tdigest_percentile_18968.
func TdigestPercentile(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.tdigest_percentile", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.tdigest_percentile([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.tdigest_percentile", l)
	}
	return
}

// TdigestSerial is a wrapper for
//
//	[Comment] documentdb_api_internal.tdigest_serial_18971.
func TdigestSerial(ctx context.Context, conn *pgx.Conn, l *slog.Logger, _ struct{}) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.tdigest_serial", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.tdigest_serial([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.tdigest_serial", l)
	}
	return
}

// TriggerValidateDbname is a wrapper for
//
//	[Comment] documentdb_api_internal.trigger_validate_dbname_19038.
func TriggerValidateDbname(ctx context.Context, conn *pgx.Conn, l *slog.Logger) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.trigger_validate_dbname", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.trigger_validate_dbname([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.trigger_validate_dbname", l)
	}
	return
}

// UpdateOne is a wrapper for
//
//	[Comment] documentdb_api_internal.update_one_19104.
func UpdateOne(ctx context.Context, conn *pgx.Conn, l *slog.Logger, collectionId int64, shardKeyValue int64, query wirebson.RawDocument, update wirebson.RawDocument, shardKey wirebson.RawDocument, isUpsert bool, sort wirebson.RawDocument, returnOldOrNew bool, returnFields wirebson.RawDocument, arrayFilters wirebson.RawDocument, transactionId string, oIsRowUpdated bool, oUpdateSkipped bool, oIsRetry bool, oReinsertDocument wirebson.RawDocument, oUpsertedObjectId struct{}, oResultDocument wirebson.RawDocument) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.update_one", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.update_one([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.update_one", l)
	}
	return
}

// UpdateWorker is a wrapper for
//
//	[Comment] documentdb_api_internal.update_worker_19105.
func UpdateWorker(ctx context.Context, conn *pgx.Conn, l *slog.Logger, collectionId int64, shardKeyValue int64, shardOid struct{}, updateInternalSpec wirebson.RawDocument, updateInternalDocs []byte, transactionId string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.update_worker", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.update_worker([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.update_worker", l)
	}
	return
}

// ValidateDbname is a wrapper for
//
//	[Comment] documentdb_api_internal.validate_dbname_19039.
func ValidateDbname(ctx context.Context, conn *pgx.Conn, l *slog.Logger, database string) ([Returns], err error) {
	ctx, span := otel.Tracer("").Start(ctx, "documentdb_api_internal.validate_dbname", oteltrace.WithSpanKind(oteltrace.SpanKindClient))
	defer span.End()

	row := conn.QueryRow(ctx, "SELECT [SQLReturns] FROM documentdb_api_internal.validate_dbname([SQLArgs])", [QueryRowArgs])
	if err = row.Scan([ScanArgs]); err != nil {
		err = mongoerrors.Make(ctx, err, "documentdb_api_internal.validate_dbname", l)
	}
	return
}
